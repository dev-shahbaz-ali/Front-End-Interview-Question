[
  {
    "id": "1",
    "category": "all",
    "difficulty": "easy",
    "question": "What is Next.js?",
    "answer": "Next.js is a popular React framework designed for building scalable, production-ready web applications. It provides features like server-side rendering, static site generation, and API routes."
  },
  {
    "id": "2",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the key features of Next.js?",
    "answer": "Key features of Next.js include: Server-Side Rendering (SSR), Static Site Generation (SSG), Incremental Static Regeneration (ISR), API Routes, File-based routing, Image Optimization, Automatic code splitting"
  },
  {
    "id": "3",
    "category": "react",
    "difficulty": "easy",
    "question": "How is Next.js different from React.js?",
    "answer": "While React.js is a library for building UIs, Next.js is a framework built on top of React, providing additional features such as SSR, SSG, and routing out of the box."
  },
  {
    "id": "4",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Hooks and why are they important?",
    "answer": "React Hooks are functions that let you use state and other React features without writing a class. They provide a more direct API to React concepts like props, state, context, refs, and lifecycle."
  },
  {
    "id": "5",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What is the difference between 'let', 'const', and 'var' in JavaScript?",
    "answer": "'var' is function-scoped and hoisted. 'let' and 'const' are block-scoped. 'let' allows reassignment while 'const' doesn't. 'const' variables must be initialized during declaration."
  },
  {
    "id": "6",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the main benefits of using TypeScript over JavaScript?",
    "answer": "TypeScript provides static typing, better tooling support, early error detection, improved code maintainability, better documentation through types, and advanced features like interfaces and generics."
  },
  {
    "id": "7",
    "category": "tailwindcss",
    "difficulty": "easy",
    "question": "What is Tailwind CSS and how does it differ from traditional CSS frameworks?",
    "answer": "Tailwind CSS is a utility-first CSS framework that provides low-level utility classes to build custom designs directly in markup, rather than offering pre-designed components like Bootstrap."
  },
  {
    "id": "8",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the CSS Box Model.",
    "answer": "The CSS Box Model describes how elements are laid out, consisting of: content, padding, border, and margin. It determines how space is distributed around an element and how elements interact with each other."
  },
  {
    "id": "9",
    "category": "html",
    "difficulty": "easy",
    "question": "What is the purpose of the DOCTYPE declaration in HTML?",
    "answer": "The DOCTYPE declaration tells the web browser which version of HTML the page is written in, ensuring the page is rendered in standards mode rather than quirks mode."
  },
  {
    "id": "10",
    "category": "sass",
    "difficulty": "medium",
    "question": "What are the main features of Sass that make it useful for CSS development?",
    "answer": "Sass provides variables, nesting, mixins, functions, inheritance, operators, and other features that make CSS more maintainable and easier to write."
  },
  {
    "id": "11",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you write a regular expression to validate an email address?",
    "answer": "A basic email regex: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/. Note that complete email validation is complex and often better handled with libraries or simple confirmation emails."
  },
  {
    "id": "12",
    "category": "prisma",
    "difficulty": "medium",
    "question": "What is Prisma ORM and how does it differ from traditional ORMs?",
    "answer": "Prisma is a next-generation ORM that provides a type-safe database client, auto-generated queries, and a schema definition language. It differs from traditional ORMs by not using active record or data mapper patterns."
  },
  {
    "id": "13",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "What are the key features of Drizzle ORM?",
    "answer": "Drizzle ORM is a lightweight ORM with type safety, SQL-like syntax, schema migrations, and support for multiple databases. It's designed to be simple and close to SQL while providing TypeScript benefits."
  },
  {
    "id": "14",
    "category": "backend",
    "difficulty": "easy",
    "question": "What is the difference between authentication and authorization?",
    "answer": "Authentication verifies who a user is (login), while authorization determines what resources a user can access and what actions they can perform."
  },
  {
    "id": "15",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "Explain the event loop in Node.js.",
    "answer": "The event loop is what allows Node.js to perform non-blocking I/O operations despite being single-threaded. It handles asynchronous callbacks by offloading operations when possible and processing events in phases."
  },
  {
    "id": "16",
    "category": "express",
    "difficulty": "easy",
    "question": "What is Express.js and what is it commonly used for?",
    "answer": "Express.js is a minimal and flexible Node.js web application framework that provides a robust set of features for building web and mobile applications, particularly for creating APIs."
  },
  {
    "id": "17",
    "category": "other",
    "difficulty": "easy",
    "question": "What is Git and why is it important for developers?",
    "answer": "Git is a distributed version control system that tracks changes in source code during development. It enables collaboration, maintains history, and helps manage different versions of a project."
  },
  {
    "id": "18",
    "category": "react",
    "difficulty": "hard",
    "question": "Explain React Fiber architecture.",
    "answer": "React Fiber is a complete rewrite of React's core algorithm. It enables features like incremental rendering, better handling of animations, and the ability to split rendering work into chunks and spread it over multiple frames."
  },
  {
    "id": "19",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle static site generation (SSG) and server-side rendering (SSR) differently?",
    "answer": "SSG generates HTML at build time which is reused on each request, ideal for content that doesn't change often. SSR generates HTML on each request, better for frequently updated or personalized content."
  },
  {
    "id": "20",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the event delegation pattern in JavaScript?",
    "answer": "Event delegation is a technique where you attach a single event listener to a parent element instead of multiple listeners to child elements. Events bubble up and can be handled based on the target element."
  },
  {
    "id": "21",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are discriminated unions in TypeScript and how are they useful?",
    "answer": "Discriminated unions are a pattern where a common property (the discriminant) is used to distinguish between different object shapes. This allows TypeScript to narrow types accurately in conditional blocks."
  },
  {
    "id": "22",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How would you implement a responsive grid layout in Tailwind CSS?",
    "answer": "Use the 'grid' class with responsive prefixes like 'md:grid-cols-3' for different breakpoints. Tailwind provides utilities for grid columns, rows, gaps, and alignment that can be combined responsively."
  },
  {
    "id": "23",
    "category": "css",
    "difficulty": "hard",
    "question": "Explain how CSS specificity works.",
    "answer": "CSS specificity determines which styles are applied when multiple rules target the same element. It's calculated based on selector types: inline styles (1000), IDs (100), classes/attributes (10), elements/pseudo-elements (1)."
  },
  {
    "id": "24",
    "category": "html",
    "difficulty": "medium",
    "question": "What are semantic HTML elements and why are they important?",
    "answer": "Semantic elements (like <header>, <article>, <nav>) clearly describe their meaning to both browser and developer. They improve accessibility, SEO, and make code more readable and maintainable."
  },
  {
    "id": "25",
    "category": "sass",
    "difficulty": "easy",
    "question": "How do you create and use variables in Sass?",
    "answer": "Variables in Sass are declared with $ followed by the name: $primary-color: #333;. They're used by referencing the variable name: color: $primary-color;."
  },
  {
    "id": "26",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to find all numbers in a string?",
    "answer": "In JavaScript: const numbers = str.match(/\\d+/g); This will return an array of all sequences of digits in the string."
  },
  {
    "id": "27",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How does Prisma handle database migrations?",
    "answer": "Prisma Migrate is a tool that generates and executes SQL migration files based on changes to your Prisma schema. It keeps track of applied migrations and can generate rollback migrations."
  },
  {
    "id": "28",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How does Drizzle ORM handle relations between tables?",
    "answer": "Drizzle handles relations through its schema definition, allowing you to define one-to-one, one-to-many, and many-to-many relationships with type safety, which can then be queried with joins."
  },
  {
    "id": "29",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is JWT and how is it used in authentication?",
    "answer": "JSON Web Tokens (JWT) are compact, URL-safe tokens that represent claims between parties. They consist of a header, payload, and signature, and are commonly used for stateless authentication."
  },
  {
    "id": "30",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What are worker threads in Node.js and when would you use them?",
    "answer": "Worker threads allow running JavaScript in parallel. They're useful for CPU-intensive tasks that would otherwise block the event loop, though I/O operations are still better handled asynchronously."
  },
  {
    "id": "31",
    "category": "express",
    "difficulty": "medium",
    "question": "What is middleware in Express.js?",
    "answer": "Middleware are functions that have access to the request, response, and next function in the application's request-response cycle. They can execute code, modify objects, or end the request-response cycle."
  },
  {
    "id": "32",
    "category": "other",
    "difficulty": "medium",
    "question": "What are the differences between HTTP/1.1 and HTTP/2?",
    "answer": "HTTP/2 introduces multiplexing (multiple requests over a single connection), header compression, server push, binary protocol, and stream prioritization, improving performance over HTTP/1.1."
  },
  {
    "id": "33",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the Virtual DOM in React?",
    "answer": "The Virtual DOM is a lightweight copy of the actual DOM that React maintains. When state changes, React compares the new Virtual DOM with the previous one (diffing) and efficiently updates only the changed parts of the real DOM (reconciliation)."
  },
  {
    "id": "34",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are API Routes in Next.js?",
    "answer": "API Routes allow you to create API endpoints as Node.js serverless functions within your Next.js application. Files in the 'pages/api' directory are treated as API endpoints instead of pages."
  },
  {
    "id": "35",
    "category": "javascript",
    "difficulty": "hard",
    "question": "Explain the concept of closures in JavaScript.",
    "answer": "A closure is a function that remembers its outer variables and can access them even after the outer function has returned. Closures are created every time a function is created, at function creation time."
  },
  {
    "id": "36",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are generics in TypeScript and when would you use them?",
    "answer": "Generics allow creating reusable components that work with multiple types while maintaining type safety. They're useful when you want to preserve type information when working with collections, utility functions, or reusable components."
  },
  {
    "id": "37",
    "category": "tailwindcss",
    "difficulty": "hard",
    "question": "How would you implement dark mode using Tailwind CSS?",
    "answer": "Use the 'dark:' variant prefix with the 'dark' mode configuration set to 'class' in tailwind.config.js. Then toggle a 'dark' class on the HTML element, and style elements with classes like 'dark:bg-gray-800'."
  },
  {
    "id": "38",
    "category": "css",
    "difficulty": "medium",
    "question": "What is CSS Flexbox and when would you use it?",
    "answer": "Flexbox is a layout model that allows efficient alignment and distribution of space among items in a container, even when their size is unknown. It's ideal for one-dimensional layouts (either rows or columns)."
  },
  {
    "id": "39",
    "category": "html",
    "difficulty": "medium",
    "question": "What are data attributes in HTML and how are they useful?",
    "answer": "Data attributes (data-*) allow storing extra information on HTML elements without affecting presentation or behavior. They can be accessed via JavaScript and are useful for storing element-specific data."
  },
  {
    "id": "40",
    "category": "sass",
    "difficulty": "medium",
    "question": "What are mixins in Sass and how do they differ from functions?",
    "answer": "Mixins are reusable blocks of styles that can be included in other rules. They can accept arguments but return CSS declarations rather than values. Functions return values that can be used in property assignments."
  },
  {
    "id": "41",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to validate a password with specific requirements?",
    "answer": "Example for 8+ chars with uppercase, lowercase, number: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\\d]{8,}$/. This uses positive lookaheads to ensure each requirement is met."
  },
  {
    "id": "42",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you handle transactions in Prisma?",
    "answer": "Prisma provides $transaction for interactive transactions where you can perform multiple operations in sequence, or batch transactions for independent operations that should succeed or fail together."
  },
  {
    "id": "43",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How does Drizzle ORM handle raw SQL queries?",
    "answer": "Drizzle provides a sql template tag for writing raw SQL queries with type safety. You can interpolate values safely and even infer return types for the results."
  },
  {
    "id": "44",
    "category": "backend",
    "difficulty": "hard",
    "question": "What is the difference between REST and GraphQL?",
    "answer": "REST is resource-based with fixed endpoints returning complete resources. GraphQL is query-based with a single endpoint, allowing clients to request exactly the data they need in one request."
  },
  {
    "id": "45",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the package.json file in Node.js projects?",
    "answer": "package.json is a manifest file that contains project metadata, dependencies, scripts, and configuration. It's used by npm/yarn to manage packages, versions, and project setup."
  },
  {
    "id": "46",
    "category": "express",
    "difficulty": "hard",
    "question": "How would you handle errors in an Express application?",
    "answer": "Use middleware functions with four parameters (err, req, res, next). Organize errors with custom Error classes. Use try/catch in async routes or wrap with a higher-order function. Implement proper HTTP status codes."
  },
  {
    "id": "47",
    "category": "other",
    "difficulty": "medium",
    "question": "What is CI/CD and why is it important?",
    "answer": "CI (Continuous Integration) means regularly merging code changes into a shared repo with automated testing. CD (Continuous Delivery/Deployment) automates release processes. Together they enable faster, more reliable software releases."
  },
  {
    "id": "48",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Portals and when would you use them?",
    "answer": "Portals provide a way to render children into a DOM node outside the parent component's hierarchy. They're useful for modals, tooltips, or any UI that needs to break out of its container (e.g., for CSS z-index or positioning)."
  },
  {
    "id": "49",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "What is Incremental Static Regeneration (ISR) in Next.js?",
    "answer": "ISR allows you to update static pages after build time without rebuilding the entire site. You specify a revalidation time, and Next.js will regenerate the page in the background when it receives requests after that time."
  },
  {
    "id": "50",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between '==' and '===' in JavaScript?",
    "answer": "'==' performs type coercion before comparison, while '===' (strict equality) checks both value and type without coercion. '===' is generally preferred as it's more predictable."
  },
  {
    "id": "51",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are type guards in TypeScript?",
    "answer": "Type guards are expressions that perform runtime checks to narrow down the type of a variable within a block. They include typeof, instanceof checks, or custom functions with 'is' type predicates."
  },
  {
    "id": "52",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How do you create custom animations in Tailwind CSS?",
    "answer": "Define custom animations in tailwind.config.js under the 'extend.animation' key. Then apply them with the 'animate-' prefix. You can also use the @keyframes directive in your CSS and extend Tailwind's animation utilities."
  },
  {
    "id": "53",
    "category": "css",
    "difficulty": "medium",
    "question": "What is CSS Grid and how does it differ from Flexbox?",
    "answer": "CSS Grid is a two-dimensional layout system (rows and columns simultaneously), while Flexbox is one-dimensional (either rows or columns). Grid is better for overall page layouts, Flexbox for aligning content within components."
  },
  {
    "id": "54",
    "category": "html",
    "difficulty": "hard",
    "question": "What are Web Components and how do they work?",
    "answer": "Web Components are a set of web platform APIs that allow creating reusable custom elements with encapsulated functionality. They consist of Custom Elements, Shadow DOM, and HTML Templates."
  },
  {
    "id": "55",
    "category": "sass",
    "difficulty": "hard",
    "question": "How would you create a responsive grid system using Sass?",
    "answer": "Create a mixin that generates grid classes based on breakpoints, using variables for column counts and gutters. The mixin would output media queries and calculate widths dynamically using Sass math operations."
  },
  {
    "id": "56",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you use regex to parse and extract data from a URL?",
    "answer": "Example to extract parts: /^(https?:\\/\\/)?([^\\/?#]+)([^?#]*)(\\?[^#]*)?(#.*)?/. This captures protocol, domain, path, query, and hash segments. More specific patterns can be created for particular URL structures."
  },
  {
    "id": "57",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How does Prisma handle database schema validation?",
    "answer": "Prisma validates the schema against the database during introspection (when pulling the schema from an existing DB) and when generating the client. It checks for type consistency, relation integrity, and other constraints."
  },
  {
    "id": "58",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How would you implement complex joins with Drizzle ORM?",
    "answer": "Drizzle provides a query builder with methods like .innerJoin(), .leftJoin(), etc. You can chain these to build complex joins while maintaining type safety, and use the .fields() method to select specific columns."
  },
  {
    "id": "59",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some strategies for optimizing database queries?",
    "answer": "Strategies include: adding proper indexes, optimizing query structure, using JOINs wisely, implementing pagination, caching results, using prepared statements, denormalizing where appropriate, and analyzing query plans."
  },
  {
    "id": "60",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the purpose of the 'cluster' module in Node.js?",
    "answer": "The cluster module allows creating child processes (workers) that share server ports, enabling better utilization of multi-core systems by running multiple Node.js instances to handle the load."
  },
  {
    "id": "61",
    "category": "express",
    "difficulty": "medium",
    "question": "How would you implement rate limiting in Express?",
    "answer": "Use middleware like 'express-rate-limit' which tracks requests from IPs. Configure it with windowMs (time window), max (max requests per window), and optional delayMs. Store counts in memory or Redis for distributed apps."
  },
  {
    "id": "62",
    "category": "other",
    "difficulty": "hard",
    "question": "Explain the principles of secure authentication.",
    "answer": "Principles include: never store plaintext passwords (use strong hashing like bcrypt), implement proper session management, use HTTPS, add rate limiting, implement CSRF protection, use secure cookies, and consider multi-factor authentication."
  },
  {
    "id": "63",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the Context API in React and when would you use it?",
    "answer": "Context provides a way to pass data through the component tree without manually passing props. It's useful for global data like themes, user auth, or preferences that many components need access to."
  },
  {
    "id": "64",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Next.js handle image optimization?",
    "answer": "Next.js provides an Image component that automatically optimizes images (resizing, format conversion, lazy loading) and serves them via a built-in image optimization API. It works with both local and remote images."
  },
  {
    "id": "65",
    "category": "javascript",
    "difficulty": "hard",
    "question": "Explain the prototype chain in JavaScript.",
    "answer": "JavaScript uses prototypal inheritance where objects can inherit properties from other objects. Each object has a prototype (accessed via __proto__), and when a property isn't found on an object, JavaScript looks up the prototype chain until it finds it or reaches null."
  },
  {
    "id": "66",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are conditional types in TypeScript?",
    "answer": "Conditional types select between two types based on a condition: T extends U ? X : Y. They're powerful when combined with generics, allowing type transformations based on input types."
  },
  {
    "id": "67",
    "category": "tailwindcss",
    "difficulty": "easy",
    "question": "How do you customize Tailwind's default theme?",
    "answer": "In tailwind.config.js, use the 'theme' property to extend or override defaults. You can customize colors, spacing, fonts, breakpoints, etc., while preserving the rest of Tailwind's defaults."
  },
  {
    "id": "68",
    "category": "css",
    "difficulty": "hard",
    "question": "What is CSS-in-JS and what are its advantages?",
    "answer": "CSS-in-JS is a pattern where CSS is written in JavaScript instead of separate files. Advantages include scoped styles, dynamic styling based on props/state, automatic vendor prefixing, and elimination of unused CSS."
  },
  {
    "id": "69",
    "category": "html",
    "difficulty": "easy",
    "question": "What is the purpose of the 'alt' attribute in images?",
    "answer": "The 'alt' attribute provides alternative text for images when they can't be displayed. It's important for accessibility (screen readers), SEO, and when images fail to load."
  },
  {
    "id": "70",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create loops in Sass and what are they useful for?",
    "answer": "Sass has @for, @each, and @while loops. They're useful for generating utility classes, grid systems, or any repetitive CSS patterns. Example: @for $i from 1 through 12 { .col-#{$i} { width: $i * 8.33%; } }"
  },
  {
    "id": "71",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to match HTML tags?",
    "answer": "A basic pattern: /<([a-z]+)([^<]+)*(?:>(.*)<\\/\\1>|\\s+\\/>)/. However, parsing HTML with regex is generally discouraged for complex cases - use a proper HTML parser instead."
  },
  {
    "id": "72",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you handle database seeding with Prisma?",
    "answer": "Create a seed script that uses the Prisma client to insert initial data. You can run it with 'prisma db seed' or a custom script. For larger datasets, consider using raw SQL for better performance."
  },
  {
    "id": "73",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How does Drizzle ORM handle schema migrations?",
    "answer": "Drizzle provides a migration API where you define schema changes in code. It can generate SQL migration files and track applied migrations, similar to other ORMs but with a more SQL-centric approach."
  },
  {
    "id": "74",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is CORS and how do you handle it in a backend service?",
    "answer": "CORS (Cross-Origin Resource Sharing) is a security mechanism that restricts cross-origin requests. Handle it by setting proper headers (Access-Control-Allow-Origin, etc.), implementing preflight request handling, and configuring allowed methods/headers."
  },
  {
    "id": "75",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What is the 'stream' module in Node.js and when would you use it?",
    "answer": "Streams are collections of data that might not be available all at once. They're useful for processing large files, handling real-time data, or any I/O operations where memory efficiency is important."
  },
  {
    "id": "76",
    "category": "express",
    "difficulty": "hard",
    "question": "How would you implement file uploads in Express?",
    "answer": "Use middleware like 'multer' to handle multipart/form-data. Configure storage (disk/memory), file filters, size limits, and processing. For large files, consider streaming processing to avoid memory issues."
  },
  {
    "id": "77",
    "category": "other",
    "difficulty": "medium",
    "question": "What is Docker and how does it benefit development?",
    "answer": "Docker is a platform for containerizing applications. Benefits include consistent environments across machines, isolation, easy scaling, simplified dependency management, and reproducible builds."
  },
  {
    "id": "78",
    "category": "react",
    "difficulty": "hard",
    "question": "What is React Suspense and how does it work?",
    "answer": "Suspense lets components 'wait' for something before rendering. It's primarily used for code-splitting (with React.lazy) and data fetching. Components can suspend while loading, showing fallback UI until ready."
  },
  {
    "id": "79",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle internationalization (i18n)?",
    "answer": "Next.js has built-in i18n routing that supports sub-path (/en/page), domain (en.example.com), or hybrid strategies. It handles locale detection, routing, and can integrate with translation libraries."
  },
  {
    "id": "80",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are JavaScript Promises and how do they work?",
    "answer": "Promises represent eventual completion of async operations. They can be in pending, fulfilled, or rejected states. You chain .then() for success cases and .catch() for errors, avoiding callback hell."
  },
  {
    "id": "81",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are utility types in TypeScript and how are they useful?",
    "answer": "Utility types (like Partial, Pick, Omit, Record) transform existing types in useful ways. They help create new types from existing ones without repetition, making type definitions more maintainable."
  },
  {
    "id": "82",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How do you handle component variants in Tailwind CSS?",
    "answer": "Use the @variant directive in your CSS to create component variants, or combine Tailwind with a JS framework's class binding system. For complex cases, consider using the 'classnames' library to conditionally apply classes."
  },
  {
    "id": "83",
    "category": "css",
    "difficulty": "medium",
    "question": "What are CSS custom properties (variables) and how do you use them?",
    "answer": "CSS variables are defined with --prefix (--main-color: blue;) and accessed with var() (color: var(--main-color);). They're scoped to elements, can be changed dynamically, and help maintain consistent styling."
  },
  {
    "id": "84",
    "category": "html",
    "difficulty": "medium",
    "question": "What are the benefits of using the 'picture' element over 'img'?",
    "answer": "The 'picture' element provides art direction (different images for different viewports) and allows multiple source formats (via 'source' children) with fallback to 'img', helping with responsive images and modern formats like WebP."
  },
  {
    "id": "85",
    "category": "sass",
    "difficulty": "hard",
    "question": "How would you implement a theming system with Sass?",
    "answer": "Create a map of themes with color variables, then use mixins or functions to apply themes. Example: @mixin theme($theme) { --primary: map-get($theme, primary); } and apply with @include theme($light-theme);"
  },
  {
    "id": "86",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you use regex to validate a date in YYYY-MM-DD format?",
    "answer": "Pattern: /^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/. Note this validates format but not date logic (like Feb 30). For full validation, additional checks or a date library would be needed."
  },
  {
    "id": "87",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you handle many-to-many relationships in Prisma?",
    "answer": "Prisma supports implicit many-to-many relations where you define @relation fields on both models. For explicit relations (with additional fields), you create a join model with two @relation fields."
  },
  {
    "id": "88",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How would you implement pagination with Drizzle ORM?",
    "answer": "Use the .limit() and .offset() methods on your queries. Example: db.select().from(users).limit(10).offset(20). For cursor-based pagination, use .where() with conditions based on the cursor value."
  },
  {
    "id": "89",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is Redis and what are its common use cases?",
    "answer": "Redis is an in-memory data store used as a cache, message broker, or database. Common uses include session storage, rate limiting, real-time analytics, leaderboards, and pub/sub messaging systems."
  },
  {
    "id": "90",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the 'require' cache in Node.js and how does it work?",
    "answer": "Node caches modules after first require to improve performance. Subsequent requires return the cached version. The cache is stored in require.cache and can be deleted if you need to reload a module."
  },
  {
    "id": "91",
    "category": "express",
    "difficulty": "medium",
    "question": "How would you structure a large Express application?",
    "answer": "Organize by features/routes (not by file type), separate concerns (routes, controllers, services), use middleware for cross-cutting concerns, implement proper error handling, and consider using a DI container for complex apps."
  },
  {
    "id": "92",
    "category": "other",
    "difficulty": "hard",
    "question": "What are microservices and when would you choose them over a monolith?",
    "answer": "Microservices are small, independent services that work together. Choose them for large teams, need for independent scaling, different tech stacks per component, or organizational alignment. Monoliths are simpler for small projects."
  },
  {
    "id": "93",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Error Boundaries?",
    "answer": "Error Boundaries are React components that catch JavaScript errors in their child component tree, log them, and display a fallback UI instead of crashing. They don't catch errors in event handlers, async code, or server-side rendering."
  },
  {
    "id": "94",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Next.js Dynamic Routes and how do they work?",
    "answer": "Dynamic Routes allow creating pages with variable paths (like [id].js). The parameter is available in the router query object and during getStaticProps/getServerSideProps for data fetching based on the route."
  },
  {
    "id": "95",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What is the Event Loop in JavaScript and how does it work?",
    "answer": "The Event Loop handles async operations by offloading tasks to system APIs when possible, then processing the callback queue. It continuously checks the call stack and when empty, moves callbacks from the queue to the stack."
  },
  {
    "id": "96",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are declaration files (.d.ts) in TypeScript?",
    "answer": "Declaration files provide type information for existing JavaScript code. They contain type declarations but no implementations, allowing TypeScript to understand the shape of JavaScript libraries without changing the original code."
  },
  {
    "id": "97",
    "category": "tailwindcss",
    "difficulty": "hard",
    "question": "How would you implement a design system with Tailwind CSS?",
    "answer": "Define a comprehensive theme in tailwind.config.js with colors, typography, spacing, etc. Create reusable component templates. Use plugins for custom utilities. Document with Storybook or similar, and enforce consistency with linting rules."
  },
  {
    "id": "98",
    "category": "css",
    "difficulty": "hard",
    "question": "What is the Cascade in CSS and how does it work?",
    "answer": "The Cascade determines which styles apply when multiple rules target the same element. It considers origin (user agent, user, author), importance (!important), specificity, and source order to resolve conflicts."
  },
  {
    "id": "99",
    "category": "html",
    "difficulty": "hard",
    "question": "What is the Shadow DOM and how does it work?",
    "answer": "The Shadow DOM is a browser technology that provides encapsulation for DOM and CSS. It allows creating scoped DOM trees with isolated styles and markup, used by Web Components to prevent style leakage and conflicts."
  },
  {
    "id": "100",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create and use functions in Sass?",
    "answer": "Define functions with @function name($params) { @return value; }. They can perform calculations, manipulate colors, etc. Use them like built-in functions: width: calculate-width(10px);"
  },
  {
    "id": "101",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to find all words in a string?",
    "answer": "Pattern: /\\w+/g will match sequences of word characters (letters, digits, underscores). For just letters, use /[a-zA-Z]+/g. Adjust based on your definition of 'word' (e.g., include apostrophes)."
  },
  {
    "id": "102",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How would you optimize complex queries in Prisma?",
    "answer": "Strategies include: selecting only needed fields, using proper indexes, batching queries, using raw SQL for complex operations, implementing caching, and using Prisma's query logging to identify slow queries."
  },
  {
    "id": "103",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How does Drizzle ORM handle complex transactions?",
    "answer": "Drizzle provides a transaction API where you can wrap multiple operations in a callback. The transactions are atomic and can be nested. You can also use savepoints for partial rollbacks within transactions."
  },
  {
    "id": "104",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some strategies for scaling a backend service?",
    "answer": "Strategies include: horizontal scaling (more instances), vertical scaling (bigger machines), database read replicas, caching, CDNs, async processing, microservices, and optimizing database queries and indexes."
  },
  {
    "id": "105",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What is libuv and how does Node.js use it?",
    "answer": "libuv is a C library that provides the event loop and async I/O capabilities to Node.js. It handles the thread pool for file I/O, DNS, and other operations that can't be done asynchronously at the OS level."
  },
  {
    "id": "106",
    "category": "express",
    "difficulty": "hard",
    "question": "How would you implement real-time features in Express?",
    "answer": "Use WebSockets with libraries like Socket.IO or ws. For HTTP-based approaches, consider Server-Sent Events (SSE) or long polling. Integrate with a pub/sub system like Redis for scaling across multiple servers."
  },
  {
    "id": "107",
    "category": "other",
    "difficulty": "medium",
    "question": "What are WebSockets and when would you use them?",
    "answer": "WebSockets provide full-duplex communication over a single TCP connection. Use them for real-time features like chat, live updates, multiplayer games, or any app needing low-latency server-client communication."
  },
  {
    "id": "108",
    "category": "react",
    "difficulty": "hard",
    "question": "What is React Server Components?",
    "answer": "React Server Components are components that render on the server and can access server-side resources directly. They're sent to the client as a lightweight serialized format, reducing bundle size and enabling zero-bundle-size components."
  },
  {
    "id": "109",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle client-side navigation?",
    "answer": "Next.js uses client-side navigation via its Link component, which prefetches linked pages in the background. This provides SPA-like navigation without full page reloads, while maintaining SEO benefits and proper URL handling."
  },
  {
    "id": "110",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What are JavaScript Generators and how do they work?",
    "answer": "Generators are functions that can be exited and later re-entered, with their context saved across re-entrances. Defined with function*, they yield values via yield and can be iterated manually with .next() or in loops."
  },
  {
    "id": "111",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are template literal types in TypeScript?",
    "answer": "Template literal types allow creating new string types by combining existing ones, similar to template literals in JavaScript. Example: type EventName<T extends string> = `${T}Changed` lets you create 'nameChanged', 'ageChanged', etc."
  },
  {
    "id": "112",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How do you handle responsive design in Tailwind CSS?",
    "answer": "Tailwind uses mobile-first breakpoints (sm, md, lg, xl, 2xl) as prefixes to utility classes. Example: 'md:text-lg' applies the large text size from the 'md' breakpoint up. Customize breakpoints in the config file."
  },
  {
    "id": "113",
    "category": "css",
    "difficulty": "medium",
    "question": "What is BEM methodology in CSS?",
    "answer": "BEM (Block, Element, Modifier) is a naming convention: .block__element--modifier. Blocks are standalone components, elements are parts of blocks, and modifiers alter appearance/behavior. It aims to make CSS more maintainable and reduce specificity issues."
  },
  {
    "id": "114",
    "category": "html",
    "difficulty": "medium",
    "question": "What are ARIA attributes and why are they important?",
    "answer": "ARIA (Accessible Rich Internet Applications) attributes provide semantic information to assistive technologies. They're crucial for accessibility when native HTML semantics aren't sufficient, helping screen readers understand dynamic content and UI controls."
  },
  {
    "id": "115",
    "category": "sass",
    "difficulty": "hard",
    "question": "How would you implement a responsive typography system with Sass?",
    "answer": "Create a map of breakpoints and font sizes, then use mixins to generate responsive typography. Example: @mixin responsive-text($size) { font-size: map-get($sizes, $size); @each $bp, $value in $responsive-sizes { @media (min-width: $bp) { font-size: map-get($value, $size); } } }"
  },
  {
    "id": "116",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you use regex to validate a phone number with international formatting?",
    "answer": "Basic pattern: /^\\+[1-9]\\d{1,14}$/ (E.164 format). More specific patterns depend on country. For US: /^\\+1\\d{10}$/. Note that complete validation often requires additional checks or a library like libphonenumber."
  },
  {
    "id": "117",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you handle database connections with Prisma?",
    "answer": "Prisma manages connections via the Prisma Client, which uses a connection pool. Configure the connection URL in the DATABASE_URL environment variable or in the schema.prisma file. The client handles connection lifecycle automatically."
  },
  {
    "id": "118",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How does Drizzle ORM handle schema validation?",
    "answer": "Drizzle validates schemas at compile time through TypeScript types. It ensures your table definitions match your database structure and that queries are type-safe against your schema definitions."
  },
  {
    "id": "119",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the difference between stateful and stateless authentication?",
    "answer": "Stateful auth stores session data server-side (in memory/database), while stateless (like JWT) encodes all needed data in the token. Stateless scales better but is harder to invalidate; stateful allows immediate invalidation but needs session storage."
  },
  {
    "id": "120",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the 'fs' module in Node.js and what are its main methods?",
    "answer": "The 'fs' module provides file system operations. Main methods include: readFile/writeFile (async file I/O), readFileSync/writeFileSync (sync versions), promises API (fs.promises), createReadStream/createWriteStream (for large files), and stat (file metadata)."
  },
  {
    "id": "121",
    "category": "express",
    "difficulty": "medium",
    "question": "What is middleware chaining in Express?",
    "answer": "Middleware chaining is the process where multiple middleware functions handle a request sequentially. Each middleware can process the request and either pass it to the next middleware with next() or end the chain by sending a response."
  },
  {
    "id": "122",
    "category": "other",
    "difficulty": "hard",
    "question": "What is the CAP theorem and how does it affect database design?",
    "answer": "CAP theorem states a distributed system can only guarantee two of: Consistency (all nodes see same data), Availability (every request gets a response), Partition tolerance (system works despite network failures). Affects choice between CP (like MongoDB) or AP (like Cassandra) systems."
  },
  {
    "id": "123",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Fragments and why are they useful?",
    "answer": "Fragments (<></> or <Fragment>) let you group elements without adding extra DOM nodes. Useful when a component needs to return multiple adjacent elements but must have a single root, or when adding wrapper elements would break styling."
  },
  {
    "id": "124",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the 'next/image' component and why is it important?",
    "answer": "'next/image' is an optimized Image component that handles lazy loading, automatic resizing, format conversion, and proper sizing. It improves performance by serving correctly sized images for each device and using modern formats like WebP."
  },
  {
    "id": "125",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What is the Temporal API in JavaScript?",
    "answer": "The Temporal API is a new proposal for better date/time handling in JavaScript. It provides immutable objects for dates, times, and durations, with better timezone support, arithmetic operations, and parsing/formatting capabilities than the Date object."
  },
  {
    "id": "126",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are namespace in TypeScript and when would you use them?",
    "answer": "Namespaces are TypeScript's way to organize code and prevent naming collisions. They're useful for grouping related functionality, especially in larger codebases. Modern TypeScript often uses ES modules instead, but namespaces remain for certain patterns."
  },
  {
    "id": "127",
    "category": "tailwindcss",
    "difficulty": "hard",
    "question": "How would you implement a dark/light theme toggle with Tailwind CSS?",
    "answer": "Set dark mode to 'class' in config, toggle a 'dark' class on the HTML element, and use 'dark:' variants for dark mode styles. Combine with a state management solution (like React context) to persist the preference and handle toggling."
  },
  {
    "id": "128",
    "category": "css",
    "difficulty": "hard",
    "question": "What are CSS containment properties and how do they optimize rendering?",
    "answer": "CSS containment (like 'contain: layout paint style size') tells the browser which parts of the DOM can be treated as independent, allowing optimizations like limiting repaints to specific subtrees or skipping layout calculations for isolated components."
  },
  {
    "id": "129",
    "category": "html",
    "difficulty": "hard",
    "question": "What is the difference between 'defer' and 'async' attributes in script tags?",
    "answer": "'defer' scripts execute after HTML parsing is complete, in order. 'async' scripts download in parallel and execute as soon as available, potentially out of order. Both allow parallel downloading without blocking parsing."
  },
  {
    "id": "130",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create and use maps in Sass?",
    "answer": "Define maps with $map: (key: value, ...). Access values with map-get($map, key). Use @each to iterate: @each $key, $value in $map { ... }. Maps are useful for theme variables, breakpoints, or any key-value data."
  },
  {
    "id": "131",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to extract hashtags from a string?",
    "answer": "Pattern: /#\\w+/g will match hashtags starting with # followed by word characters. For more specific needs (like allowing underscores but not starting with numbers), adjust: /#[a-zA-Z_]\\w*/g."
  },
  {
    "id": "132",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How do you handle database schema changes in production with Prisma?",
    "answer": "Use Prisma Migrate to generate and apply migration files. For zero-downtime deployments, consider: writing backward-compatible migrations, splitting breaking changes into multiple deployments, or using shadow databases to test migrations first."
  },
  {
    "id": "133",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How would you implement soft deletes with Drizzle ORM?",
    "answer": "Add a 'deleted_at' column to your tables, then filter queries with .where(isNull(deletedAt)) or create a helper function that adds this condition automatically. For actual deletes, use a separate hard delete operation."
  },
  {
    "id": "134",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some strategies for handling database migrations in production?",
    "answer": "Strategies include: writing backward-compatible migrations, splitting large migrations into smaller ones, testing against a staging environment first, using blue-green deployments, having rollback plans, and considering zero-downtime migration patterns."
  },
  {
    "id": "135",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What is the difference between 'setImmediate' and 'process.nextTick' in Node.js?",
    "answer": "'process.nextTick' executes at the end of the current operation, before the event loop continues. 'setImmediate' runs during the check phase of the event loop. 'nextTick' has higher priority and can starve the event loop if misused."
  },
  {
    "id": "136",
    "category": "express",
    "difficulty": "hard",
    "question": "How would you implement API versioning in Express?",
    "answer": "Common approaches include: URL path (/v1/resource), query parameter (/resource?version=1), custom headers, or content negotiation. Implement with route middleware that checks the version and routes to appropriate handlers or transforms responses accordingly."
  },
  {
    "id": "137",
    "category": "other",
    "difficulty": "hard",
    "question": "What is the difference between SQL and NoSQL databases?",
    "answer": "SQL databases are relational, table-based, with predefined schemas and ACID transactions. NoSQL databases are non-relational, with flexible schemas (document, key-value, graph, etc.), and prioritize scalability and flexibility over strict consistency."
  },
  {
    "id": "138",
    "category": "react",
    "difficulty": "hard",
    "question": "What is Concurrent Mode in React?",
    "answer": "Concurrent Mode is a set of new React features that help apps stay responsive while rendering. It enables interruptible rendering, prioritized updates, and transitions between states. It's the foundation for features like Suspense and selective hydration."
  },
  {
    "id": "139",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle code splitting?",
    "answer": "Next.js automatically code splits by pages (each page is its own bundle). Dynamic imports (next/dynamic) allow component-level splitting. The framework also splits runtime, commons, and third-party libraries for optimal loading."
  },
  {
    "id": "140",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What are Web Workers and when would you use them?",
    "answer": "Web Workers run scripts in background threads, separate from the main execution thread. Use them for CPU-intensive tasks (image processing, calculations) to avoid blocking the UI. They communicate with the main thread via message passing."
  },
  {
    "id": "141",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are mapped types in TypeScript?",
    "answer": "Mapped types create new types by transforming properties of existing types. Example: type Readonly<T> = { readonly [P in keyof T]: T[P] }. They're powerful for creating variations of types without repetition."
  },
  {
    "id": "142",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How do you extend Tailwind's default configuration?",
    "answer": "In tailwind.config.js, use the 'theme.extend' property to add to Tailwind's defaults without overriding them. For complete overrides, add properties directly to 'theme'. Plugins can also be used to add new utilities or components."
  },
  {
    "id": "143",
    "category": "css",
    "difficulty": "medium",
    "question": "What are CSS pseudo-elements and how do they differ from pseudo-classes?",
    "answer": "Pseudo-elements (::before, ::first-line) style specific parts of an element or generate content. Pseudo-classes (:hover, :nth-child()) style elements based on state or position. Pseudo-elements create virtual elements, pseudo-classes select existing ones in specific states."
  },
  {
    "id": "144",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the 'loading' attribute in images?",
    "answer": "The 'loading' attribute controls lazy loading behavior: 'lazy' defers loading until near viewport, 'eager' loads immediately. It improves performance by prioritizing visible content loading, especially for long pages with many images."
  },
  {
    "id": "145",
    "category": "sass",
    "difficulty": "hard",
    "question": "How would you implement a responsive grid system with Sass?",
    "answer": "Create a mixin that generates grid classes based on breakpoints: @mixin grid($columns, $breakpoint) { @media (min-width: $breakpoint) { .grid-#{$columns} { display: grid; grid-template-columns: repeat($columns, 1fr); } } }. Call for each breakpoint/column count needed."
  },
  {
    "id": "146",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you use regex to match a hexadecimal color code?",
    "answer": "Pattern: /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/. Matches # followed by 3 or 6 hex digits. For strict CSS colors (no shorthand): /^#([A-Fa-f0-9]{3}){1,2}$/. Add word boundaries if needed: /\\b#[A-Fa-f0-9]{3,6}\\b/"
  },
  {
    "id": "147",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How do you handle database indexing with Prisma?",
    "answer": "Define indexes in your Prisma schema using the @@index attribute on models. For complex indexes or full-text search, you may need to use raw SQL in migrations. Prisma also supports defining unique constraints with @@unique."
  },
  {
    "id": "148",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How does Drizzle ORM handle full-text search?",
    "answer": "Drizzle provides SQL functions that can be used for full-text search, like to_tsvector and to_tsquery in PostgreSQL. You can write raw SQL queries with these functions or create helper functions that abstract the search implementation."
  },
  {
    "id": "149",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some common API authentication methods?",
    "answer": "Common methods include: API keys, JWT (JSON Web Tokens), OAuth/OAuth2, Session cookies, Basic Auth, and OpenID Connect. The choice depends on factors like security needs, client types, and whether you need third-party access."
  },
  {
    "id": "150",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What is the 'vm' module in Node.js and when would you use it?",
    "answer": "The 'vm' module provides APIs for compiling and running code within V8 Virtual Machine contexts. It's used for running code in isolated environments (sandboxing), though should be used carefully as it's not completely secure for running untrusted code."
  },
  {
    "id": "151",
    "category": "all",
    "difficulty": "easy",
    "question": "What are the benefits of using a CSS preprocessor like Sass?",
    "answer": "Sass provides variables, nesting, mixins, functions, and other features that make CSS more maintainable, reusable, and easier to write. It helps organize large stylesheets and reduces repetition."
  },
  {
    "id": "152",
    "category": "react",
    "difficulty": "medium",
    "question": "Explain the concept of 'lifting state up' in React.",
    "answer": "Lifting state up means moving shared state to the closest common ancestor of components that need it. This allows sibling components to share and synchronize state through their parent component."
  },
  {
    "id": "153",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle dynamic imports and why are they useful?",
    "answer": "Next.js supports dynamic imports with next/dynamic, which allows code-splitting at the component level. This reduces initial bundle size by loading components only when needed, improving performance."
  },
  {
    "id": "154",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How would you implement a responsive navbar using Tailwind CSS?",
    "answer": "Use Tailwind's responsive prefixes (md:, lg:) to show/hide elements at different breakpoints. Combine with flex/grid for layout, and transition utilities for smooth mobile menu animations."
  },
  {
    "id": "155",
    "category": "css",
    "difficulty": "hard",
    "question": "What is the difference between CSS Grid and Flexbox? When would you use each?",
    "answer": "CSS Grid is for two-dimensional layouts (rows and columns), while Flexbox is for one-dimensional layouts (either row or column). Use Grid for overall page layout and Flexbox for aligning content within components."
  },
  {
    "id": "156",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the event loop in JavaScript and how does it work?",
    "answer": "The event loop is what allows JavaScript to be non-blocking. It continuously checks the call stack and when empty, processes messages from the callback queue, enabling asynchronous behavior despite being single-threaded."
  },
  {
    "id": "157",
    "category": "html",
    "difficulty": "easy",
    "question": "What is the purpose of the alt attribute in image tags?",
    "answer": "The alt attribute provides alternative text for images when they cannot be displayed. It's important for accessibility (screen readers), SEO, and when images fail to load."
  },
  {
    "id": "158",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are TypeScript interfaces and how do they differ from type aliases?",
    "answer": "Interfaces define contracts for object shapes and can be extended or implemented. Type aliases can represent any type, including primitives and unions. Interfaces are generally preferred for object shapes as they're more extensible."
  },
  {
    "id": "159",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create and use mixins in Sass?",
    "answer": "Mixins are defined with @mixin name($params) { ... } and used with @include name(args). They allow reusable blocks of styles that can accept parameters for customization."
  },
  {
    "id": "160",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you write a regex to validate a URL?",
    "answer": "A basic URL regex: /^(https?:\\/\\/)?([\\w.-]+)\\.([a-z]{2,})([\\/\\w .-]*)*\\/?$/. This matches protocol, domain, and path components while allowing for optional parts."
  },
  {
    "id": "161",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you handle one-to-many relationships in Prisma?",
    "answer": "In Prisma, define a @relation field on the 'many' side model that references the 'one' side. The relation can be made optional or required depending on your data model needs."
  },
  {
    "id": "162",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How does Drizzle ORM handle schema migrations?",
    "answer": "Drizzle provides a migration API where schema changes are defined in TypeScript. It generates SQL migration files that can be applied to the database while tracking which migrations have been executed."
  },
  {
    "id": "163",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some common strategies for API rate limiting?",
    "answer": "Common strategies include token bucket, fixed window, and sliding window algorithms. Implementation can be done via middleware with counters stored in memory, Redis, or a database, often using IP or API keys as identifiers."
  },
  {
    "id": "164",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the purpose of the package.json file in Node.js?",
    "answer": "package.json stores project metadata, dependencies, scripts, and configuration. It's used by npm/yarn to manage packages, versions, and project setup, serving as the project manifest."
  },
  {
    "id": "165",
    "category": "express",
    "difficulty": "easy",
    "question": "How do you handle route parameters in Express?",
    "answer": "Route parameters are defined with a colon (e.g., '/users/:id') and accessed via req.params. They capture values at specific positions in the URL for dynamic routing."
  },
  {
    "id": "166",
    "category": "other",
    "difficulty": "medium",
    "question": "What is Docker and how does it benefit development?",
    "answer": "Docker is a containerization platform that packages applications with their dependencies. Benefits include consistent environments, isolation, easy scaling, simplified dependency management, and reproducible builds across machines."
  },
  {
    "id": "167",
    "category": "react",
    "difficulty": "hard",
    "question": "What is React Fiber and how does it improve rendering?",
    "answer": "React Fiber is a complete rewrite of React's reconciliation algorithm. It enables features like incremental rendering, better handling of animations, and the ability to split rendering work into chunks across multiple frames."
  },
  {
    "id": "168",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are API Routes in Next.js and how do they work?",
    "answer": "API Routes allow creating API endpoints as Node.js serverless functions within Next.js. Files in the 'pages/api' directory become API endpoints that can handle HTTP requests and return responses."
  },
  {
    "id": "169",
    "category": "tailwindcss",
    "difficulty": "hard",
    "question": "How would you implement dark mode with Tailwind CSS?",
    "answer": "Configure dark mode in tailwind.config.js to use a class strategy. Toggle a 'dark' class on the HTML element, then use dark: prefixes for dark mode styles (e.g., dark:bg-gray-800)."
  },
  {
    "id": "170",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the CSS Box Model and how does it work?",
    "answer": "The CSS Box Model describes how elements are laid out, consisting of content, padding, border, and margin. The box-sizing property controls whether width/height include padding and border (border-box) or just content (content-box)."
  },
  {
    "id": "171",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What are JavaScript Generators and how do they work?",
    "answer": "Generators are functions that can be paused and resumed (function*). They yield values via yield and can be iterated manually with .next() or in loops. Useful for lazy evaluation and custom iterables."
  },
  {
    "id": "172",
    "category": "html",
    "difficulty": "medium",
    "question": "What are semantic HTML elements and why are they important?",
    "answer": "Semantic elements (<header>, <article>, <nav>) clearly describe their meaning to browsers and developers. They improve accessibility, SEO, and make code more readable by replacing generic <div> elements where appropriate."
  },
  {
    "id": "173",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are conditional types in TypeScript?",
    "answer": "Conditional types select between two types based on a condition: T extends U ? X : Y. They're powerful when combined with generics, allowing type transformations based on input types."
  },
  {
    "id": "174",
    "category": "sass",
    "difficulty": "easy",
    "question": "How do you create variables in Sass?",
    "answer": "Variables in Sass are declared with $ followed by the name: $primary-color: #333;. They're used by referencing the variable: color: $primary-color;. Variables can store colors, numbers, strings, lists, maps, and more."
  },
  {
    "id": "175",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to validate an email address?",
    "answer": "A basic email regex: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/. Note that complete email validation is complex and often better handled with simple confirmation emails or specialized libraries."
  },
  {
    "id": "176",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How does Prisma handle database transactions?",
    "answer": "Prisma provides $transaction for interactive transactions where operations can depend on previous results. For batch transactions of independent operations, use transaction([]). Both ensure atomicity - all operations succeed or none do."
  },
  {
    "id": "177",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How does Drizzle ORM handle raw SQL queries?",
    "answer": "Drizzle provides a sql template tag for writing raw SQL queries with type safety. Values can be interpolated safely, and return types can be inferred. This allows leveraging database-specific features while maintaining type safety."
  },
  {
    "id": "178",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is JWT authentication and how does it work?",
    "answer": "JWT (JSON Web Tokens) are compact, URL-safe tokens that represent claims between parties. They consist of a header, payload, and signature. JWTs are stateless - the server validates the signature without storing session data."
  },
  {
    "id": "179",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What are worker threads in Node.js and when would you use them?",
    "answer": "Worker threads allow running JavaScript in parallel. They're useful for CPU-intensive tasks that would block the event loop, though I/O operations are still better handled asynchronously via the main thread."
  },
  {
    "id": "180",
    "category": "express",
    "difficulty": "medium",
    "question": "What is middleware in Express.js?",
    "answer": "Middleware are functions that have access to the request, response, and next function in the request-response cycle. They can execute code, modify objects, or end the cycle. Middleware runs in the order it's defined."
  },
  {
    "id": "181",
    "category": "other",
    "difficulty": "hard",
    "question": "What are microservices and when would you choose them over a monolith?",
    "answer": "Microservices are small, independent services that work together. Choose them for large teams, independent scaling needs, different tech stacks per component, or organizational alignment. Monoliths are simpler for small projects."
  },
  {
    "id": "182",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Portals and when would you use them?",
    "answer": "Portals provide a way to render children into a DOM node outside the parent component's hierarchy. Useful for modals, tooltips, or any UI that needs to break out of its container (e.g., for CSS z-index or positioning)."
  },
  {
    "id": "183",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "What is Incremental Static Regeneration (ISR) in Next.js?",
    "answer": "ISR allows updating static pages after build time without rebuilding the entire site. You specify a revalidation time, and Next.js will regenerate the page in the background when requested after that time."
  },
  {
    "id": "184",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How do you customize Tailwind's default configuration?",
    "answer": "In tailwind.config.js, use the theme.extend property to add to defaults without overriding them. For complete overrides, add properties directly to theme. Plugins can also add new utilities or components."
  },
  {
    "id": "185",
    "category": "css",
    "difficulty": "hard",
    "question": "What is CSS containment and how does it optimize performance?",
    "answer": "CSS containment (contain property) tells the browser that an element's subtree is independent of the rest of the page. This allows optimizations like limiting paint/layout to specific subtrees, improving rendering performance."
  },
  {
    "id": "186",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between '==' and '===' in JavaScript?",
    "answer": "'==' performs type coercion before comparison, while '===' (strict equality) checks both value and type without coercion. '===' is generally preferred as it's more predictable and avoids unexpected type conversions."
  },
  {
    "id": "187",
    "category": "html",
    "difficulty": "hard",
    "question": "What are Web Components and how do they work?",
    "answer": "Web Components are a set of web platform APIs that allow creating reusable custom elements with encapsulated functionality. They consist of Custom Elements, Shadow DOM, and HTML Templates."
  },
  {
    "id": "188",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are type guards in TypeScript?",
    "answer": "Type guards are expressions that perform runtime checks to narrow down the type of a variable within a block. They include typeof, instanceof checks, or custom functions with 'is' type predicates."
  },
  {
    "id": "189",
    "category": "sass",
    "difficulty": "hard",
    "question": "How would you implement a theming system with Sass?",
    "answer": "Create a map of themes with color variables, then use mixins or functions to apply themes. Example: @mixin theme($theme) { --primary: map-get($theme, primary); } and apply with @include theme($light-theme);"
  },
  {
    "id": "190",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to find all numbers in a string?",
    "answer": "In JavaScript: const numbers = str.match(/\\d+/g); This returns an array of all sequences of digits. For decimal numbers: /\\d+\\.?\\d*/g. Adjust based on specific number format requirements."
  },
  {
    "id": "191",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you handle many-to-many relationships in Prisma?",
    "answer": "Prisma supports implicit many-to-many relations where you define @relation fields on both models. For explicit relations (with additional fields), create a join model with two @relation fields pointing to each side."
  },
  {
    "id": "192",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How would you implement pagination with Drizzle ORM?",
    "answer": "Use the .limit() and .offset() methods on queries. Example: db.select().from(users).limit(10).offset(20). For cursor-based pagination, use .where() with conditions based on the cursor value."
  },
  {
    "id": "193",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some strategies for optimizing database performance?",
    "answer": "Strategies include: adding proper indexes, optimizing query structure, implementing caching, using connection pooling, denormalizing where appropriate, partitioning large tables, and analyzing query execution plans."
  },
  {
    "id": "194",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the 'cluster' module in Node.js and why would you use it?",
    "answer": "The cluster module allows creating child processes (workers) that share server ports, enabling better utilization of multi-core systems. It helps improve performance by running multiple Node.js instances to handle the load."
  },
  {
    "id": "195",
    "category": "express",
    "difficulty": "hard",
    "question": "How would you implement file uploads in Express?",
    "answer": "Use middleware like 'multer' to handle multipart/form-data. Configure storage (disk/memory), file filters, size limits, and processing. For large files, consider streaming processing to avoid memory issues."
  },
  {
    "id": "196",
    "category": "other",
    "difficulty": "medium",
    "question": "What is CI/CD and why is it important?",
    "answer": "CI (Continuous Integration) means regularly merging code changes into a shared repo with automated testing. CD (Continuous Delivery/Deployment) automates release processes. Together they enable faster, more reliable software releases."
  },
  {
    "id": "197",
    "category": "react",
    "difficulty": "hard",
    "question": "What is React Suspense and how does it work?",
    "answer": "Suspense lets components 'wait' for something before rendering. It's primarily used for code-splitting (with React.lazy) and data fetching. Components can suspend while loading, showing fallback UI until ready."
  },
  {
    "id": "198",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Next.js handle image optimization?",
    "answer": "Next.js provides an Image component that automatically optimizes images (resizing, format conversion, lazy loading) and serves them via a built-in image optimization API. It works with both local and remote images."
  },
  {
    "id": "199",
    "category": "tailwindcss",
    "difficulty": "easy",
    "question": "What is Tailwind CSS and how does it differ from traditional CSS frameworks?",
    "answer": "Tailwind CSS is a utility-first CSS framework that provides low-level utility classes to build custom designs directly in markup, rather than offering pre-designed components like Bootstrap."
  },
  {
    "id": "200",
    "category": "css",
    "difficulty": "medium",
    "question": "What is BEM methodology in CSS?",
    "answer": "BEM (Block, Element, Modifier) is a naming convention: .block__element--modifier. Blocks are standalone components, elements are parts of blocks, and modifiers alter appearance/behavior. It aims to make CSS more maintainable."
  },
  {
    "id": "201",
    "category": "javascript",
    "difficulty": "hard",
    "question": "Explain the prototype chain in JavaScript.",
    "answer": "JavaScript uses prototypal inheritance where objects can inherit properties from other objects. Each object has a prototype (accessed via __proto__), and when a property isn't found, JavaScript looks up the prototype chain until it finds it or reaches null."
  },
  {
    "id": "202",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the 'defer' and 'async' attributes in script tags?",
    "answer": "'defer' scripts execute after HTML parsing is complete, in order. 'async' scripts download in parallel and execute as soon as available, potentially out of order. Both allow parallel downloading without blocking parsing."
  },
  {
    "id": "203",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are template literal types in TypeScript?",
    "answer": "Template literal types allow creating new string types by combining existing ones, similar to template literals in JavaScript. Example: type EventName<T extends string> = `${T}Changed` lets you create 'nameChanged', 'ageChanged', etc."
  },
  {
    "id": "204",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create loops in Sass and what are they useful for?",
    "answer": "Sass has @for, @each, and @while loops. Useful for generating utility classes, grid systems, or any repetitive CSS patterns. Example: @for $i from 1 through 12 { .col-#{$i} { width: $i * 8.33%; } }"
  },
  {
    "id": "205",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you use regex to parse and extract data from a URL?",
    "answer": "Example to extract parts: /^(https?:\\/\\/)?([^\\/?#]+)([^?#]*)(\\?[^#]*)?(#.*)?/. This captures protocol, domain, path, query, and hash segments. More specific patterns can be created for particular URL structures."
  },
  {
    "id": "206",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How does Prisma handle database schema validation?",
    "answer": "Prisma validates the schema against the database during introspection (when pulling the schema from an existing DB) and when generating the client. It checks for type consistency, relation integrity, and other constraints."
  },
  {
    "id": "207",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How would you implement soft deletes with Drizzle ORM?",
    "answer": "Add a 'deleted_at' column to your tables, then filter queries with .where(isNull(deletedAt)) or create a helper function that adds this condition automatically. For actual deletes, use a separate hard delete operation."
  },
  {
    "id": "208",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is CORS and how do you handle it in a backend service?",
    "answer": "CORS (Cross-Origin Resource Sharing) is a security mechanism that restricts cross-origin requests. Handle it by setting proper headers (Access-Control-Allow-Origin, etc.), implementing preflight request handling, and configuring allowed methods/headers."
  },
  {
    "id": "209",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What is the 'stream' module in Node.js and when would you use it?",
    "answer": "Streams are collections of data that might not be available all at once. They're useful for processing large files, handling real-time data, or any I/O operations where memory efficiency is important."
  },
  {
    "id": "210",
    "category": "express",
    "difficulty": "medium",
    "question": "How would you structure a large Express application?",
    "answer": "Organize by features/routes (not by file type), separate concerns (routes, controllers, services), use middleware for cross-cutting concerns, implement proper error handling, and consider using a DI container for complex apps."
  },
  {
    "id": "211",
    "category": "other",
    "difficulty": "hard",
    "question": "What is the CAP theorem and how does it affect database design?",
    "answer": "CAP theorem states a distributed system can only guarantee two of: Consistency (all nodes see same data), Availability (every request gets a response), Partition tolerance (system works despite network failures). Affects choice between CP (like MongoDB) or AP (like Cassandra) systems."
  },
  {
    "id": "212",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Fragments and why are they useful?",
    "answer": "Fragments (<></> or <Fragment>) let you group elements without adding extra DOM nodes. Useful when a component needs to return multiple adjacent elements but must have a single root, or when adding wrapper elements would break styling."
  },
  {
    "id": "213",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle client-side navigation?",
    "answer": "Next.js uses client-side navigation via its Link component, which prefetches linked pages in the background. This provides SPA-like navigation without full page reloads, while maintaining SEO benefits and proper URL handling."
  },
  {
    "id": "214",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How do you handle responsive design in Tailwind CSS?",
    "answer": "Tailwind uses mobile-first breakpoints (sm, md, lg, xl, 2xl) as prefixes to utility classes. Example: 'md:text-lg' applies the large text size from the 'md' breakpoint up. Customize breakpoints in the config file."
  },
  {
    "id": "215",
    "category": "css",
    "difficulty": "hard",
    "question": "What is CSS-in-JS and what are its advantages?",
    "answer": "CSS-in-JS is a pattern where CSS is written in JavaScript instead of separate files. Advantages include scoped styles, dynamic styling based on props/state, automatic vendor prefixing, and elimination of unused CSS."
  },
  {
    "id": "216",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are JavaScript Promises and how do they work?",
    "answer": "Promises represent eventual completion of async operations. They can be in pending, fulfilled, or rejected states. You chain .then() for success cases and .catch() for errors, avoiding callback hell. Async/await provides syntactic sugar over promises."
  },
  {
    "id": "217",
    "category": "html",
    "difficulty": "easy",
    "question": "What is the purpose of the 'loading' attribute in images?",
    "answer": "The 'loading' attribute controls lazy loading behavior: 'lazy' defers loading until near viewport, 'eager' loads immediately. It improves performance by prioritizing visible content loading, especially for long pages with many images."
  },
  {
    "id": "218",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are utility types in TypeScript and how are they useful?",
    "answer": "Utility types (like Partial, Pick, Omit, Record) transform existing types in useful ways. They help create new types from existing ones without repetition, making type definitions more maintainable."
  },
  {
    "id": "219",
    "category": "sass",
    "difficulty": "hard",
    "question": "How would you implement a responsive grid system with Sass?",
    "answer": "Create a mixin that generates grid classes based on breakpoints: @mixin grid($columns, $breakpoint) { @media (min-width: $breakpoint) { .grid-#{$columns} { display: grid; grid-template-columns: repeat($columns, 1fr); } } }. Call for each breakpoint/column count needed."
  },
  {
    "id": "220",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to validate a password with specific requirements?",
    "answer": "Example for 8+ chars with uppercase, lowercase, number: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\\d]{8,}$/. This uses positive lookaheads to ensure each requirement is met before matching the password string."
  },
  {
    "id": "221",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you handle database seeding with Prisma?",
    "answer": "Create a seed script that uses the Prisma client to insert initial data. You can run it with 'prisma db seed' or a custom script. For larger datasets, consider using raw SQL for better performance."
  },
  {
    "id": "222",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How does Drizzle ORM handle complex joins?",
    "answer": "Drizzle provides a query builder with methods like .innerJoin(), .leftJoin(), etc. You can chain these to build complex joins while maintaining type safety, and use the .fields() method to select specific columns."
  },
  {
    "id": "223",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some common API authentication methods?",
    "answer": "Common methods include: API keys, JWT (JSON Web Tokens), OAuth/OAuth2, Session cookies, Basic Auth, and OpenID Connect. The choice depends on factors like security needs, client types, and whether you need third-party access."
  },
  {
    "id": "224",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the 'require' cache in Node.js and how does it work?",
    "answer": "Node caches modules after first require to improve performance. Subsequent requires return the cached version. The cache is stored in require.cache and can be deleted if you need to reload a module."
  },
  {
    "id": "225",
    "category": "express",
    "difficulty": "hard",
    "question": "How would you implement real-time features in Express?",
    "answer": "Use WebSockets with libraries like Socket.IO or ws. For HTTP-based approaches, consider Server-Sent Events (SSE) or long polling. Integrate with a pub/sub system like Redis for scaling across multiple servers."
  },
  {
    "id": "226",
    "category": "other",
    "difficulty": "medium",
    "question": "What are WebSockets and when would you use them?",
    "answer": "WebSockets provide full-duplex communication over a single TCP connection. Use them for real-time features like chat, live updates, multiplayer games, or any app needing low-latency server-client communication."
  },
  {
    "id": "227",
    "category": "react",
    "difficulty": "hard",
    "question": "What is React Server Components?",
    "answer": "React Server Components are components that render on the server and can access server-side resources directly. They're sent to the client as a lightweight serialized format, reducing bundle size and enabling zero-bundle-size components."
  },
  {
    "id": "228",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Dynamic Routes in Next.js and how do they work?",
    "answer": "Dynamic Routes allow creating pages with variable paths (like [id].js). The parameter is available in the router query object and during getStaticProps/getServerSideProps for data fetching based on the route."
  },
  {
    "id": "229",
    "category": "tailwindcss",
    "difficulty": "hard",
    "question": "How would you implement a design system with Tailwind CSS?",
    "answer": "Define a comprehensive theme in tailwind.config.js with colors, typography, spacing, etc. Create reusable component templates. Use plugins for custom utilities. Document with Storybook or similar, and enforce consistency with linting rules."
  },
  {
    "id": "230",
    "category": "css",
    "difficulty": "medium",
    "question": "What are CSS pseudo-elements and how do they differ from pseudo-classes?",
    "answer": "Pseudo-elements (::before, ::first-line) style specific parts of an element or generate content. Pseudo-classes (:hover, :nth-child()) style elements based on state or position. Pseudo-elements create virtual elements, pseudo-classes select existing ones in specific states."
  },
  {
    "id": "231",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What is the Temporal API in JavaScript?",
    "answer": "The Temporal API is a new proposal for better date/time handling in JavaScript. It provides immutable objects for dates, times, and durations, with better timezone support, arithmetic operations, and parsing/formatting capabilities than the Date object."
  },
  {
    "id": "232",
    "category": "html",
    "difficulty": "medium",
    "question": "What are ARIA attributes and why are they important?",
    "answer": "ARIA (Accessible Rich Internet Applications) attributes provide semantic information to assistive technologies. They're crucial for accessibility when native HTML semantics aren't sufficient, helping screen readers understand dynamic content and UI controls."
  },
  {
    "id": "233",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are declaration files (.d.ts) in TypeScript?",
    "answer": "Declaration files provide type information for existing JavaScript code. They contain type declarations but no implementations, allowing TypeScript to understand the shape of JavaScript libraries without changing the original code."
  },
  {
    "id": "234",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create and use maps in Sass?",
    "answer": "Define maps with $map: (key: value, ...). Access values with map-get($map, key). Use @each to iterate: @each $key, $value in $map { ... }. Maps are useful for theme variables, breakpoints, or any key-value data."
  },
  {
    "id": "235",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you use regex to match a hexadecimal color code?",
    "answer": "Pattern: /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/. Matches # followed by 3 or 6 hex digits. For strict CSS colors (no shorthand): /^#([A-Fa-f0-9]{3}){1,2}$/. Add word boundaries if needed: /\\b#[A-Fa-f0-9]{3,6}\\b/"
  },
  {
    "id": "236",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How do you handle database indexing with Prisma?",
    "answer": "Define indexes in your Prisma schema using the @@index attribute on models. For complex indexes or full-text search, you may need to use raw SQL in migrations. Prisma also supports defining unique constraints with @@unique."
  },
  {
    "id": "237",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How does Drizzle ORM handle full-text search?",
    "answer": "Drizzle provides SQL functions that can be used for full-text search, like to_tsvector and to_tsquery in PostgreSQL. You can write raw SQL queries with these functions or create helper functions that abstract the search implementation."
  },
  {
    "id": "238",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "What is the purpose of the '_app.js' file in Next.js?",
    "answer": "The '_app.js' file is used to initialize pages and override it to control page initialization. It allows you to persist layout between page changes, keep state when navigating pages, and inject additional data into pages."
  },
  {
    "id": "239",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Next.js handle automatic code splitting?",
    "answer": "Next.js automatically code splits by pages - each page in the 'pages' directory becomes a separate bundle. It also supports dynamic imports for component-level code splitting using 'next/dynamic'."
  },
  {
    "id": "240",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how Next.js implements hybrid static & server rendering",
    "answer": "Next.js allows pages to choose their rendering method: Static Generation (SSG) at build time, Server-side Rendering (SSR) per request, or client-side rendering. This hybrid approach lets developers optimize each page based on its needs."
  },
  {
    "id": "241",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next/head' component?",
    "answer": "The 'next/head' component allows you to append elements to the head of the HTML document. It's commonly used to set page titles, meta tags, links, and other head elements that need to change between pages."
  },
  {
    "id": "242",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you create a dynamic route in Next.js?",
    "answer": "Create a file with square brackets like '[id].js' in the pages directory. The parameter will be available in the router query object and in getStaticProps/getServerSideProps context."
  },
  {
    "id": "243",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is 'getStaticPaths' and when would you use it?",
    "answer": "'getStaticPaths' is used with 'getStaticProps' for dynamic routes to specify which paths should be pre-rendered at build time. It returns an object with 'paths' (which paths to render) and 'fallback' (how to handle paths not generated at build time)."
  },
  {
    "id": "244",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle CSS and Sass support?",
    "answer": "Next.js has built-in support for CSS modules (file.module.css) and Sass (.scss/.sass). You can also use global styles by importing CSS files in '_app.js'. For Sass support, you need to install 'sass' package."
  },
  {
    "id": "245",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next.config.js' file?",
    "answer": "The 'next.config.js' file is used to customize advanced Next.js behavior. You can configure redirects, rewrites, environment variables, webpack modifications, internationalization, and other framework settings."
  },
  {
    "id": "246",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you add environment variables in Next.js?",
    "answer": "Create a '.env.local' file in your project root and prefix variables with 'NEXT_PUBLIC_' to expose them to the browser. For server-only variables, omit the prefix and access them in API routes or getServerSideProps."
  },
  {
    "id": "247",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how Next.js handles automatic static optimization",
    "answer": "Next.js automatically determines if a page can be prerendered to static HTML by checking if it has blocking data requirements (getServerSideProps/getInitialProps). Pages without these are automatically optimized as static HTML."
  },
  {
    "id": "248",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between 'getServerSideProps' and 'getStaticProps'?",
    "answer": "'getServerSideProps' runs on every request and provides fresh data (SSR), while 'getStaticProps' runs at build time to generate static pages (SSG). Use the former for frequently updated data, the latter for better performance."
  },
  {
    "id": "249",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement internationalization (i18n) in Next.js?",
    "answer": "Next.js has built-in i18n routing support configured in 'next.config.js'. Define locales, default locale, and routing strategy (sub-path, domain, or hybrid). Use 'next/router' to handle locale switching and localized routing."
  },
  {
    "id": "250",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle API routes middleware?",
    "answer": "API routes can use external middleware like 'micro' or 'connect'. For built-in solutions, you can create higher-order functions that wrap handlers to implement middleware logic like authentication, logging, or CORS."
  },
  {
    "id": "251",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of '_document.js' file?",
    "answer": "'_document.js' allows you to customize the entire HTML document structure. It's rendered only on the server and used to change the initial server-side rendered document markup, like adding lang attribute or third-party scripts."
  },
  {
    "id": "252",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you handle 404 pages in Next.js?",
    "answer": "Create a '404.js' file in the pages directory. Next.js will automatically use this as the 404 page. For custom 404s in getStaticPaths, return 'notFound: true' from getStaticProps."
  },
  {
    "id": "253",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement authentication in Next.js",
    "answer": "Common approaches include: using NextAuth.js for built-in auth, JWT tokens with API routes, session cookies with getServerSideProps, or third-party providers. Consider SSR for protected routes to prevent flash of unprotected content."
  },
  {
    "id": "254",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using Next.js Image component?",
    "answer": "The Image component provides automatic image optimization (resizing, format conversion), lazy loading, and responsive images. It improves performance by serving correctly sized images for each device and using modern formats like WebP."
  },
  {
    "id": "255",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you create a custom error page in Next.js?",
    "answer": "Create '_error.js' in the pages directory to override the default error page. It receives statusCode and err props. You can also create specific error pages like '500.js' for server errors."
  },
  {
    "id": "256",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement A/B testing in Next.js?",
    "answer": "Approaches include: using middleware to assign variants, feature flags in getServerSideProps, client-side variant selection with cookies, or edge functions for instant rollouts. Consider SSR for consistent variant assignment."
  },
  {
    "id": "257",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next/script' component?",
    "answer": "The 'next/script' component optimizes loading of third-party scripts. It provides strategies like 'beforeInteractive' (before page is interactive), 'afterInteractive' (default, after hydration), and 'lazyOnload' (during idle time)."
  },
  {
    "id": "258",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you add analytics to a Next.js application?",
    "answer": "Common approaches: use 'next/script' to load analytics scripts, implement tracking in '_app.js', use API routes to proxy analytics requests, or leverage Next.js middleware for edge analytics."
  },
  {
    "id": "259",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement GraphQL in Next.js",
    "answer": "Options include: Apollo Client with SSR support, URQL, or direct GraphQL requests in getServerSideProps/getStaticProps. For API routes, you can implement a GraphQL server using libraries like graphql-js or Apollo Server."
  },
  {
    "id": "260",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the limitations of API routes in Next.js?",
    "answer": "API routes have a 10MB payload limit, timeout after 10s on Vercel, can't use getStaticProps/getServerSideProps, and are designed for serverless functions. For complex backends, consider a separate server or middleware."
  },
  {
    "id": "261",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement redirects in Next.js?",
    "answer": "Configure redirects in 'next.config.js' for simple cases. For dynamic redirects, use 'res.redirect()' in API routes or getServerSideProps. Client-side redirects can use 'router.push()'."
  },
  {
    "id": "262",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you optimize a large Next.js application?",
    "answer": "Strategies include: code splitting with dynamic imports, optimizing images, using ISR, implementing caching headers, reducing bundle size with tree-shaking, enabling compression, and using CDN for static assets."
  },
  {
    "id": "263",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next/link' component?",
    "answer": "'next/link' enables client-side navigation between pages, prefetching linked pages in the background. It wraps anchor tags and provides SPA-like navigation without full page reloads while maintaining SEO benefits."
  },
  {
    "id": "264",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you handle forms in Next.js?",
    "answer": "Options include: standard HTML forms with API route handlers, client-side libraries like React Hook Form, or server-side handling with getServerSideProps. Consider CSR for complex forms, SSR for progressive enhancement."
  },
  {
    "id": "265",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement real-time features in Next.js",
    "answer": "Use WebSocket connections (via API routes), Server-Sent Events, or third-party services like Firebase, Pusher, or Ably. For frequent updates, consider SWR or React Query with fast refresh rates."
  },
  {
    "id": "266",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the security best practices for Next.js applications?",
    "answer": "Key practices: sanitize user input, use CSP headers, implement proper authentication, validate API responses, secure environment variables, use HTTPS, limit API route exposure, and keep dependencies updated."
  },
  {
    "id": "267",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement cookies in Next.js?",
    "answer": "Use the 'cookies' package or 'cookie' library in API routes or getServerSideProps. For client-side, use js-cookie or document.cookie. Consider httpOnly flags for secure cookies."
  },
  {
    "id": "268",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a multi-tenant SaaS application in Next.js?",
    "answer": "Approaches include: dynamic routing for tenants, database-level isolation, middleware for tenant resolution, feature flags, and tenant-specific configurations. Consider ISR for public tenant pages and SSR for private content."
  },
  {
    "id": "269",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next/dynamic'?",
    "answer": "'next/dynamic' enables component-level code splitting by dynamically importing components. It helps reduce initial bundle size by loading components only when needed. Supports loading states via the 'loading' property."
  },
  {
    "id": "270",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement pagination in Next.js?",
    "answer": "Options include: query parameters for page numbers, infinite scroll with SWR, or cursor-based pagination. For SSG, use getStaticPaths with paginated paths. For SSR, handle in getServerSideProps."
  },
  {
    "id": "271",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a headless CMS with Next.js",
    "answer": "Fetch content via the CMS API in getStaticProps/getServerSideProps. Use ISR for content updates. For preview mode, implement API routes to handle draft content. Consider using webhooks for rebuild triggers."
  },
  {
    "id": "272",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using Next.js middleware?",
    "answer": "Middleware runs before cached content, enabling: A/B testing, authentication, bot detection, geolocation-based redirects, logging, and feature flags at the edge. It executes close to users for low latency."
  },
  {
    "id": "273",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a sitemap in Next.js?",
    "answer": "Options: generate dynamically via API route, create static 'sitemap.xml' in public folder, or use 'next-sitemap' package. For dynamic routes, include all paths from getStaticPaths or database queries."
  },
  {
    "id": "274",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a custom server with Next.js?",
    "answer": "Create a 'server.js' file using Express, Fastify, etc., and customize the request handling. However, this loses automatic static optimization and is discouraged unless necessary for specific server-side requirements."
  },
  {
    "id": "275",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next/router'?",
    "answer": "'next/router' provides programmatic navigation and route information. It allows accessing query parameters, listening to route changes, and navigating between pages programmatically with methods like push, replace, and prefetch."
  },
  {
    "id": "276",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a loading indicator between page transitions?",
    "answer": "Use 'next/router' events ('routeChangeStart', 'routeChangeComplete') to track navigation state. Display a loading component in '_app.js' based on this state. Libraries like 'nprogress' provide stylish progress bars."
  },
  {
    "id": "277",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement WebSockets in Next.js",
    "answer": "Create a WebSocket server in an API route or separate server. On client-side, connect to the WebSocket in useEffect. For production, consider services like Pusher or Socket.IO with Redis for scaling across multiple servers."
  },
  {
    "id": "278",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the deployment options for Next.js applications?",
    "answer": "Options include: Vercel (optimized for Next.js), Node.js servers, Docker containers, static exports, serverless platforms (AWS Lambda, Netlify), and edge networks. Choose based on your rendering strategy and scalability needs."
  },
  {
    "id": "279",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a custom 500 error page?",
    "answer": "Create a '500.js' file in the pages directory. It will be used for server-side errors. You can customize the design and add helpful information like contact details or a way to report the error."
  },
  {
    "id": "280",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a multi-language blog in Next.js?",
    "answer": "Use Next.js i18n routing for language detection and URL structure. Store content in markdown files or CMS with language fields. Use 'next-mdx-remote' for MDX content. Implement language switcher with 'next/router'."
  },
  {
    "id": "281",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next/amp'?",
    "answer": "'next/amp' helps create AMP (Accelerated Mobile Pages) versions of your pages. It provides components and configuration to ensure AMP compatibility. You can create hybrid pages that work in both regular and AMP modes."
  },
  {
    "id": "282",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a contact form in Next.js?",
    "answer": "Create a form component with client-side validation. Handle submission via an API route that processes the data (sends email, saves to database). Consider using libraries like React Hook Form for form management."
  },
  {
    "id": "283",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a shopping cart in Next.js",
    "answer": "Options include: client-side state (context/Redux), cookies for persistence, API routes for server-side cart management. For SSR, use getServerSideProps to fetch cart data. Consider optimistic UI updates for better UX."
  },
  {
    "id": "284",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using SWR with Next.js?",
    "answer": "SWR provides client-side data fetching with caching, revalidation, focus tracking, and error handling. It complements Next.js SSR/SSG by handling client-side updates, reducing boilerplate for data fetching."
  },
  {
    "id": "285",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a dark mode toggle in Next.js?",
    "answer": "Use a context/provider to manage theme state. Store preference in localStorage. Apply dark classes to HTML element. For SSR, detect preference in getServerSideProps or use a CSS-only approach with prefers-color-scheme."
  },
  {
    "id": "286",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a real-time dashboard in Next.js?",
    "answer": "Use WebSockets or Server-Sent Events for real-time updates. Implement client-side state management (SWR/React Query) with fast refresh rates. Consider ISR for initial data with client-side updates for fresh data."
  },
  {
    "id": "287",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-compose-plugins'?",
    "answer": "'next-compose-plugins' simplifies using multiple Next.js plugins together. It provides a clean way to compose plugin configurations without nested syntax, making the 'next.config.js' file more readable and maintainable."
  },
  {
    "id": "288",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a blog with Next.js?",
    "answer": "Options include: Markdown/MDX files in your project, headless CMS, or database content. Use getStaticPaths/getStaticProps for SSG. Implement dynamic routes for blog posts. Consider 'next-mdx-remote' for MDX content."
  },
  {
    "id": "289",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a search feature in Next.js",
    "answer": "Options: client-side filtering for small datasets, API route with database query, or third-party search service (Algolia, Elasticsearch). For SSR, handle in getServerSideProps. Consider debouncing input for performance."
  },
  {
    "id": "290",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the limitations of static export in Next.js?",
    "answer": "Static export doesn't support: API routes, getServerSideProps, rewrites/redirects, i18n routing, or fallback: true in getStaticPaths. It's best for fully static sites without server-side functionality."
  },
  {
    "id": "291",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a dropdown menu in Next.js?",
    "answer": "Create a component with state for open/closed. Use CSS for styling and transitions. Handle outside clicks to close. For accessibility, manage focus and ARIA attributes. Consider libraries like HeadlessUI for complex cases."
  },
  {
    "id": "292",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a payment system in Next.js?",
    "answer": "Integrate with Stripe, PayPal, etc. using their SDKs. Handle sensitive operations in API routes. Use webhooks for payment confirmation. Implement SSR for checkout pages to prevent client-side manipulation of prices."
  },
  {
    "id": "293",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-connect'?",
    "answer": "'next-connect' is a router/middleware for Next.js API routes, inspired by Express.js. It provides a familiar middleware pattern, route handlers, and error handling, making API route organization more structured and maintainable."
  },
  {
    "id": "294",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a modal in Next.js?",
    "answer": "Create a portal component that renders outside the main DOM hierarchy. Manage open/close state with context or props. Ensure proper focus management and ARIA attributes for accessibility. Consider libraries like React Modal."
  },
  {
    "id": "295",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a real-time chat in Next.js",
    "answer": "Use WebSockets via API routes or services like Pusher/Socket.IO. Implement message persistence in a database. For UI, consider optimistic updates. Handle online status with heartbeat checks. Implement proper auth for private chats."
  },
  {
    "id": "296",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using 'next-seo'?",
    "answer": "'next-seo' simplifies managing SEO metadata in Next.js. It provides components for common SEO tags, JSON-LD structured data, and default configurations. Helps ensure consistent and optimized SEO across your application."
  },
  {
    "id": "297",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a carousel in Next.js?",
    "answer": "Options include: building a custom component with React state, using libraries like 'embla-carousel', or CSS-only solutions. Ensure responsive design and accessibility with proper ARIA attributes and keyboard navigation."
  },
  {
    "id": "298",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a video streaming platform in Next.js?",
    "answer": "Use API routes for video metadata. Implement adaptive streaming (HLS/DASH) with services like Mux or AWS Media Services. For UI, consider custom controls with 'react-player'. Implement caching for thumbnails and metadata."
  },
  {
    "id": "299",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-pwa'?",
    "answer": "'next-pwa' simplifies adding PWA (Progressive Web App) capabilities to Next.js. It handles service worker generation, offline support, and manifest configuration. Helps make your Next.js app installable and work offline."
  },
  {
    "id": "300",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a toast notification system in Next.js?",
    "answer": "Create a context/provider to manage notifications. Render toasts in a portal at app root. Implement different types (success, error) with auto-dismissal. Consider libraries like 'react-hot-toast' for pre-built solutions."
  },
  {
    "id": "301",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a real-time collaborative editor in Next.js",
    "answer": "Use WebSockets or services like Firebase, Ably for real-time sync. Implement operational transformation or CRDTs for conflict resolution. Use contenteditable or libraries like Slate.js for the editor. Handle presence with heartbeat checks."
  },
  {
    "id": "302",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using 'next-i18next'?",
    "answer": "'next-i18next' provides advanced i18n features for Next.js including: namespaced translations, pluralization, context, formatting, and efficient loading of translation files. It builds on Next.js i18n routing with more localization features."
  },
  {
    "id": "303",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a tooltip in Next.js?",
    "answer": "Create a component that shows on hover/focus. Position with CSS or libraries like Popper.js. Ensure accessibility with ARIA attributes. Consider delay for hover intent. For complex cases, use libraries like Tippy.js."
  },
  {
    "id": "304",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a real-time multiplayer game in Next.js?",
    "answer": "Use WebSockets for game state sync. Implement client-side prediction and server reconciliation. Handle matchmaking via API routes. Use requestAnimationFrame for smooth animations. Consider game engines like Phaser for complex games."
  },
  {
    "id": "305",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-sitemap'?",
    "answer": "'next-sitemap' automates sitemap generation for Next.js apps. It handles dynamic routes from getStaticPaths, creates sitemap index files for large sites, and can automatically update sitemaps when content changes."
  },
  {
    "id": "306",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a loading skeleton in Next.js?",
    "answer": "Create placeholder components that mimic content structure. Show while data is loading (use SWR's isLoading or custom state). Animate with CSS for better perceived performance. Consider libraries like 'react-loading-skeleton'."
  },
  {
    "id": "307",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a voice search feature in Next.js",
    "answer": "Use the Web Speech API for voice recognition. Handle permissions and fallbacks for unsupported browsers. Process voice input in API routes for complex queries. Provide visual feedback during speech input."
  },
  {
    "id": "308",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using 'next-auth'?",
    "answer": "'next-auth' provides complete authentication for Next.js with: built-in providers (OAuth, email), JWT & session management, CSRF protection, and database adapters. Simplifies implementing secure auth without writing boilerplate."
  },
  {
    "id": "309",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a responsive table in Next.js?",
    "answer": "Options: horizontal scroll for small screens, stack columns on mobile, or hide less important columns. Use CSS media queries. Consider libraries like 'react-table' for complex cases with sorting/pagination."
  },
  {
    "id": "310",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a virtualized list in Next.js?",
    "answer": "Use libraries like 'react-window' or 'react-virtualized' that render only visible items. Implement proper item sizing and dynamic measurement. Consider intersection observers for infinite loading with getServerSideProps."
  },
  {
    "id": "311",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-bundle-analyzer'?",
    "answer": "'next-bundle-analyzer' visualizes the size of webpack output files. It helps identify large dependencies, duplicate code, and optimization opportunities. Run during build to analyze and optimize your bundle size."
  },
  {
    "id": "312",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a date picker in Next.js?",
    "answer": "Use libraries like 'react-datepicker' or 'react-day-picker'. Handle timezones properly if needed. For accessibility, ensure proper labeling and keyboard navigation. Style to match your design system."
  },
  {
    "id": "313",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a real-time stock market dashboard in Next.js",
    "answer": "Use WebSocket connections to market data APIs. Implement efficient data updates with windowing for large datasets. Use visualization libraries like Chart.js. Cache historical data in getStaticProps with ISR for updates."
  },
  {
    "id": "314",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using 'next-mdx-remote'?",
    "answer": "'next-mdx-remote' allows MDX content to be loaded from anywhere (CMS, database, filesystem). It supports frontmatter, custom components, and efficient hydration. Useful for blogs, docs, and content-heavy sites."
  },
  {
    "id": "315",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a color picker in Next.js?",
    "answer": "Use libraries like 'react-colorful' or native input[type=color]. Handle color conversions if needed. Provide accessible labels and output formats. Consider integrating with your design system's color palette."
  },
  {
    "id": "316",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a real-time collaborative whiteboard in Next.js?",
    "answer": "Use WebSocket connections for drawing data. Implement operational transformation for conflict resolution. Use Canvas API or libraries like Konva.js for rendering. Handle presence with heartbeat checks. Optimize data transfer with throttling."
  },
  {
    "id": "317",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-fonts'?",
    "answer": "'next-fonts' optimizes font loading in Next.js. It automatically generates required @font-face CSS, preloads fonts, and can self-host font files. Helps avoid layout shifts and improves performance metrics like LCP."
  },
  {
    "id": "318",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a file upload in Next.js?",
    "answer": "Create a form with input[type=file]. Handle submission in an API route using 'multer' or similar. Show upload progress. Validate file types/sizes. Store files in cloud storage or filesystem with proper security."
  },
  {
    "id": "319",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a real-time sports scoreboard in Next.js",
    "answer": "Use WebSocket connections to score data APIs. Implement efficient updates with batched re-renders. Use animation for score changes. Cache historical data in getStaticProps with ISR. Consider server push for critical updates."
  },
  {
    "id": "320",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using 'next-optimized-images'?",
    "answer": "'next-optimized-images' automatically optimizes images during build. Features include: format conversion (WebP), resizing, lazy loading, and placeholders. Reduces image size without manual optimization while maintaining quality."
  },
  {
    "id": "321",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a rating component in Next.js?",
    "answer": "Create interactive stars or other visual elements. Manage hover/selection state. Handle submission via API route if needed. Ensure accessibility with ARIA attributes. Consider libraries like 'react-rating' for advanced features."
  },
  {
    "id": "322",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a real-time auction platform in Next.js?",
    "answer": "Use WebSockets for bid updates. Implement server-side validation for bids. Handle concurrency with optimistic UI updates. Use timers for auction end. Implement SSR for critical auction data to prevent manipulation."
  },
  {
    "id": "323",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-redux-wrapper'?",
    "answer": "'next-redux-wrapper' simplifies using Redux with Next.js. It handles store creation for each request, proper hydration between server and client, and integration with Next.js data fetching methods."
  },
  {
    "id": "324",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a tab component in Next.js?",
    "answer": "Manage active tab state. Handle keyboard navigation for accessibility. Style active tab distinctly. Consider URL integration for bookmarkable tabs. For complex cases, use libraries like 'react-tabs'."
  },
  {
    "id": "325",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a real-time traffic monitoring dashboard in Next.js",
    "answer": "Use WebSocket connections to traffic data APIs. Implement efficient data updates with visualization libraries like D3.js. Handle large datasets with windowing. Cache historical data in getStaticProps with ISR."
  },
  {
    "id": "326",
    "category": "react",
    "difficulty": "easy",
    "question": "What is JSX in React?",
    "answer": "JSX stands for JavaScript XML. It allows you to write HTML-like syntax in JavaScript, which gets transformed to React.createElement calls by tools like Babel."
  },
  {
    "id": "327",
    "category": "react",
    "difficulty": "medium",
    "question": "How does the virtual DOM improve performance in React?",
    "answer": "The virtual DOM minimizes real DOM manipulations. React compares virtual DOM trees and batches the necessary updates to apply the least amount of real DOM changes."
  },
  {
    "id": "328",
    "category": "react",
    "difficulty": "easy",
    "question": "What are controlled components in React?",
    "answer": "Controlled components are form elements that derive their values from React state. Their updates are handled via onChange and setState."
  },
  {
    "id": "329",
    "category": "react",
    "difficulty": "medium",
    "question": "Explain the difference between state and props in React.",
    "answer": "Props are read-only data passed from parent to child. State is mutable and controlled by the component itself to manage internal data."
  },
  {
    "id": "330",
    "category": "react",
    "difficulty": "hard",
    "question": "How would you implement a custom hook for form validation?",
    "answer": "Create a function like useFormValidation that tracks field values, errors, and handles validation rules. Return state, error messages, and onChange handlers."
  },
  {
    "id": "331",
    "category": "react",
    "difficulty": "medium",
    "question": "What is useMemo used for?",
    "answer": "useMemo memoizes a computed value between renders to prevent expensive recalculations unless its dependencies change."
  },
  {
    "id": "332",
    "category": "react",
    "difficulty": "hard",
    "question": "Explain reconciliation in React.",
    "answer": "Reconciliation is the diffing algorithm React uses to compare previous and next virtual DOM trees. It updates only the parts of the DOM that changed."
  },
  {
    "id": "333",
    "category": "react",
    "difficulty": "easy",
    "question": "What does useEffect do?",
    "answer": "useEffect runs side-effects in functional components, such as data fetching, subscriptions, and manual DOM updates."
  },
  {
    "id": "334",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the difference between useEffect and useCallback?",
    "answer": "useEffect runs a side effect after render. useCallback returns a memoized version of a function to prevent unnecessary re-creations."
  },
  {
    "id": "335",
    "category": "react",
    "difficulty": "hard",
    "question": "How would you optimize a large list rendering in React?",
    "answer": "Use virtualization libraries like react-window or react-virtualized. Avoid unnecessary re-renders with memo and key optimizations."
  },
  {
    "id": "336",
    "category": "react",
    "difficulty": "easy",
    "question": "What is the purpose of keys in a list?",
    "answer": "Keys help React identify which items changed, were added, or removed, enabling efficient re-rendering of lists."
  },
  {
    "id": "337",
    "category": "react",
    "difficulty": "medium",
    "question": "What is prop drilling and how do you avoid it?",
    "answer": "Prop drilling is passing props through intermediate components unnecessarily. It can be avoided using context or state management libraries."
  },
  {
    "id": "338",
    "category": "react",
    "difficulty": "hard",
    "question": "How does React batch updates internally?",
    "answer": "React batches multiple state updates into a single render pass in events and lifecycle methods using an internal queue."
  },
  {
    "id": "339",
    "category": "react",
    "difficulty": "medium",
    "question": "When should you use React.memo?",
    "answer": "Use React.memo to memoize functional components and prevent re-rendering when props haven't changed."
  },
  {
    "id": "340",
    "category": "react",
    "difficulty": "hard",
    "question": "Explain concurrent rendering in React.",
    "answer": "Concurrent rendering allows React to interrupt rendering tasks to keep the UI responsive. It works with features like startTransition and Suspense."
  },
  {
    "id": "341",
    "category": "react",
    "difficulty": "medium",
    "question": "What is context in React?",
    "answer": "React Context provides a way to pass data through the component tree without passing props manually at every level."
  },
  {
    "id": "342",
    "category": "react",
    "difficulty": "hard",
    "question": "How does Suspense work in React?",
    "answer": "Suspense lets you wait for something before rendering, like lazy-loaded components or asynchronous data. It shows fallback content during the wait."
  },
  {
    "id": "343",
    "category": "react",
    "difficulty": "easy",
    "question": "What is the purpose of defaultProps?",
    "answer": "defaultProps allows you to set default values for props that aren't explicitly provided by the parent component."
  },
  {
    "id": "344",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the difference between class and functional components?",
    "answer": "Class components use ES6 classes and lifecycle methods. Functional components are simpler and can use hooks for state and effects."
  },
  {
    "id": "345",
    "category": "react",
    "difficulty": "hard",
    "question": "How does React Fiber improve rendering?",
    "answer": "React Fiber is a reimplementation of the React core that enables incremental rendering, concurrency, and improved scheduling."
  },
  {
    "id": "346",
    "category": "react",
    "difficulty": "easy",
    "question": "What is the purpose of the useState hook? (variant 1)",
    "answer": "useState lets you add state to functional components and returns a pair: the current state value and a function that updates it."
  },
  {
    "id": "347",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the Context API and when should you use it? (variant 1)",
    "answer": "The Context API is a way to pass data through the component tree without prop drilling. It's useful for global data like themes or authentication."
  },
  {
    "id": "348",
    "category": "react",
    "difficulty": "hard",
    "question": "Explain how React handles asynchronous state updates. (variant 1)",
    "answer": "React batches multiple setState calls for performance. Updates may not happen immediately, and you should avoid relying on current state directly in updates."
  },
  {
    "id": "349",
    "category": "react",
    "difficulty": "medium",
    "question": "How does useEffect cleanup work? (variant 1)",
    "answer": "The function returned from useEffect runs during cleanup, like before a component unmounts or before re-running the effect."
  },
  {
    "id": "350",
    "category": "react",
    "difficulty": "easy",
    "question": "How do you conditionally apply classes in React? (variant 1)",
    "answer": "You can use template literals or libraries like clsx or classnames to apply classes based on conditions."
  },
  {
    "id": "351",
    "category": "react",
    "difficulty": "medium",
    "question": "What’s the difference between useEffect and useLayoutEffect? (variant 1)",
    "answer": "useEffect runs after painting the screen; useLayoutEffect runs before painting, useful for measuring DOM changes or avoiding flickers."
  },
  {
    "id": "352",
    "category": "react",
    "difficulty": "hard",
    "question": "What are React Fiber’s key design goals? (variant 1)",
    "answer": "React Fiber improves rendering by allowing incremental rendering, prioritization, and better handling of asynchronous rendering."
  },
  {
    "id": "353",
    "category": "react",
    "difficulty": "easy",
    "question": "What is a functional component? (variant 1)",
    "answer": "A functional component is a plain JavaScript function that returns JSX. It can use hooks to manage state and side effects."
  },
  {
    "id": "354",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the difference between mounting and unmounting in React? (variant 1)",
    "answer": "Mounting is when a component is inserted into the DOM. Unmounting is when it’s removed. React lifecycle or useEffect helps handle these phases."
  },
  {
    "id": "355",
    "category": "react",
    "difficulty": "hard",
    "question": "How would you prevent unnecessary re-renders in deeply nested components? (variant 1)",
    "answer": "Use React.memo, useCallback, and Context wisely. Ensure props don't change unless needed, and avoid inline functions or objects when possible."
  },
  {
    "id": "356",
    "category": "react",
    "difficulty": "easy",
    "question": "What is the purpose of the useState hook? (variant 2)",
    "answer": "useState lets you add state to functional components and returns a pair: the current state value and a function that updates it."
  },
  {
    "id": "357",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the Context API and when should you use it? (variant 2)",
    "answer": "The Context API is a way to pass data through the component tree without prop drilling. It's useful for global data like themes or authentication."
  },
  {
    "id": "358",
    "category": "react",
    "difficulty": "hard",
    "question": "Explain how React handles asynchronous state updates. (variant 2)",
    "answer": "React batches multiple setState calls for performance. Updates may not happen immediately, and you should avoid relying on current state directly in updates."
  },
  {
    "id": "359",
    "category": "react",
    "difficulty": "medium",
    "question": "How does useEffect cleanup work? (variant 2)",
    "answer": "The function returned from useEffect runs during cleanup, like before a component unmounts or before re-running the effect."
  },
  {
    "id": "360",
    "category": "react",
    "difficulty": "easy",
    "question": "How do you conditionally apply classes in React? (variant 2)",
    "answer": "You can use template literals or libraries like clsx or classnames to apply classes based on conditions."
  },
  {
    "id": "361",
    "category": "react",
    "difficulty": "medium",
    "question": "What’s the difference between useEffect and useLayoutEffect? (variant 2)",
    "answer": "useEffect runs after painting the screen; useLayoutEffect runs before painting, useful for measuring DOM changes or avoiding flickers."
  },
  {
    "id": "362",
    "category": "react",
    "difficulty": "hard",
    "question": "What are React Fiber’s key design goals? (variant 2)",
    "answer": "React Fiber improves rendering by allowing incremental rendering, prioritization, and better handling of asynchronous rendering."
  },
  {
    "id": "363",
    "category": "react",
    "difficulty": "easy",
    "question": "What is a functional component? (variant 2)",
    "answer": "A functional component is a plain JavaScript function that returns JSX. It can use hooks to manage state and side effects."
  },
  {
    "id": "364",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the difference between mounting and unmounting in React? (variant 2)",
    "answer": "Mounting is when a component is inserted into the DOM. Unmounting is when it’s removed. React lifecycle or useEffect helps handle these phases."
  },
  {
    "id": "365",
    "category": "react",
    "difficulty": "hard",
    "question": "How would you prevent unnecessary re-renders in deeply nested components? (variant 2)",
    "answer": "Use React.memo, useCallback, and Context wisely. Ensure props don't change unless needed, and avoid inline functions or objects when possible."
  },
  {
    "id": "366",
    "category": "react",
    "difficulty": "easy",
    "question": "What is the purpose of the useState hook? (variant 3)",
    "answer": "useState lets you add state to functional components and returns a pair: the current state value and a function that updates it."
  },
  {
    "id": "367",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the Context API and when should you use it? (variant 3)",
    "answer": "The Context API is a way to pass data through the component tree without prop drilling. It's useful for global data like themes or authentication."
  },
  {
    "id": "368",
    "category": "react",
    "difficulty": "hard",
    "question": "Explain how React handles asynchronous state updates. (variant 3)",
    "answer": "React batches multiple setState calls for performance. Updates may not happen immediately, and you should avoid relying on current state directly in updates."
  },
  {
    "id": "369",
    "category": "react",
    "difficulty": "medium",
    "question": "How does useEffect cleanup work? (variant 3)",
    "answer": "The function returned from useEffect runs during cleanup, like before a component unmounts or before re-running the effect."
  },
  {
    "id": "370",
    "category": "react",
    "difficulty": "easy",
    "question": "How do you conditionally apply classes in React? (variant 3)",
    "answer": "You can use template literals or libraries like clsx or classnames to apply classes based on conditions."
  },
  {
    "id": "371",
    "category": "react",
    "difficulty": "easy",
    "question": "What are controlled and uncontrolled components in React?",
    "answer": "Controlled components are form elements whose values are controlled by React state. Uncontrolled components store their own state internally and use refs for access."
  },
  {
    "id": "372",
    "category": "react",
    "difficulty": "medium",
    "question": "When should you use useRef over useState?",
    "answer": "Use useRef when you need to persist a mutable value across renders without triggering a re-render. It’s great for DOM references or instance variables."
  },
  {
    "id": "373",
    "category": "react",
    "difficulty": "medium",
    "question": "How does React handle reconciliation?",
    "answer": "React uses the virtual DOM to compare the new element tree with the previous one and updates the DOM efficiently based on changes using a diffing algorithm."
  },
  {
    "id": "374",
    "category": "react",
    "difficulty": "hard",
    "question": "What is the purpose of key props in lists?",
    "answer": "Keys help React identify which items have changed, been added, or removed. They should be stable, predictable, and unique to avoid unnecessary re-renders."
  },
  {
    "id": "375",
    "category": "react",
    "difficulty": "easy",
    "question": "What does JSX stand for and how is it compiled?",
    "answer": "JSX stands for JavaScript XML. It’s syntactic sugar for React.createElement calls and is compiled using tools like Babel before reaching the browser."
  },
  {
    "id": "376",
    "category": "react",
    "difficulty": "medium",
    "question": "What are portals in React and when would you use them?",
    "answer": "Portals allow rendering children into a DOM node outside the parent component hierarchy. They’re useful for modals, tooltips, and overlays."
  },
  {
    "id": "377",
    "category": "react",
    "difficulty": "hard",
    "question": "What are higher-order components (HOCs)?",
    "answer": "A HOC is a function that takes a component and returns a new component. It’s used to reuse component logic like authentication or data fetching."
  },
  {
    "id": "378",
    "category": "react",
    "difficulty": "medium",
    "question": "How do you implement code-splitting in a React app?",
    "answer": "Use dynamic import() and React.lazy with Suspense to load components only when needed. This improves performance by reducing initial bundle size."
  },
  {
    "id": "379",
    "category": "react",
    "difficulty": "easy",
    "question": "What is prop drilling and how can it be avoided?",
    "answer": "Prop drilling is passing props through many layers. It can be avoided using the Context API, Redux, or other state management libraries."
  },
  {
    "id": "380",
    "category": "react",
    "difficulty": "medium",
    "question": "How do you memoize expensive functions in React?",
    "answer": "Use useMemo to memoize the result of a calculation and avoid re-executing it on every render unless dependencies change."
  },
  {
    "id": "381",
    "category": "react",
    "difficulty": "easy",
    "question": "What is the difference between React and ReactDOM?",
    "answer": "React provides the core functionality for building components, while ReactDOM handles rendering those components to the DOM in web applications."
  },
  {
    "id": "382",
    "category": "react",
    "difficulty": "medium",
    "question": "How does React batch state updates?",
    "answer": "React batches multiple setState calls into a single update for performance. This means state updates might not be applied immediately."
  },
  {
    "id": "383",
    "category": "react",
    "difficulty": "medium",
    "question": "What are synthetic events in React?",
    "answer": "Synthetic events are React’s wrapper around native browser events, ensuring consistent behavior across different browsers."
  },
  {
    "id": "384",
    "category": "react",
    "difficulty": "hard",
    "question": "How would you optimize a React app with a large list of items?",
    "answer": "Use virtualization libraries like react-window or react-virtualized to render only visible items. Also, memoize components and avoid unnecessary re-renders."
  },
  {
    "id": "385",
    "category": "react",
    "difficulty": "easy",
    "question": "What is the difference between class and functional components?",
    "answer": "Class components use ES6 classes and can hold state and lifecycle methods. Functional components are simpler and rely on hooks for state and effects."
  },
  {
    "id": "386",
    "category": "react",
    "difficulty": "medium",
    "question": "What are hooks rules in React?",
    "answer": "Hooks should only be called at the top level of a functional component or custom hook. They must not be called conditionally or inside loops."
  },
  {
    "id": "387",
    "category": "react",
    "difficulty": "medium",
    "question": "How do you share logic between React components?",
    "answer": "Use custom hooks or higher-order components to extract reusable logic across multiple components."
  },
  {
    "id": "388",
    "category": "react",
    "difficulty": "easy",
    "question": "What is a fragment in React?",
    "answer": "A fragment allows grouping multiple elements without adding extra nodes to the DOM. Use <></> or <React.Fragment>."
  },
  {
    "id": "389",
    "category": "react",
    "difficulty": "hard",
    "question": "What is the difference between useCallback and useMemo?",
    "answer": "useCallback memoizes functions, while useMemo memoizes values returned from functions. Both help prevent unnecessary recalculations or re-renders."
  },
  {
    "id": "390",
    "category": "react",
    "difficulty": "medium",
    "question": "How does React detect changes to trigger re-renders?",
    "answer": "React re-renders when component state or props change. It compares the virtual DOM trees to determine minimal updates."
  },
  {
    "id": "391",
    "category": "react",
    "difficulty": "easy",
    "question": "How do you handle forms in React?",
    "answer": "Use controlled components where form state is managed using useState, or use libraries like React Hook Form for complex cases."
  },
  {
    "id": "392",
    "category": "react",
    "difficulty": "medium",
    "question": "What’s the difference between useReducer and useState?",
    "answer": "useReducer is better for complex state logic or multiple related values. useState is simpler and used for basic local state."
  },
  {
    "id": "393",
    "category": "react",
    "difficulty": "medium",
    "question": "How can you prevent props drilling in large applications?",
    "answer": "Use Context API or global state managers like Redux, Zustand, or Recoil to share state across deeply nested components."
  },
  {
    "id": "394",
    "category": "react",
    "difficulty": "hard",
    "question": "What’s reconciliation in React and how does it work?",
    "answer": "Reconciliation is the process where React compares the current virtual DOM with the previous one and calculates the minimal set of changes to update the real DOM."
  },
  {
    "id": "395",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React keys and why are they important?",
    "answer": "Keys identify list elements uniquely, allowing React to track and efficiently update individual components during re-renders."
  },
  {
    "id": "396",
    "category": "react",
    "difficulty": "easy",
    "question": "How do you pass data from child to parent in React?",
    "answer": "Use a callback function passed as a prop from parent to child. The child calls it with the data to send it upward."
  },
  {
    "id": "397",
    "category": "react",
    "difficulty": "medium",
    "question": "What’s the difference between lifting state up and using context?",
    "answer": "Lifting state up shares state between sibling components by moving it to their common parent. Context is better for sharing state across many levels of the component tree."
  },
  {
    "id": "398",
    "category": "react",
    "difficulty": "medium",
    "question": "How do you test React components?",
    "answer": "Use libraries like React Testing Library or Enzyme for rendering and interaction. Jest is commonly used as the test runner and assertion library."
  },
  {
    "id": "399",
    "category": "react",
    "difficulty": "easy",
    "question": "What is PropTypes in React?",
    "answer": "PropTypes is a type-checking library for validating the types of props passed to components at runtime."
  },
  {
    "id": "400",
    "category": "react",
    "difficulty": "hard",
    "question": "How does React handle component state under the hood?",
    "answer": "React maintains a fiber tree with hooks state attached to each fiber. State updates trigger scheduling and reconciliation of affected fibers."
  },
  {
    "id": "401",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the difference between context and Redux?",
    "answer": "Context is built-in and best for low-frequency global state. Redux is more powerful and suited for complex apps with predictable state updates and middleware."
  },
  {
    "id": "402",
    "category": "react",
    "difficulty": "medium",
    "question": "What is suspense in React?",
    "answer": "Suspense lets you delay rendering part of the UI until a condition is met, often used with lazy loading or data fetching."
  },
  {
    "id": "403",
    "category": "react",
    "difficulty": "medium",
    "question": "What is Concurrent Mode in React?",
    "answer": "Concurrent Mode allows React to interrupt rendering to make apps more responsive. It helps with better scheduling and prioritization of UI updates."
  },
  {
    "id": "404",
    "category": "react",
    "difficulty": "hard",
    "question": "Explain React’s render phase and commit phase.",
    "answer": "Render phase builds the virtual DOM and calculates changes. Commit phase applies changes to the real DOM and runs side-effects."
  },
  {
    "id": "405",
    "category": "react",
    "difficulty": "easy",
    "question": "How do you conditionally render JSX in React?",
    "answer": "Use ternary operators, logical &&, or conditional functions to render different JSX based on state or props."
  },
  {
    "id": "406",
    "category": "react",
    "difficulty": "medium",
    "question": "What are error boundaries in React?",
    "answer": "Error boundaries are React components that catch JavaScript errors in child components and display a fallback UI instead of crashing the app."
  },
  {
    "id": "407",
    "category": "react",
    "difficulty": "medium",
    "question": "What is a controlled input element?",
    "answer": "A controlled input has its value managed by React state. Changes are handled via onChange and useState."
  },
  {
    "id": "408",
    "category": "react",
    "difficulty": "hard",
    "question": "How would you implement a custom hook for API data fetching?",
    "answer": "Create a function using useEffect and useState that handles loading, error, and data. Return these from the hook for reuse across components."
  },
  {
    "id": "409",
    "category": "react",
    "difficulty": "easy",
    "question": "How do you force a component to re-render in React?",
    "answer": "Update its state using useState or useReducer. You can also trigger a change in key or props to force re-rendering."
  },
  {
    "id": "410",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the role of keys in dynamic components?",
    "answer": "Keys help React identify which elements changed, added, or removed. This improves performance and avoids bugs during list rendering."
  },
  {
    "id": "411",
    "category": "react",
    "difficulty": "medium",
    "question": "Can you update props in a component?",
    "answer": "No. Props are read-only. To update them, the parent component must pass new values as props."
  },
  {
    "id": "412",
    "category": "react",
    "difficulty": "easy",
    "question": "How do you bind event handlers in class components?",
    "answer": "Bind them in the constructor or use arrow functions to preserve the correct 'this' context."
  },
  {
    "id": "413",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the purpose of the key attribute in React lists?",
    "answer": "It gives each element a stable identity, helping React optimize updates and avoid bugs during reordering."
  },
  {
    "id": "414",
    "category": "react",
    "difficulty": "hard",
    "question": "What’s the difference between shallow rendering and full rendering in testing React?",
    "answer": "Shallow rendering tests only one level deep of a component tree; full rendering renders all children too, useful for integration testing."
  },
  {
    "id": "415",
    "category": "react",
    "difficulty": "medium",
    "question": "What is hydration in React?",
    "answer": "Hydration is the process of attaching event handlers to static HTML rendered on the server so it becomes interactive."
  },
  {
    "id": "416",
    "category": "react",
    "difficulty": "medium",
    "question": "How can you lazy load a component in React?",
    "answer": "Use React.lazy and Suspense to load a component only when it’s needed, improving initial load performance."
  },
  {
    "id": "417",
    "category": "react",
    "difficulty": "hard",
    "question": "What is useImperativeHandle and when would you use it?",
    "answer": "It allows customizing the instance value exposed when using ref in parent components. Useful for exposing controlled APIs from custom components."
  },
  {
    "id": "418",
    "category": "react",
    "difficulty": "easy",
    "question": "How do you handle button click events in React?",
    "answer": "Use the onClick prop and pass a callback function that handles the event logic."
  },
  {
    "id": "419",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React dev tools and what can you do with them?",
    "answer": "React DevTools is a browser extension that lets you inspect React component hierarchies, view props and state, and debug re-renders."
  },
  {
    "id": "420",
    "category": "react",
    "difficulty": "hard",
    "question": "Explain how React handles fiber reconciliation differently than older versions.",
    "answer": "Fiber allows React to pause, abort, and restart work, enabling concurrency. It breaks rendering into units of work instead of synchronous blocking updates."
  },
  {
    "id": "421",
    "category": "react",
    "difficulty": "medium",
    "question": "What is useTransition in React?",
    "answer": "useTransition lets you mark certain updates as non-urgent, allowing React to keep the UI responsive by deferring slow updates."
  },
  {
    "id": "422",
    "category": "react",
    "difficulty": "medium",
    "question": "What are fallback UIs in Suspense?",
    "answer": "A fallback UI is shown while a component is loading (lazy or fetching). It's passed to the Suspense component’s fallback prop."
  },
  {
    "id": "423",
    "category": "react",
    "difficulty": "easy",
    "question": "What does 'lifting state up' mean?",
    "answer": "It means moving shared state to the closest common ancestor of components that need access to that state."
  },
  {
    "id": "424",
    "category": "react",
    "difficulty": "medium",
    "question": "What is an effect dependency array in useEffect?",
    "answer": "The array tells React when to re-run the effect. React compares previous and current values to determine if dependencies changed."
  },
  {
    "id": "425",
    "category": "react",
    "difficulty": "easy",
    "question": "What is a default prop in React?",
    "answer": "Default props provide fallback values for props when no value is passed from the parent component."
  },
  {
    "id": "426",
    "category": "react",
    "difficulty": "medium",
    "question": "What’s the difference between React and Preact?",
    "answer": "Preact is a lightweight alternative to React with the same API. It’s faster and smaller, but lacks some advanced features like Suspense."
  },
  {
    "id": "427",
    "category": "react",
    "difficulty": "hard",
    "question": "How would you handle focus management in complex forms?",
    "answer": "Use refs with useEffect to set focus. For accessibility, follow keyboard navigation patterns and ARIA roles."
  },
  {
    "id": "428",
    "category": "react",
    "difficulty": "medium",
    "question": "What are render props?",
    "answer": "Render props are a technique where a component uses a function prop to know what to render. It’s useful for sharing logic."
  },
  {
    "id": "429",
    "category": "react",
    "difficulty": "easy",
    "question": "What is children prop in React?",
    "answer": "children is a special prop that allows components to pass nested JSX elements as content from parent to child."
  },
  {
    "id": "430",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the virtual DOM?",
    "answer": "The virtual DOM is an in-memory representation of the real DOM. React uses it to compute minimal DOM updates for performance."
  },
  {
    "id": "431",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What is Tailwind CSS?",
    "answer": "Tailwind is a utility-first CSS framework for rapidly building custom user interfaces without writing traditional CSS."
  },
  {
    "id": "432",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you install Tailwind CSS in a project?",
    "answer": "Use npm: `npm install -D tailwindcss`, then run `npx tailwindcss init` and configure the content paths and plugins."
  },
  {
    "id": "433",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the purpose of the `content` array in tailwind.config.js?",
    "answer": "It tells Tailwind which files to scan for class names, so unused styles can be purged in production."
  },
  {
    "id": "434",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you apply padding and margin in Tailwind?",
    "answer": "Use utility classes like `p-4`, `pt-2`, `m-4`, `mx-auto`, etc."
  },
  {
    "id": "435",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you create a responsive layout with Tailwind?",
    "answer": "Use responsive prefixes like `sm:`, `md:`, `lg:`, etc. Example: `text-sm md:text-lg`."
  },
  {
    "id": "436",
    "category": "tailwind",
    "difficulty": "hard",
    "question": "How can you customize the Tailwind design system?",
    "answer": "Extend or override the default theme in tailwind.config.js under the `theme` or `extend` keys."
  },
  {
    "id": "437",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What does `hover:` do in Tailwind?",
    "answer": "It applies the style on hover. Example: `hover:bg-blue-500` changes background on hover."
  },
  {
    "id": "438",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is JIT mode in Tailwind?",
    "answer": "Just-In-Time mode generates styles on-demand for only the classes you use, making builds faster and smaller."
  },
  {
    "id": "439",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you center a div horizontally in Tailwind?",
    "answer": "Use `mx-auto` and give it a width. Example: `w-1/2 mx-auto`."
  },
  {
    "id": "440",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What class sets text to bold in Tailwind?",
    "answer": "`font-bold`"
  },
  {
    "id": "441",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you conditionally apply Tailwind classes in React?",
    "answer": "Use libraries like `clsx` or `classnames` to dynamically toggle classes based on state or props."
  },
  {
    "id": "442",
    "category": "tailwind",
    "difficulty": "hard",
    "question": "How can you make a custom utility class in Tailwind?",
    "answer": "Use the `addUtilities` function inside a plugin in tailwind.config.js."
  },
  {
    "id": "443",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What Tailwind class makes an element flex?",
    "answer": "`flex`"
  },
  {
    "id": "444",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you hide an element on mobile but show it on desktop?",
    "answer": "Use `hidden md:block`."
  },
  {
    "id": "445",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What does `prose` do in Tailwind?",
    "answer": "It’s a class from the typography plugin that applies sensible styles to HTML content like blog posts."
  },
  {
    "id": "446",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you make text uppercase?",
    "answer": "`uppercase`"
  },
  {
    "id": "447",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the difference between `gap` and `space-x`?",
    "answer": "`gap` works in flex/grid layouts. `space-x` adds margin between siblings but not on the outer edges."
  },
  {
    "id": "448",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you use Tailwind with dark mode?",
    "answer": "Enable `darkMode` in config (`media` or `class`) and use classes like `dark:bg-gray-800`."
  },
  {
    "id": "449",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you use Tailwind with Next.js?",
    "answer": "Install Tailwind, configure PostCSS, add the content paths in `tailwind.config.js`, and import Tailwind in `globals.css`."
  },
  {
    "id": "450",
    "category": "tailwind",
    "difficulty": "hard",
    "question": "What are important variants in Tailwind and how do you enable them?",
    "answer": "Variants like `hover`, `focus`, `disabled` etc. are enabled in the config under `variants` key. You can customize which utilities respond to which variants."
  },
  {
    "id": "451",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What is the class for setting background color in Tailwind?",
    "answer": "`bg-*` (e.g. `bg-red-500`, `bg-blue-100`, etc.)"
  },
  {
    "id": "452",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What are plugin utilities in Tailwind?",
    "answer": "They are custom functions that let you extend Tailwind’s functionality, like adding new components or utilities via the `plugin()` API."
  },
  {
    "id": "453",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you apply a border in Tailwind?",
    "answer": "`border`, `border-2`, `border-gray-300`, etc."
  },
  {
    "id": "454",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you make a div full width?",
    "answer": "`w-full`"
  },
  {
    "id": "455",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you make text center aligned?",
    "answer": "`text-center`"
  },
  {
    "id": "456",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you handle RTL with Tailwind?",
    "answer": "Use plugins like `tailwindcss-rtl` or manage direction styles manually with `ltr:` and `rtl:` variants."
  },
  {
    "id": "457",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you add custom fonts in Tailwind?",
    "answer": "Extend the `fontFamily` key in the config and import the fonts via CSS or @import."
  },
  {
    "id": "458",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the `@apply` directive in Tailwind?",
    "answer": "It lets you compose utility classes inside CSS files or styled components. Example: `.btn { @apply px-4 py-2 bg-blue-500 }`."
  },
  {
    "id": "459",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you make text italic in Tailwind?",
    "answer": "`italic`"
  },
  {
    "id": "460",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you round corners?",
    "answer": "Use `rounded`, `rounded-lg`, `rounded-full`, etc."
  },
  {
    "id": "461",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you enable line-clamp in Tailwind?",
    "answer": "Install the `@tailwindcss/line-clamp` plugin and use classes like `line-clamp-3`."
  },
  {
    "id": "462",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you apply shadow in Tailwind?",
    "answer": "`shadow`, `shadow-md`, `shadow-lg`, etc."
  },
  {
    "id": "463",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you set custom breakpoints?",
    "answer": "Extend the `screens` key in tailwind.config.js with your custom breakpoint names and values."
  },
  {
    "id": "464",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you control overflow in Tailwind?",
    "answer": "`overflow-hidden`, `overflow-scroll`, `overflow-auto`, etc."
  },
  {
    "id": "465",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How does Tailwind handle responsive design compared to Bootstrap?",
    "answer": "Tailwind uses mobile-first utility classes that apply styles at breakpoints. Bootstrap uses a component-first approach with utility classes as optional."
  },
  {
    "id": "466",
    "category": "tailwind",
    "difficulty": "hard",
    "question": "How would you build a design system with Tailwind?",
    "answer": "Customize `tailwind.config.js` with your theme, components, spacing, typography, and create reusable UI patterns using utility classes."
  },
  {
    "id": "467",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the difference between `grid` and `flex` in Tailwind?",
    "answer": "`flex` is for 1D layouts (row or column), `grid` is for 2D layouts. Both use utility classes like `grid-cols-*`, `flex-row`, etc."
  },
  {
    "id": "468",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What class do you use to make a background image cover the container?",
    "answer": "`bg-cover`"
  },
  {
    "id": "469",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you make an element absolute positioned?",
    "answer": "`absolute`"
  },
  {
    "id": "470",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you make a sticky navbar in Tailwind?",
    "answer": "Use `sticky top-0 z-50` along with `bg-white` or your background color."
  },
  {
    "id": "471",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How can you define a custom color palette?",
    "answer": "Extend the `colors` object in tailwind.config.js under the `theme.extend` key."
  },
  {
    "id": "472",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What is `z-index` utility in Tailwind?",
    "answer": "Use `z-0`, `z-10`, `z-50`, etc., to control stacking context."
  },
  {
    "id": "473",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you make a button full width?",
    "answer": "`w-full`"
  },
  {
    "id": "474",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What’s the use of `aspect-ratio` plugin in Tailwind?",
    "answer": "It lets you set the aspect ratio of elements using `aspect-[value]` classes, e.g., `aspect-video`."
  },
  {
    "id": "475",
    "category": "tailwind",
    "difficulty": "hard",
    "question": "How would you structure a large-scale project with Tailwind and components?",
    "answer": "Use atomic design principles, component libraries like Shadcn or Headless UI, and extract common UI blocks into components or partials."
  },
  {
    "id": "476",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "Can you combine Tailwind with CSS Modules or Styled Components?",
    "answer": "Yes. Tailwind can be used inside classNames or combined with CSS-in-JS, though it’s often redundant."
  },
  {
    "id": "477",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the difference between `min-h-screen` and `h-screen`?",
    "answer": "`h-screen` sets exact height, `min-h-screen` ensures at least full viewport height, useful for layouts with overflow."
  },
  {
    "id": "478",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you set letter spacing in Tailwind?",
    "answer": "Use `tracking-*`, e.g., `tracking-wide`, `tracking-tighter`."
  },
  {
    "id": "479",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you make an element rounded only on the top corners?",
    "answer": "`rounded-t-lg`, `rounded-tl`, `rounded-tr`"
  },
  {
    "id": "480",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you add transition effects?",
    "answer": "Use `transition`, `duration-300`, `ease-in-out`, and `hover:` states."
  },
  {
    "id": "481",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you customize the container width in Tailwind?",
    "answer": "Extend the `container` key in `theme` inside `tailwind.config.js` with custom widths for each breakpoint."
  },
  {
    "id": "482",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What Tailwind class would you use to make text truncate with an ellipsis?",
    "answer": "`truncate`"
  },
  {
    "id": "483",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you handle custom animations in Tailwind?",
    "answer": "Define keyframes and animations in `tailwind.config.js` under `extend.animation` and `extend.keyframes`."
  },
  {
    "id": "484",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you apply a gradient background in Tailwind?",
    "answer": "Use `bg-gradient-to-r`, `from-*`, `to-*` classes."
  },
  {
    "id": "485",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What does the `pointer-events-none` class do?",
    "answer": "It disables mouse events on the element, making it not interactive."
  },
  {
    "id": "486",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you use the `space-y` utility?",
    "answer": "It adds vertical margin between child elements, e.g. `space-y-4`."
  },
  {
    "id": "487",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What class would you use to make text bold and uppercase simultaneously?",
    "answer": "`font-bold uppercase`"
  },
  {
    "id": "488",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How does Tailwind handle hover and focus states together?",
    "answer": "You can chain variants like `hover:focus:bg-blue-500` to apply styles on both states."
  },
  {
    "id": "489",
    "category": "tailwind",
    "difficulty": "hard",
    "question": "How would you create a responsive grid layout with Tailwind?",
    "answer": "Use `grid` and define columns per breakpoint using `grid-cols-*`, e.g. `grid-cols-1 sm:grid-cols-2 lg:grid-cols-4`."
  },
  {
    "id": "490",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you hide scrollbars in Tailwind?",
    "answer": "Use custom CSS or plugins since Tailwind doesn’t have built-in scrollbar utilities."
  },
  {
    "id": "491",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How can you optimize Tailwind CSS size in production?",
    "answer": "Configure PurgeCSS by specifying content paths to remove unused styles."
  },
  {
    "id": "492",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What is the Tailwind class to make a button full width but limited max width?",
    "answer": "`w-full max-w-xs` or any max-width utility."
  },
  {
    "id": "493",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you implement accessibility considerations using Tailwind?",
    "answer": "Use focus-visible states like `focus:outline-none focus:ring` and semantic HTML."
  },
  {
    "id": "494",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you apply box shadow only on hover?",
    "answer": "`hover:shadow-lg`"
  },
  {
    "id": "495",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "Explain how to use `container` with responsive padding in Tailwind.",
    "answer": "`container` auto applies max-width; use padding utilities like `px-4 md:px-6` for horizontal padding."
  },
  {
    "id": "496",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the difference between `hidden` and `invisible` in Tailwind?",
    "answer": "`hidden` removes the element from layout; `invisible` makes it transparent but keeps its space."
  },
  {
    "id": "497",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you set the cursor style to pointer in Tailwind?",
    "answer": "`cursor-pointer`"
  },
  {
    "id": "498",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you extend Tailwind to support new font sizes?",
    "answer": "Add new sizes under `theme.extend.fontSize` in tailwind.config.js."
  },
  {
    "id": "499",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the purpose of `object-fit` utilities like `object-cover`?",
    "answer": "They control how images or videos fit inside their containers."
  },
  {
    "id": "500",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How to apply a ring (outline) to an element in Tailwind?",
    "answer": "`ring`, `ring-2`, `ring-blue-500` etc."
  },
  {
    "id": "501",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you control the stacking order with Tailwind?",
    "answer": "Use `z-*` classes like `z-10`, `z-20`, etc."
  },
  {
    "id": "502",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you add focus-visible styles for accessibility in Tailwind?",
    "answer": "Use `focus-visible:outline-none focus-visible:ring` to only show outlines when keyboard focusing."
  },
  {
    "id": "503",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you make an element take full viewport height?",
    "answer": "`h-screen`"
  },
  {
    "id": "504",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you add a solid border with a specific color?",
    "answer": "`border border-red-500`"
  },
  {
    "id": "505",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the use of `divide-x` and `divide-y` classes?",
    "answer": "They add borders between child elements horizontally or vertically."
  },
  {
    "id": "506",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you make a flex container column direction in Tailwind?",
    "answer": "`flex flex-col`"
  },
  {
    "id": "507",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What class controls letter case to lowercase?",
    "answer": "`lowercase`"
  },
  {
    "id": "508",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you set max-width for images responsively?",
    "answer": "Use `max-w-full` to prevent overflow and responsive sizing utilities."
  },
  {
    "id": "509",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you apply custom box shadows in Tailwind?",
    "answer": "Extend the `boxShadow` key in the config with custom shadow definitions."
  },
  {
    "id": "510",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you remove underline from links in Tailwind?",
    "answer": "`no-underline`"
  },
  {
    "id": "511",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How to apply ring offset in Tailwind?",
    "answer": "Use `ring-offset-*` classes to add space between the element and ring."
  },
  {
    "id": "512",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you enable important utilities in Tailwind config?",
    "answer": "Set `important: true` or provide a selector string in the tailwind.config.js."
  },
  {
    "id": "513",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you set minimum width in Tailwind?",
    "answer": "`min-w-*` classes like `min-w-full` or `min-w-0`."
  },
  {
    "id": "514",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How to customize transition timing functions in Tailwind?",
    "answer": "Extend the `transitionTimingFunction` in tailwind.config.js under `theme.extend`."
  },
  {
    "id": "515",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What class would make text italic?",
    "answer": "`italic`"
  },
  {
    "id": "516",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you apply ring with a specific color and width?",
    "answer": "Combine `ring`, `ring-[width]`, and `ring-[color]` classes."
  },
  {
    "id": "517",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How to set custom z-index values in Tailwind?",
    "answer": "Extend `zIndex` in the config file with custom numeric values."
  },
  {
    "id": "518",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you enable dark mode in Tailwind?",
    "answer": "Set `darkMode` in tailwind.config.js to `'media'` or `'class'`."
  },
  {
    "id": "519",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How to center content horizontally in Tailwind?",
    "answer": "`mx-auto`"
  },
  {
    "id": "520",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the difference between `gap-x` and `space-x`?",
    "answer": "`gap-x` controls gaps between grid/flex items, `space-x` adds margin between siblings."
  },
  {
    "id": "521",
    "category": "css",
    "difficulty": "easy",
    "question": "What is the difference between `class` and `id` selectors in CSS?",
    "answer": "`id` is unique per page and has higher specificity; `class` can be reused multiple times."
  },
  {
    "id": "522",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the CSS Box Model.",
    "answer": "It consists of content, padding, border, and margin areas that define element size and spacing."
  },
  {
    "id": "523",
    "category": "css",
    "difficulty": "easy",
    "question": "How do you center a block element horizontally?",
    "answer": "Set a width and use `margin: 0 auto`."
  },
  {
    "id": "524",
    "category": "css",
    "difficulty": "medium",
    "question": "What are pseudo-classes in CSS? Give examples.",
    "answer": "They define a special state of an element like `:hover`, `:focus`, `:nth-child()`."
  },
  {
    "id": "525",
    "category": "css",
    "difficulty": "medium",
    "question": "How does `position: absolute` differ from `position: relative`?",
    "answer": "`absolute` positions relative to nearest positioned ancestor; `relative` offsets relative to its normal position."
  },
  {
    "id": "526",
    "category": "css",
    "difficulty": "easy",
    "question": "What does `z-index` do?",
    "answer": "Controls the stack order of overlapping elements."
  },
  {
    "id": "527",
    "category": "css",
    "difficulty": "hard",
    "question": "Explain how Flexbox works and common properties.",
    "answer": "Flexbox arranges items in a flexible container. Key properties: `flex-direction`, `justify-content`, `align-items`, `flex-grow`."
  },
  {
    "id": "528",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between `em` and `rem` units?",
    "answer": "`em` is relative to the parent element font size; `rem` is relative to the root (`html`) font size."
  },
  {
    "id": "529",
    "category": "css",
    "difficulty": "medium",
    "question": "How do CSS Grid and Flexbox differ?",
    "answer": "Grid is 2D (rows and columns); Flexbox is 1D (row or column). Grid is better for layouts, Flexbox for components."
  },
  {
    "id": "530",
    "category": "css",
    "difficulty": "easy",
    "question": "What does `overflow: hidden` do?",
    "answer": "Hides content that overflows its container."
  },
  {
    "id": "531",
    "category": "css",
    "difficulty": "medium",
    "question": "How does the `calc()` function work in CSS?",
    "answer": "Allows dynamic calculations combining units, e.g. `width: calc(100% - 50px)`."
  },
  {
    "id": "532",
    "category": "css",
    "difficulty": "medium",
    "question": "What are vendor prefixes in CSS?",
    "answer": "Browser-specific prefixes like `-webkit-`, `-moz-` for experimental or non-standard features."
  },
  {
    "id": "533",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you implement responsive typography in CSS?",
    "answer": "Use relative units like `em`, `rem`, and CSS clamp or media queries."
  },
  {
    "id": "534",
    "category": "css",
    "difficulty": "hard",
    "question": "What is the `contain` property in CSS and when do you use it?",
    "answer": "Optimizes rendering by limiting browser's scope for layout, style, or paint containment."
  },
  {
    "id": "535",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the difference between `visibility: hidden` and `display: none`.",
    "answer": "`visibility: hidden` hides element but keeps space; `display: none` removes element from layout."
  },
  {
    "id": "536",
    "category": "css",
    "difficulty": "medium",
    "question": "What is specificity in CSS and how is it calculated?",
    "answer": "Specificity determines which rules apply; calculated by counting inline styles, IDs, classes, and element selectors."
  },
  {
    "id": "537",
    "category": "css",
    "difficulty": "hard",
    "question": "How can you create a sticky footer with CSS?",
    "answer": "Use `flex` layout on container with `min-height: 100vh` and push footer with `margin-top: auto`."
  },
  {
    "id": "538",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between `min-width`, `max-width`, and `width`?",
    "answer": "`width` sets exact width; `min-width` sets minimum allowed; `max-width` sets maximum allowed."
  },
  {
    "id": "539",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the `object-fit` property used for?",
    "answer": "Controls how replaced content like images or videos fit inside their container."
  },
  {
    "id": "540",
    "category": "css",
    "difficulty": "easy",
    "question": "How do you select the first child element in CSS?",
    "answer": "Using the `:first-child` pseudo-class."
  },
  {
    "id": "541",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain how to use media queries.",
    "answer": "Apply CSS rules conditionally based on viewport size, resolution, or device features."
  },
  {
    "id": "542",
    "category": "css",
    "difficulty": "medium",
    "question": "What are CSS variables and how do you define them?",
    "answer": "Custom properties declared with `--var-name` syntax inside selectors, accessed via `var()`."
  },
  {
    "id": "543",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you apply multiple background images in CSS?",
    "answer": "List images separated by commas in `background-image` property."
  },
  {
    "id": "544",
    "category": "css",
    "difficulty": "hard",
    "question": "Explain critical rendering path optimization in CSS.",
    "answer": "Minimize and prioritize CSS to reduce render-blocking and speed up page load."
  },
  {
    "id": "545",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you clear floats in CSS?",
    "answer": "Use clearfix method or set parent `overflow: hidden`."
  },
  {
    "id": "546",
    "category": "css",
    "difficulty": "easy",
    "question": "What does the `box-sizing` property do?",
    "answer": "Determines whether padding and border are included in element’s total width and height."
  },
  {
    "id": "547",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between `relative`, `absolute`, `fixed`, and `sticky` positioning?",
    "answer": "`relative` moves element relative to itself; `absolute` relative to nearest positioned ancestor; `fixed` relative to viewport; `sticky` toggles between relative and fixed."
  },
  {
    "id": "548",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you create a CSS animation?",
    "answer": "Define keyframes with `@keyframes` and apply animation properties to elements."
  },
  {
    "id": "549",
    "category": "css",
    "difficulty": "medium",
    "question": "What are pseudo-elements and give examples?",
    "answer": "Virtual elements like `::before` and `::after` used to insert content."
  },
  {
    "id": "550",
    "category": "css",
    "difficulty": "easy",
    "question": "How do you change the font family in CSS?",
    "answer": "Use the `font-family` property."
  },
  {
    "id": "551",
    "category": "css",
    "difficulty": "medium",
    "question": "How does the cascade and inheritance work in CSS?",
    "answer": "Cascade resolves conflicts by specificity and order; inheritance passes certain properties from parent to child."
  },
  {
    "id": "552",
    "category": "css",
    "difficulty": "medium",
    "question": "What does the `opacity` property do?",
    "answer": "Controls transparency level of an element."
  },
  {
    "id": "553",
    "category": "css",
    "difficulty": "easy",
    "question": "How do you make text bold in CSS?",
    "answer": "Use `font-weight: bold` or the shorthand class if using frameworks."
  },
  {
    "id": "554",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the use of the `transition` property?",
    "answer": "Allows smooth animation between property changes."
  },
  {
    "id": "555",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you style form inputs on focus?",
    "answer": "Use the `:focus` pseudo-class."
  },
  {
    "id": "556",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you create a responsive layout using CSS Grid?",
    "answer": "Define grid-template-columns with repeat and minmax inside media queries or use auto-fit/auto-fill."
  },
  {
    "id": "557",
    "category": "css",
    "difficulty": "hard",
    "question": "Explain how to implement a fluid typography system.",
    "answer": "Use CSS clamp() with viewport units to create scalable font sizes."
  },
  {
    "id": "558",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between `max-content`, `min-content`, and `fit-content`?",
    "answer": "`max-content` expands to max intrinsic size; `min-content` shrinks to min intrinsic size; `fit-content` clamps size within limits."
  },
  {
    "id": "559",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you use the `aspect-ratio` property?",
    "answer": "Controls the width-to-height ratio of an element."
  },
  {
    "id": "560",
    "category": "css",
    "difficulty": "easy",
    "question": "How do you make an element take full width of its container?",
    "answer": "`width: 100%` or `w-full` in utility frameworks."
  },
  {
    "id": "561",
    "category": "css",
    "difficulty": "easy",
    "question": "What does the float property do?",
    "answer": "It allows elements to be taken out of the normal flow and positioned to the left or right."
  },
  {
    "id": "562",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you clear a floated element?",
    "answer": "Use the clear property or a clearfix hack to contain floats."
  },
  {
    "id": "563",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the difference between inline, block, and inline-block elements.",
    "answer": "Inline elements flow within text and don’t start on a new line; block elements take full width and start on a new line; inline-block behaves like inline but respects width and height."
  },
  {
    "id": "564",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you make an element responsive?",
    "answer": "Use relative units like %, em, rem, viewport units, and media queries."
  },
  {
    "id": "565",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between rem and % units?",
    "answer": "rem is relative to root font size; % is relative to parent element."
  },
  {
    "id": "566",
    "category": "css",
    "difficulty": "easy",
    "question": "How do you hide an element visually but keep it accessible for screen readers?",
    "answer": "Use CSS like position: absolute; width: 1px; height: 1px; overflow: hidden; clip: rect(1px,1px,1px,1px);."
  },
  {
    "id": "567",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between absolute and fixed positioning?",
    "answer": "absolute is positioned relative to nearest positioned ancestor; fixed is relative to viewport and doesn’t move on scroll."
  },
  {
    "id": "568",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the difference between opacity and visibility.",
    "answer": "opacity changes transparency but the element still takes space; visibility: hidden hides element but keeps space."
  },
  {
    "id": "569",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you make images responsive?",
    "answer": "Use max-width: 100% and height: auto."
  },
  {
    "id": "570",
    "category": "css",
    "difficulty": "easy",
    "question": "What is the purpose of the display property?",
    "answer": "Controls how an element is displayed, like block, inline, flex, grid, none."
  },
  {
    "id": "571",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you create a CSS grid container?",
    "answer": "Use display: grid on the parent container."
  },
  {
    "id": "572",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the use of the place-items property?",
    "answer": "Shorthand for align-items and justify-items to align grid items."
  },
  {
    "id": "573",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you apply styles only for print media?",
    "answer": "Use @media print queries."
  },
  {
    "id": "574",
    "category": "css",
    "difficulty": "hard",
    "question": "Explain how CSS specificity works when multiple selectors apply.",
    "answer": "The browser applies the rule with highest specificity calculated from inline styles, IDs, classes, and elements."
  },
  {
    "id": "575",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between auto and initial values in CSS?",
    "answer": "auto lets the browser calculate the value, initial resets property to default."
  },
  {
    "id": "576",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you implement a CSS tooltip?",
    "answer": "Use position: relative on the parent and position: absolute with visibility controls on tooltip text."
  },
  {
    "id": "577",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the clip-path property used for?",
    "answer": "Defines a visible region of an element, clipping the rest."
  },
  {
    "id": "578",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the difference between rem and vw units.",
    "answer": "rem is relative to root font size; vw is relative to viewport width."
  },
  {
    "id": "579",
    "category": "css",
    "difficulty": "medium",
    "question": "What does the filter property do in CSS?",
    "answer": "Applies visual effects like blur, brightness, contrast on elements."
  },
  {
    "id": "580",
    "category": "css",
    "difficulty": "easy",
    "question": "How do you change the cursor when hovering over an element?",
    "answer": "Use the cursor property, e.g. cursor: pointer."
  },
  {
    "id": "581",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the use of object-position in CSS?",
    "answer": "Controls the position of replaced content within its box."
  },
  {
    "id": "582",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you implement dark mode using CSS only?",
    "answer": "Use prefers-color-scheme media query."
  },
  {
    "id": "583",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between transition and animation?",
    "answer": "transition is for simple property changes; animation supports complex keyframes."
  },
  {
    "id": "584",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you make a circle with CSS?",
    "answer": "Set equal width and height and use border-radius: 50%."
  },
  {
    "id": "585",
    "category": "css",
    "difficulty": "easy",
    "question": "How do you add space between words in CSS?",
    "answer": "Use word-spacing property."
  },
  {
    "id": "586",
    "category": "css",
    "difficulty": "medium",
    "question": "What are the differences between padding and margin?",
    "answer": "padding is space inside the border; margin is space outside the border."
  },
  {
    "id": "587",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you make a sticky navigation bar with CSS?",
    "answer": "Use position: sticky with a top value."
  },
  {
    "id": "588",
    "category": "css",
    "difficulty": "medium",
    "question": "What does the white-space property control?",
    "answer": "Controls how whitespace inside an element is handled."
  },
  {
    "id": "589",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the purpose of the content property.",
    "answer": "Used with pseudo-elements to insert generated content."
  },
  {
    "id": "590",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the use of the pointer-events property?",
    "answer": "Controls whether an element reacts to mouse events."
  },
  {
    "id": "591",
    "category": "css",
    "difficulty": "hard",
    "question": "How do you implement a responsive grid that changes column count based on screen size?",
    "answer": "Use CSS Grid with grid-template-columns: repeat(auto-fit, minmax(...)) and media queries."
  },
  {
    "id": "592",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between border-box and content-box?",
    "answer": "border-box includes padding and border in width/height; content-box doesn’t."
  },
  {
    "id": "593",
    "category": "css",
    "difficulty": "medium",
    "question": "How does CSS inheritance work with properties like color and font-family?",
    "answer": "These properties inherit from parent elements by default unless overridden."
  },
  {
    "id": "594",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between nth-child and nth-of-type selectors?",
    "answer": "nth-child counts all children; nth-of-type counts only siblings of same element type."
  },
  {
    "id": "595",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you create a gradient background in CSS?",
    "answer": "Use linear-gradient or radial-gradient in the background-image property."
  },
  {
    "id": "596",
    "category": "css",
    "difficulty": "easy",
    "question": "How do you change the text color in CSS?",
    "answer": "Use the color property."
  },
  {
    "id": "597",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the effect of vertical-align property?",
    "answer": "Controls vertical alignment of inline or table-cell elements."
  },
  {
    "id": "598",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you make a div element scrollable?",
    "answer": "Use overflow: auto or overflow: scroll."
  },
  {
    "id": "599",
    "category": "css",
    "difficulty": "medium",
    "question": "What are media features used in media queries?",
    "answer": "Features like width, height, resolution, orientation, prefers-color-scheme."
  },
  {
    "id": "600",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you optimize CSS delivery for performance?",
    "answer": "Minify CSS, use critical CSS inline, defer non-critical CSS."
  },
  {
    "id": "601",
    "category": "css",
    "difficulty": "medium",
    "question": "What are pseudo-classes in CSS?",
    "answer": "Pseudo-classes define a special state of an element, like :hover or :focus."
  },
  {
    "id": "602",
    "category": "css",
    "difficulty": "medium",
    "question": "How does the z-index property work?",
    "answer": "z-index controls stacking order of positioned elements; higher values appear on top."
  },
  {
    "id": "603",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the box model in CSS.",
    "answer": "The box model consists of content, padding, border, and margin areas that define element size and spacing."
  },
  {
    "id": "604",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you center a block element horizontally?",
    "answer": "Set a width and use margin: 0 auto."
  },
  {
    "id": "605",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between min-width and max-width?",
    "answer": "min-width sets the minimum width an element can have, max-width sets the maximum."
  },
  {
    "id": "606",
    "category": "css",
    "difficulty": "medium",
    "question": "How do CSS variables work?",
    "answer": "CSS variables are custom properties defined with -- and accessed using var()."
  },
  {
    "id": "607",
    "category": "css",
    "difficulty": "hard",
    "question": "How do you implement a complex layout using CSS Grid?",
    "answer": "Define rows and columns, assign grid areas, and place items using grid lines or area names."
  },
  {
    "id": "608",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between relative, absolute, and fixed positioning?",
    "answer": "Relative positions element relative to normal flow, absolute relative to nearest positioned ancestor, fixed relative to viewport."
  },
  {
    "id": "609",
    "category": "css",
    "difficulty": "medium",
    "question": "How does flexbox handle overflow when flex items are too large?",
    "answer": "Flex items can shrink or grow depending on flex-shrink and flex-grow; overflow can be controlled with overflow property."
  },
  {
    "id": "610",
    "category": "css",
    "difficulty": "medium",
    "question": "What are media queries and how do you use them?",
    "answer": "Media queries apply CSS conditionally based on device features like screen size or resolution."
  },
  {
    "id": "611",
    "category": "css",
    "difficulty": "easy",
    "question": "How do you change the font size of text in CSS?",
    "answer": "Use the font-size property."
  },
  {
    "id": "612",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between visibility: hidden and display: none?",
    "answer": "visibility: hidden hides the element but keeps its space; display: none removes the element from the document flow."
  },
  {
    "id": "613",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you apply styles to multiple selectors in CSS?",
    "answer": "Separate selectors with commas in the CSS rule."
  },
  {
    "id": "614",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the purpose of overflow: hidden?",
    "answer": "It hides any content that overflows the element’s box."
  },
  {
    "id": "615",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you prevent text from wrapping in CSS?",
    "answer": "Use white-space: nowrap."
  },
  {
    "id": "616",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between em and rem units?",
    "answer": "em is relative to the font-size of the parent; rem is relative to the root element’s font-size."
  },
  {
    "id": "617",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the difference between position: static and position: relative.",
    "answer": "static is default positioning, elements follow normal flow; relative allows positioning relative to itself without removing from flow."
  },
  {
    "id": "618",
    "category": "css",
    "difficulty": "medium",
    "question": "What are vendor prefixes and why are they used?",
    "answer": "Vendor prefixes like -webkit- or -moz- are used for experimental or browser-specific CSS properties."
  },
  {
    "id": "619",
    "category": "css",
    "difficulty": "hard",
    "question": "How can you create an animation using CSS keyframes?",
    "answer": "Define keyframes using @keyframes, then apply it with animation-name, animation-duration, and other properties."
  },
  {
    "id": "620",
    "category": "css",
    "difficulty": "medium",
    "question": "How does the box-sizing property affect element sizing?",
    "answer": "box-sizing: border-box includes padding and border in width/height calculations, content-box excludes them."
  },
  {
    "id": "621",
    "category": "css",
    "difficulty": "medium",
    "question": "What does the flex-grow property do?",
    "answer": "Defines how much a flex item will grow relative to the rest."
  },
  {
    "id": "622",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you make images cover their container without stretching?",
    "answer": "Use object-fit: cover."
  },
  {
    "id": "623",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain how nth-child selector works.",
    "answer": "Selects elements based on their position among siblings, counting all types."
  },
  {
    "id": "624",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you create a vertical scrollbar only when needed?",
    "answer": "Use overflow-y: auto."
  },
  {
    "id": "625",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between grid-template-rows and grid-auto-rows?",
    "answer": "grid-template-rows explicitly defines rows; grid-auto-rows sets size for implicit rows."
  },
  {
    "id": "626",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you align flex items vertically in a container?",
    "answer": "Use align-items property."
  },
  {
    "id": "627",
    "category": "css",
    "difficulty": "medium",
    "question": "What does the visibility property do?",
    "answer": "Controls whether an element is visible or hidden but still occupies space."
  },
  {
    "id": "628",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the difference between pseudo-elements and pseudo-classes.",
    "answer": "Pseudo-classes target states of elements (:hover), pseudo-elements create virtual elements (::before)."
  },
  {
    "id": "629",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you make text bold in CSS?",
    "answer": "Use font-weight: bold or numeric values like 700."
  },
  {
    "id": "630",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the use of line-height in CSS?",
    "answer": "Controls vertical spacing between lines of text."
  },
  {
    "id": "631",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you create a drop shadow effect?",
    "answer": "Use the box-shadow property."
  },
  {
    "id": "632",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between max-height and height?",
    "answer": "height sets the fixed height; max-height limits how tall an element can grow."
  },
  {
    "id": "633",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you change the background color of an element?",
    "answer": "Use the background-color property."
  },
  {
    "id": "634",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between inline and block elements?",
    "answer": "Inline elements flow within text, block elements take full width and start on new lines."
  },
  {
    "id": "635",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you make a button look disabled with CSS?",
    "answer": "Use opacity to fade and pointer-events: none to disable interaction."
  },
  {
    "id": "636",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the inherit value in CSS?",
    "answer": "It forces a property to take the same computed value as its parent."
  },
  {
    "id": "637",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain how to use the calc() function in CSS.",
    "answer": "calc() allows calculations to mix units like percentages and pixels."
  },
  {
    "id": "638",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you vertically center content in a flex container?",
    "answer": "Use align-items: center."
  },
  {
    "id": "639",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you create a fixed footer at the bottom of the page?",
    "answer": "Use position: fixed and bottom: 0."
  },
  {
    "id": "640",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the default display value for a <span> element?",
    "answer": "inline."
  },
  {
    "id": "641",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you make text italic in CSS?",
    "answer": "Use font-style: italic."
  },
  {
    "id": "642",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between visibility: collapse and visibility: hidden?",
    "answer": "collapse removes element in table layouts, hidden hides but keeps space."
  },
  {
    "id": "643",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you apply multiple background images to a single element?",
    "answer": "Use a comma-separated list in the background-image property."
  },
  {
    "id": "644",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the use of the order property in flexbox?",
    "answer": "Controls the visual order of flex items."
  },
  {
    "id": "645",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you remove default margin and padding from all elements?",
    "answer": "Use a CSS reset like * { margin: 0; padding: 0; }."
  },
  {
    "id": "646",
    "category": "css",
    "difficulty": "medium",
    "question": "What does white-space: pre do?",
    "answer": "Preserves whitespace and line breaks like in the source."
  },
  {
    "id": "647",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the use of word-break property.",
    "answer": "Controls how words break when reaching the end of a line."
  },
  {
    "id": "648",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you create a responsive typography system?",
    "answer": "Use relative units like em, rem, and media queries."
  },
  {
    "id": "649",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between auto and inherit in CSS?",
    "answer": "auto lets the browser calculate the value, inherit copies the parent's value."
  },
  {
    "id": "650",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you create a CSS class that applies only on hover?",
    "answer": "Use the :hover pseudo-class in your selector."
  },
  {
    "id": "651",
    "category": "css",
    "difficulty": "medium",
    "question": "What are CSS pseudo-elements and how are they used?",
    "answer": "Pseudo-elements allow you to style parts of an element, like ::before and ::after insert content before or after an element’s content."
  },
  {
    "id": "652",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the difference between `absolute` and `fixed` positioning.",
    "answer": "`absolute` positions relative to nearest positioned ancestor, `fixed` positions relative to the viewport and doesn’t move on scroll."
  },
  {
    "id": "653",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you make an element responsive using CSS?",
    "answer": "Use relative units like %, em, rem, and media queries to adapt styles based on screen size."
  },
  {
    "id": "654",
    "category": "css",
    "difficulty": "medium",
    "question": "What does the `clear` property do in CSS?",
    "answer": "`clear` controls the behavior of floating elements and specifies which sides of an element other floating elements are not allowed."
  },
  {
    "id": "655",
    "category": "css",
    "difficulty": "hard",
    "question": "How can you create a CSS-only tooltip?",
    "answer": "Use the `:hover` pseudo-class with `::after` or `::before` pseudo-elements to show tooltip content on hover."
  },
  {
    "id": "656",
    "category": "css",
    "difficulty": "medium",
    "question": "What are the differences between inline, block, and inline-block elements?",
    "answer": "Inline elements flow with text, block elements take full width, inline-block behave like inline but respect width/height."
  },
  {
    "id": "657",
    "category": "css",
    "difficulty": "medium",
    "question": "How do CSS transitions work?",
    "answer": "CSS transitions smoothly animate changes to CSS properties over a specified duration."
  },
  {
    "id": "658",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain how specificity works in CSS.",
    "answer": "Specificity determines which CSS rule applies by calculating weight of selectors; inline > ID > class > element."
  },
  {
    "id": "659",
    "category": "css",
    "difficulty": "hard",
    "question": "How can you implement a sticky header using CSS?",
    "answer": "Use `position: sticky` with top value to keep header visible after scrolling past it."
  },
  {
    "id": "660",
    "category": "css",
    "difficulty": "medium",
    "question": "What are some ways to optimize CSS for performance?",
    "answer": "Minify CSS, reduce unused styles, use shorthand properties, avoid deep selectors, and leverage caching."
  },
  {
    "id": "661",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you create a circle shape with CSS?",
    "answer": "Set equal width and height and use `border-radius: 50%`."
  },
  {
    "id": "662",
    "category": "css",
    "difficulty": "medium",
    "question": "What does the `opacity` property do?",
    "answer": "Controls the transparency level of an element from 0 (transparent) to 1 (opaque)."
  },
  {
    "id": "663",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you hide content visually but keep it accessible for screen readers?",
    "answer": "Use CSS like `position: absolute; width: 1px; height: 1px; overflow: hidden; clip: rect(1px,1px,1px,1px);`."
  },
  {
    "id": "664",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between `rem` and `%` units in CSS?",
    "answer": "`rem` is relative to root font-size, `%` is relative to the parent element’s property."
  },
  {
    "id": "665",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain how the CSS cascade works.",
    "answer": "The cascade decides which CSS rule applies by order, specificity, and importance."
  },
  {
    "id": "666",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you use the `overflow` property to create scrollable containers?",
    "answer": "Set `overflow: auto` or `overflow: scroll` on a container to enable scrollbars when content overflows."
  },
  {
    "id": "667",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between `vh` and `vw` units?",
    "answer": "`vh` is 1% of viewport height; `vw` is 1% of viewport width."
  },
  {
    "id": "668",
    "category": "css",
    "difficulty": "medium",
    "question": "How does the `object-fit` property affect images?",
    "answer": "Controls how images or videos fit their container, options include `cover`, `contain`, `fill`."
  },
  {
    "id": "669",
    "category": "css",
    "difficulty": "medium",
    "question": "What does `pointer-events: none` do?",
    "answer": "Disables mouse interactions on the element."
  },
  {
    "id": "670",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you prevent margin collapse between elements?",
    "answer": "Add padding, border, or use overflow property to prevent collapsing margins."
  },
  {
    "id": "671",
    "category": "css",
    "difficulty": "hard",
    "question": "Explain how to create a complex grid layout with named grid areas.",
    "answer": "Define grid-template-areas in container, assign grid-area names to children for layout."
  },
  {
    "id": "672",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you customize scrollbar styles?",
    "answer": "Use vendor-specific selectors like `::-webkit-scrollbar` to style scrollbars."
  },
  {
    "id": "673",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the use of the `transition-delay` property?",
    "answer": "Sets a delay before the transition starts after the property changes."
  },
  {
    "id": "674",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you use `calc()` for responsive width calculations?",
    "answer": "Combine fixed and relative units, e.g., `width: calc(100% - 50px)`."
  },
  {
    "id": "675",
    "category": "css",
    "difficulty": "medium",
    "question": "What’s the difference between `em` and `ex` units?",
    "answer": "`em` is relative to font-size, `ex` is relative to x-height of the font."
  },
  {
    "id": "676",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you create a responsive image gallery using CSS grid?",
    "answer": "Define grid-template-columns with auto-fit and minmax for responsive columns."
  },
  {
    "id": "677",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the difference between `overflow: hidden` and `clip-path`.",
    "answer": "`overflow: hidden` hides overflow content; `clip-path` defines visible areas with shapes."
  },
  {
    "id": "678",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you vertically align text inside a div?",
    "answer": "Use `line-height` equal to the div height or flexbox with `align-items: center`."
  },
  {
    "id": "679",
    "category": "css",
    "difficulty": "medium",
    "question": "What does the `box-shadow` property accept as values?",
    "answer": "Horizontal offset, vertical offset, blur radius, spread radius, and color."
  },
  {
    "id": "680",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you create a responsive navigation menu with CSS?",
    "answer": "Use media queries to toggle menu styles and flexbox or grid for layout."
  },
  {
    "id": "681",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the effect of the `float` property and how is it cleared?",
    "answer": "Float removes element from normal flow to the left or right; clear fixes container collapse."
  },
  {
    "id": "682",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you apply styles only to the first letter of a paragraph?",
    "answer": "Use the `::first-letter` pseudo-element."
  },
  {
    "id": "683",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between `max-content`, `min-content`, and `auto` in CSS sizing?",
    "answer": "`max-content` sizes to max intrinsic content, `min-content` to min intrinsic, `auto` is default behavior."
  },
  {
    "id": "684",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you make an element visually hidden but still accessible to screen readers?",
    "answer": "Use `position: absolute; width: 1px; height: 1px; overflow: hidden; clip: rect(0 0 0 0);`."
  },
  {
    "id": "685",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the use of the `z-index` property and stacking context.",
    "answer": "`z-index` controls stack order of positioned elements; stacking context determines how layers are rendered."
  },
  {
    "id": "686",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between `visibility: hidden` and `display: none`?",
    "answer": "`visibility: hidden` hides element but keeps layout space; `display: none` removes it completely."
  },
  {
    "id": "687",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you implement a fade-in animation using CSS?",
    "answer": "Use `@keyframes` with opacity from 0 to 1 and apply it with `animation` property."
  },
  {
    "id": "688",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you center a div horizontally and vertically using flexbox?",
    "answer": "Set container to `display: flex; justify-content: center; align-items: center;`."
  },
  {
    "id": "689",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the purpose of the `content` property in CSS?",
    "answer": "Used with pseudo-elements to insert generated content."
  },
  {
    "id": "690",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you implement dark mode support in CSS?",
    "answer": "Use media query `prefers-color-scheme` and provide alternate styles."
  },
  {
    "id": "691",
    "category": "css",
    "difficulty": "medium",
    "question": "What are media queries and how are they used?",
    "answer": "Media queries apply CSS rules based on device characteristics like width or resolution."
  },
  {
    "id": "692",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the difference between `em`, `rem`, and `px` units.",
    "answer": "`px` is absolute pixels, `em` is relative to parent font-size, `rem` relative to root font-size."
  },
  {
    "id": "693",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you optimize CSS delivery for faster page load?",
    "answer": "Minify CSS, use critical CSS inline, defer non-critical CSS, and use media queries."
  },
  {
    "id": "694",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the use of the `object-position` property?",
    "answer": "Defines the alignment of replaced elements like images within their container."
  },
  {
    "id": "695",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you implement a CSS grid with fixed and flexible columns?",
    "answer": "Combine fixed widths and `fr` units in `grid-template-columns`."
  },
  {
    "id": "696",
    "category": "css",
    "difficulty": "medium",
    "question": "What does the `box-sizing` property do?",
    "answer": "Determines if width and height include padding and border (`border-box`) or not (`content-box`)."
  },
  {
    "id": "697",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the concept of stacking context in CSS.",
    "answer": "Stacking context is a hierarchy of elements that determines the painting order."
  },
  {
    "id": "698",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you use the `flex-grow` property?",
    "answer": "`flex-grow` defines how much a flex item will grow relative to others."
  },
  {
    "id": "699",
    "category": "css",
    "difficulty": "medium",
    "question": "What are CSS variables and how do you declare them?",
    "answer": "CSS variables (custom properties) are declared with `--` prefix inside selectors and accessed with `var()`."
  },
  {
    "id": "700",
    "category": "css",
    "difficulty": "medium",
    "question": "How does the `min-width` property affect responsive design?",
    "answer": "`min-width` sets the smallest width an element can shrink to, preventing it from becoming too narrow."
  },
  {
    "id": "701",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What is the difference between `var`, `let`, and `const`?",
    "answer": "`var` is function-scoped and can be redeclared. `let` and `const` are block-scoped; `const` cannot be reassigned."
  },
  {
    "id": "702",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain how closures work in JavaScript.",
    "answer": "A closure is a function that remembers the variables from its outer scope even after the outer function has finished executing."
  },
  {
    "id": "703",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the event loop in JavaScript?",
    "answer": "The event loop handles asynchronous callbacks by continuously checking the call stack and the task queue, executing tasks when the stack is empty."
  },
  {
    "id": "704",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How does `this` keyword work in JavaScript?",
    "answer": "`this` refers to the context in which a function is called; in methods it’s the object, in regular functions it’s the global object or undefined in strict mode."
  },
  {
    "id": "705",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What are Promises and how do they improve asynchronous programming?",
    "answer": "Promises represent a value that may be available now, later, or never, making async code easier to read and manage than nested callbacks."
  },
  {
    "id": "706",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `==` and `===` in JavaScript?",
    "answer": "`==` compares values with type coercion; `===` compares both value and type without coercion."
  },
  {
    "id": "707",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do arrow functions differ from regular functions?",
    "answer": "Arrow functions have a lexical `this` binding, no own `arguments`, and cannot be used as constructors."
  },
  {
    "id": "708",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is hoisting in JavaScript?",
    "answer": "Hoisting moves variable and function declarations to the top of their scope before code execution."
  },
  {
    "id": "709",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain the difference between synchronous and asynchronous code.",
    "answer": "Synchronous code runs sequentially, blocking further execution until done; asynchronous code runs independently, allowing other code to run."
  },
  {
    "id": "710",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How does the `async/await` syntax simplify working with Promises?",
    "answer": "`async/await` lets you write async code that looks synchronous, making it easier to read and handle errors with try/catch."
  },
  {
    "id": "711",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are JavaScript modules and how do you use them?",
    "answer": "Modules allow you to split code into reusable files using `export` and `import` statements."
  },
  {
    "id": "712",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the prototype chain?",
    "answer": "It’s how JavaScript objects inherit properties and methods from other objects through a linked chain."
  },
  {
    "id": "713",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How does the spread operator work in JavaScript?",
    "answer": "The spread operator `...` expands iterable elements like arrays or objects into individual elements or properties."
  },
  {
    "id": "714",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `null` and `undefined`?",
    "answer": "`undefined` means a variable is declared but not assigned; `null` is an explicit assignment indicating no value."
  },
  {
    "id": "715",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you handle errors in JavaScript?",
    "answer": "Using `try/catch` blocks or Promise `.catch()` methods to capture and handle exceptions."
  },
  {
    "id": "716",
    "category": "javascript",
    "difficulty": "hard",
    "question": "Explain event delegation and its benefits.",
    "answer": "Event delegation uses a single event listener on a parent to manage events on child elements, improving performance and dynamic content handling."
  },
  {
    "id": "717",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `call()`, `apply()`, and `bind()`?",
    "answer": "`call()` and `apply()` invoke functions immediately with a specified `this`; `bind()` returns a new function with bound `this`."
  },
  {
    "id": "718",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are generators in JavaScript?",
    "answer": "Generators are functions that can pause and resume execution using `yield` to produce a sequence of values."
  },
  {
    "id": "719",
    "category": "javascript",
    "difficulty": "hard",
    "question": "How do you prevent memory leaks in JavaScript?",
    "answer": "Avoid global variables, clear timers and event listeners, and manage references to DOM elements properly."
  },
  {
    "id": "720",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is a callback function?",
    "answer": "A callback is a function passed as an argument to be executed after another function completes."
  },
  {
    "id": "721",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain the difference between shallow copy and deep copy.",
    "answer": "Shallow copy copies only top-level properties; deep copy recursively copies all nested objects."
  },
  {
    "id": "722",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How does the `typeof` operator work?",
    "answer": "`typeof` returns a string indicating the type of a variable or expression."
  },
  {
    "id": "723",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are template literals in JavaScript?",
    "answer": "Template literals use backticks to embed expressions and create multi-line strings easily."
  },
  {
    "id": "724",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you debounce a function?",
    "answer": "Debouncing delays a function call until a specified time has passed without new events, preventing excessive calls."
  },
  {
    "id": "725",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `Map` and `Object`?",
    "answer": "`Map` is an iterable collection of key-value pairs with any key types; `Object` keys are strings or symbols."
  },
  {
    "id": "726",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain the use of `Set` in JavaScript.",
    "answer": "`Set` stores unique values of any type and allows easy checking and manipulation of unique items."
  },
  {
    "id": "727",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are IIFEs and why are they useful?",
    "answer": "Immediately Invoked Function Expressions run once immediately to create isolated scopes and avoid polluting global scope."
  },
  {
    "id": "728",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How can you clone an object in JavaScript?",
    "answer": "Use `Object.assign({}, obj)` for shallow copy or `JSON.parse(JSON.stringify(obj))` for deep copy with limitations."
  },
  {
    "id": "729",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is event bubbling?",
    "answer": "Event bubbling is when an event propagates from the target element up through its ancestors."
  },
  {
    "id": "730",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you check if a variable is an array?",
    "answer": "Use `Array.isArray(variable)`."
  },
  {
    "id": "731",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain the difference between synchronous and asynchronous functions.",
    "answer": "Synchronous functions block execution until complete; asynchronous functions allow code to run without waiting."
  },
  {
    "id": "732",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is a promise chain?",
    "answer": "Chaining `.then()` calls on promises to sequence async operations."
  },
  {
    "id": "733",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How does destructuring assignment work?",
    "answer": "It extracts values from arrays or properties from objects into distinct variables."
  },
  {
    "id": "734",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between function declaration and function expression?",
    "answer": "Declarations are hoisted and can be called before definition; expressions are not hoisted."
  },
  {
    "id": "735",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you create private variables in JavaScript?",
    "answer": "Use closures or private class fields (`#privateField`)."
  },
  {
    "id": "736",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the purpose of `Symbol` in JavaScript?",
    "answer": "Symbols create unique identifiers, often used as object keys to avoid naming conflicts."
  },
  {
    "id": "737",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain the difference between `for...in` and `for...of` loops.",
    "answer": "`for...in` iterates over object keys; `for...of` iterates over iterable values like arrays."
  },
  {
    "id": "738",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are the different ways to create objects in JavaScript?",
    "answer": "Using object literals, constructors, `Object.create()`, or classes."
  },
  {
    "id": "739",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you use the `new` keyword?",
    "answer": "`new` creates an instance of an object from a constructor function or class."
  },
  {
    "id": "740",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is a promise.all() and when would you use it?",
    "answer": "`Promise.all()` runs multiple promises in parallel and resolves when all succeed or rejects on any failure."
  },
  {
    "id": "741",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain how to handle asynchronous errors in promises.",
    "answer": "Use `.catch()` on the promise chain or try/catch inside async/await functions."
  },
  {
    "id": "742",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `Array.map()` and `Array.forEach()`?",
    "answer": "`map()` returns a new array with transformed elements; `forEach()` executes a function on each item without returning."
  },
  {
    "id": "743",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How does JavaScript handle floating point precision?",
    "answer": "It uses IEEE 754 double precision, which can cause rounding errors with decimal arithmetic."
  },
  {
    "id": "744",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the role of the `constructor` method in a class?",
    "answer": "It initializes new object instances with properties and setup logic."
  },
  {
    "id": "745",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you memoize a function in JavaScript?",
    "answer": "Store results of expensive function calls and return cached results on the same inputs."
  },
  {
    "id": "746",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `Object.freeze()` and `Object.seal()`?",
    "answer": "`freeze()` prevents adding, deleting, or modifying properties; `seal()` prevents adding or deleting but allows modification."
  },
  {
    "id": "747",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is tail call optimization?",
    "answer": "Optimization where a function call in tail position reuses the current stack frame to avoid growing the stack."
  },
  {
    "id": "748",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain the difference between synchronous generators and async generators.",
    "answer": "Sync generators yield values; async generators yield promises and support `for await...of` iteration."
  },
  {
    "id": "749",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the Temporal Dead Zone (TDZ)?",
    "answer": "The TDZ is the time between entering a block and when a `let` or `const` variable is declared, where accessing it causes an error."
  },
  {
    "id": "750",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you prevent default behavior in event handling?",
    "answer": "Use `event.preventDefault()` inside the event handler."
  },
  {
    "id": "751",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `Object.assign()` and the spread operator when cloning objects?",
    "answer": "`Object.assign()` copies enumerable own properties from source objects to a target object. The spread operator does the same but is often syntactically cleaner for shallow copies."
  },
  {
    "id": "752",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you create a custom iterable object in JavaScript?",
    "answer": "Implement the `Symbol.iterator` method that returns an iterator object with a `next()` method returning `{ value, done }`."
  },
  {
    "id": "753",
    "category": "javascript",
    "difficulty": "hard",
    "question": "Explain how the `new.target` meta-property works.",
    "answer": "`new.target` allows functions and constructors to detect if they were called with `new` and which constructor was invoked."
  },
  {
    "id": "754",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are tagged template literals?",
    "answer": "Tagged templates allow you to parse template literals with a function, useful for custom string processing like localization or sanitization."
  },
  {
    "id": "755",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Describe the differences between `setTimeout` and `setInterval`.",
    "answer": "`setTimeout` executes a function once after a delay; `setInterval` repeatedly executes a function at fixed intervals."
  },
  {
    "id": "756",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `globalThis`, `window`, and `self`?",
    "answer": "`globalThis` is a universal global object reference, `window` refers to the browser window, and `self` usually points to the global scope in workers or windows."
  },
  {
    "id": "757",
    "category": "javascript",
    "difficulty": "hard",
    "question": "Explain the purpose and use of WeakMap.",
    "answer": "WeakMap holds weak references to keys (which must be objects), allowing garbage collection if there are no other references, useful for private data storage."
  },
  {
    "id": "758",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `document.readyState` values?",
    "answer": "`loading`: document is still loading, `interactive`: DOM parsed but subresources might not be loaded, `complete`: fully loaded."
  },
  {
    "id": "759",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do JavaScript engines optimize code execution?",
    "answer": "They use Just-In-Time (JIT) compilation, inline caching, and speculative optimizations based on runtime information."
  },
  {
    "id": "760",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What is the difference between microtasks and macrotasks in the event loop?",
    "answer": "Microtasks (e.g., Promise callbacks) run immediately after the current task, before rendering and before macrotasks like `setTimeout`."
  },
  {
    "id": "761",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is a Proxy in JavaScript and how is it used?",
    "answer": "Proxy allows you to define custom behavior for fundamental operations like property lookup, assignment, and function calls."
  },
  {
    "id": "762",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain the use of `Reflect` in JavaScript.",
    "answer": "`Reflect` provides methods for interceptable JavaScript operations, complementing Proxies and enabling default behavior calls."
  },
  {
    "id": "763",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is tail recursion and does JavaScript support it?",
    "answer": "Tail recursion is a function calling itself as its last action. Some JS engines optimize it, but it’s not guaranteed across all."
  },
  {
    "id": "764",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How can you achieve method chaining in JavaScript?",
    "answer": "Return the current object (`this`) from methods so calls can be chained."
  },
  {
    "id": "765",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the purpose of the `void` operator?",
    "answer": "`void` evaluates an expression and returns undefined, often used to prevent default link behavior or discard return values."
  },
  {
    "id": "766",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How does `JSON.stringify` handle circular references?",
    "answer": "It throws a TypeError when circular references are detected unless you provide a custom replacer function."
  },
  {
    "id": "767",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between an Error, a SyntaxError, and a ReferenceError?",
    "answer": "Error is the base error type; SyntaxError happens on invalid code parsing; ReferenceError occurs when accessing undefined variables."
  },
  {
    "id": "768",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain how to use the `instanceof` operator.",
    "answer": "`instanceof` checks if an object’s prototype chain contains the prototype property of a constructor."
  },
  {
    "id": "769",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is a JavaScript event loop starvation?",
    "answer": "When long-running synchronous tasks block the event loop, preventing async tasks from running."
  },
  {
    "id": "770",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How does garbage collection work in JavaScript?",
    "answer": "JavaScript engines use algorithms like mark-and-sweep to free memory occupied by unreachable objects."
  },
  {
    "id": "771",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are the differences between classical inheritance and prototypal inheritance?",
    "answer": "Classical inheritance uses classes and instances; prototypal inheritance uses objects inheriting directly from other objects."
  },
  {
    "id": "772",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you implement a debounce function?",
    "answer": "Return a function that delays invoking the original function until after a wait period has elapsed without calls."
  },
  {
    "id": "773",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are Symbols and how are they different from strings as object keys?",
    "answer": "Symbols create unique keys that avoid property name collisions; strings can be duplicated."
  },
  {
    "id": "774",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain the difference between `bind`, `call`, and `apply`.",
    "answer": "`call` and `apply` invoke functions immediately with a specified `this`; `bind` returns a new function with bound `this`."
  },
  {
    "id": "775",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the purpose of the `yield` keyword?",
    "answer": "Used in generator functions to pause and resume execution, returning a value each time."
  },
  {
    "id": "776",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you implement a polyfill?",
    "answer": "By checking if a feature exists and providing your own implementation if it doesn’t."
  },
  {
    "id": "777",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between the DOMContentLoaded and load events?",
    "answer": "DOMContentLoaded fires when the DOM is fully parsed; load fires after all resources like images are fully loaded."
  },
  {
    "id": "778",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain the concept of currying in JavaScript.",
    "answer": "Currying transforms a function with multiple arguments into a sequence of functions each taking a single argument."
  },
  {
    "id": "779",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are the new features introduced in ES6?",
    "answer": "Let/const, arrow functions, template literals, destructuring, classes, modules, promises, and more."
  },
  {
    "id": "780",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you check for an object's own properties?",
    "answer": "Using `Object.hasOwnProperty()` or `Object.hasOwn()` in newer specs."
  },
  {
    "id": "781",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are the drawbacks of using `eval()`?",
    "answer": "Security risks, performance issues, and debugging difficulties."
  },
  {
    "id": "782",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain how `async`/`await` simplifies promise handling.",
    "answer": "It lets you write asynchronous code in a synchronous style, making it easier to read and maintain."
  },
  {
    "id": "783",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are the main differences between `var`, `let`, and `const`?",
    "answer": "`var` is function-scoped and hoisted, `let` and `const` are block-scoped; `const` cannot be reassigned."
  },
  {
    "id": "784",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you detect the type of a variable?",
    "answer": "Using `typeof` for primitives, `instanceof` for objects, or `Object.prototype.toString.call()` for more precise checks."
  },
  {
    "id": "785",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is event delegation and why is it useful?",
    "answer": "Attaching a single event listener to a parent to handle events on its children, reducing memory and improving performance."
  },
  {
    "id": "786",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you shallow copy an array or object?",
    "answer": "Using spread operator `[...]` for arrays and `{...}` for objects or methods like `Array.slice()`."
  },
  {
    "id": "787",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is a closure and when would you use it?",
    "answer": "A function that remembers variables from its lexical scope even when executed outside that scope."
  },
  {
    "id": "788",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain hoisting in JavaScript.",
    "answer": "Variable and function declarations are moved to the top of their scope before code execution."
  },
  {
    "id": "789",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the module pattern?",
    "answer": "A design pattern that encapsulates private variables and exposes public methods, often implemented with IIFEs."
  },
  {
    "id": "790",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How does JavaScript handle multiple identical keys in an object literal?",
    "answer": "The last property with the same key overwrites previous ones."
  },
  {
    "id": "791",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are generator functions and their benefits?",
    "answer": "Functions that can pause execution and resume later, useful for managing async workflows or implementing iterators."
  },
  {
    "id": "792",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you use default parameters in functions?",
    "answer": "Specify default values in function signatures, e.g., `function fn(a = 1) {}`."
  },
  {
    "id": "793",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain the difference between deep and shallow copy.",
    "answer": "Shallow copy copies top-level properties; deep copy recursively clones nested objects."
  },
  {
    "id": "794",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `==` and `===`?",
    "answer": "`==` compares with type coercion; `===` compares without coercion (strict equality)."
  },
  {
    "id": "795",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How can you create private variables in JavaScript classes?",
    "answer": "Using `#` prefix for private fields or closures inside constructors."
  },
  {
    "id": "796",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is event bubbling and event capturing?",
    "answer": "Event bubbling propagates events from target up to ancestors; capturing goes from ancestors down to target."
  },
  {
    "id": "797",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you detect if an object is an array?",
    "answer": "Using `Array.isArray()` or `Object.prototype.toString.call()`."
  },
  {
    "id": "798",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between function declarations and function expressions?",
    "answer": "Declarations are hoisted and can be called before definition; expressions are not hoisted."
  },
  {
    "id": "799",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain how you would handle errors in asynchronous JavaScript code.",
    "answer": "Use `.catch()` on promises or try/catch inside async functions."
  },
  {
    "id": "800",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the role of the `this` keyword in JavaScript?",
    "answer": "`this` refers to the object that is the current execution context, varying based on how the function is called."
  },
  {
    "id": "801",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are promises and how do they improve asynchronous programming?",
    "answer": "Promises represent the eventual completion or failure of an async operation, allowing cleaner chaining and error handling."
  },
  {
    "id": "802",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between synchronous and asynchronous code?",
    "answer": "Synchronous code blocks execution until complete; asynchronous code allows other tasks to run while waiting for completion."
  },
  {
    "id": "803",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do arrow functions affect the value of `this`?",
    "answer": "Arrow functions do not have their own `this`; they inherit it lexically from the surrounding scope."
  },
  {
    "id": "804",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is function hoisting in JavaScript?",
    "answer": "Function declarations are hoisted, meaning their definitions are moved to the top of their scope before execution."
  },
  {
    "id": "805",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you shallow copy an object in JavaScript?",
    "answer": "Using the spread operator `{...obj}` or `Object.assign({}, obj)`."
  },
  {
    "id": "806",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `null` and `undefined`?",
    "answer": "`null` is an assigned empty value, `undefined` means a variable has been declared but not assigned."
  },
  {
    "id": "807",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain the concept of closures with an example.",
    "answer": "A closure is a function that remembers the variables from its creation scope, e.g., a function returning another function that accesses outer variables."
  },
  {
    "id": "808",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are template literals and how are they used?",
    "answer": "Template literals are string literals allowing embedded expressions using backticks, e.g., `Hello ${name}`."
  },
  {
    "id": "809",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How does the event loop work in JavaScript?",
    "answer": "It handles the execution of code, callbacks, and async operations by managing task queues and the call stack."
  },
  {
    "id": "810",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are JavaScript data types?",
    "answer": "Primitive types (string, number, boolean, null, undefined, symbol, bigint) and objects."
  },
  {
    "id": "811",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How does destructuring assignment work in JavaScript?",
    "answer": "It extracts values from arrays or properties from objects into distinct variables."
  },
  {
    "id": "812",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `for...in` and `for...of` loops?",
    "answer": "`for...in` iterates over enumerable property names; `for...of` iterates over iterable values."
  },
  {
    "id": "813",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you prevent object mutation in JavaScript?",
    "answer": "Use `Object.freeze()` to make an object immutable."
  },
  {
    "id": "814",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the spread operator and how is it used?",
    "answer": "It expands iterables into individual elements, useful for arrays and object literals."
  },
  {
    "id": "815",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain how default parameters work in functions.",
    "answer": "Parameters can have default values if no argument or undefined is passed."
  },
  {
    "id": "816",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the purpose of the `typeof` operator?",
    "answer": "Returns a string indicating the type of the operand."
  },
  {
    "id": "817",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you create and use a JavaScript Promise?",
    "answer": "By creating a new Promise with `new Promise((resolve, reject) => { })` and using `.then()` and `.catch()`."
  },
  {
    "id": "818",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `Object.keys()`, `Object.values()`, and `Object.entries()`?",
    "answer": "`keys()` returns an array of property names, `values()` returns values, and `entries()` returns [key, value] pairs."
  },
  {
    "id": "819",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are higher-order functions?",
    "answer": "Functions that take other functions as arguments or return them."
  },
  {
    "id": "820",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How can you debounce a function in JavaScript?",
    "answer": "By using a timer to delay function execution until a specified wait time after the last call."
  },
  {
    "id": "821",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `map()`, `filter()`, and `reduce()`?",
    "answer": "`map()` transforms array elements, `filter()` selects elements based on a condition, `reduce()` accumulates array values into one."
  },
  {
    "id": "822",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you clone an array in JavaScript?",
    "answer": "Using `slice()`, spread operator `[...arr]`, or `Array.from()`."
  },
  {
    "id": "823",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the use of `Array.prototype.some()`?",
    "answer": "Checks if at least one element passes the provided test function."
  },
  {
    "id": "824",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain how JavaScript handles type coercion.",
    "answer": "Automatically converts types to match expected operations, sometimes leading to unexpected results."
  },
  {
    "id": "825",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `setTimeout` and `requestAnimationFrame`?",
    "answer": "`setTimeout` schedules code after a delay; `requestAnimationFrame` schedules code to run before the next repaint."
  },
  {
    "id": "826",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you handle exceptions in JavaScript?",
    "answer": "Using `try...catch` blocks."
  },
  {
    "id": "827",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the use of the `new` keyword?",
    "answer": "Creates a new object instance from a constructor function or class."
  },
  {
    "id": "828",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How can you check if a variable is undefined?",
    "answer": "Using `typeof variable === 'undefined'` or `variable === undefined`."
  },
  {
    "id": "829",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are JavaScript modules and how do you use them?",
    "answer": "Files that export/import code to encapsulate and reuse functionality, using `export` and `import` keywords."
  },
  {
    "id": "830",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between synchronous and asynchronous iteration?",
    "answer": "Synchronous iteration uses `for...of`; asynchronous iteration uses `for await...of` for promises."
  },
  {
    "id": "831",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you make a function return multiple values?",
    "answer": "By returning an array or an object with multiple values."
  },
  {
    "id": "832",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are template strings and how do they differ from regular strings?",
    "answer": "Template strings allow embedded expressions and multiline strings using backticks."
  },
  {
    "id": "833",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How can you check if a property exists in an object?",
    "answer": "Using the `in` operator or `hasOwnProperty` method."
  },
  {
    "id": "834",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the `arguments` object?",
    "answer": "An array-like object available inside functions containing all passed arguments."
  },
  {
    "id": "835",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `null` and `undefined`?",
    "answer": "`null` is an explicit assignment indicating no value; `undefined` means a variable has not been assigned."
  },
  {
    "id": "836",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain the difference between `Function.prototype.call` and `Function.prototype.apply`.",
    "answer": "`call` invokes a function with arguments passed individually; `apply` uses an array of arguments."
  },
  {
    "id": "837",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the event propagation in JavaScript?",
    "answer": "The order in which events are received on elements, including capturing, target, and bubbling phases."
  },
  {
    "id": "838",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How can you create a read-only property on an object?",
    "answer": "Using `Object.defineProperty()` with `writable: false`."
  },
  {
    "id": "839",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `var`, `let`, and `const`?",
    "answer": "`var` is function-scoped and hoisted, `let` and `const` are block-scoped; `const` cannot be reassigned."
  },
  {
    "id": "840",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you handle asynchronous operations in JavaScript?",
    "answer": "Using callbacks, promises, async/await syntax."
  },
  {
    "id": "841",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are async functions and how do they work?",
    "answer": "Functions declared with `async` return a promise and allow `await` to pause execution until a promise resolves."
  },
  {
    "id": "842",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain the use of `Promise.all()`.",
    "answer": "It takes an array of promises and returns a new promise that resolves when all input promises resolve or rejects if any fail."
  },
  {
    "id": "843",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is event delegation?",
    "answer": "Attaching a single event listener to a parent element to handle events on its children using event bubbling."
  },
  {
    "id": "844",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you create a private variable in JavaScript?",
    "answer": "Using closures or the new `#` syntax for private class fields."
  },
  {
    "id": "845",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `==` and `===`?",
    "answer": "`==` performs type coercion before comparison; `===` compares without coercion (strict equality)."
  },
  {
    "id": "846",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the purpose of the `bind()` method?",
    "answer": "It creates a new function with `this` bound to a specified object."
  },
  {
    "id": "847",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain what a generator function is.",
    "answer": "A function that can pause and resume execution using `yield` to produce a sequence of values."
  },
  {
    "id": "848",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How can you memoize a function in JavaScript?",
    "answer": "By caching results of expensive function calls and returning cached results for the same inputs."
  },
  {
    "id": "849",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is a JavaScript Symbol?",
    "answer": "A unique and immutable primitive value used as an object property key to avoid name collisions."
  },
  {
    "id": "850",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How does the `this` keyword behave in different contexts?",
    "answer": "In a method, `this` refers to the owner object; in a function, it depends on call context; arrow functions inherit `this` lexically."
  },
  {
    "id": "851",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the module pattern?",
    "answer": "A design pattern that encapsulates private and public members using closures, providing a modular structure."
  },
  {
    "id": "852",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `call()`, `apply()`, and `bind()`?",
    "answer": "`call()` and `apply()` invoke a function immediately with different argument styles; `bind()` returns a new bound function."
  },
  {
    "id": "853",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How can you detect if a variable is an array?",
    "answer": "Using `Array.isArray(variable)`."
  },
  {
    "id": "854",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is a callback hell and how can it be avoided?",
    "answer": "Nested callbacks making code hard to read; avoided by using promises or async/await."
  },
  {
    "id": "855",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain the difference between shallow and deep copy.",
    "answer": "Shallow copy duplicates the first level only; deep copy duplicates all nested objects."
  },
  {
    "id": "856",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you throttle a function?",
    "answer": "Limit the function execution to once every specified time interval."
  },
  {
    "id": "857",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the purpose of `Object.freeze()`?",
    "answer": "To prevent modifications to an object (making it immutable)."
  },
  {
    "id": "858",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are Proxies in JavaScript?",
    "answer": "Objects that define custom behavior for fundamental operations (like property lookup or assignment)."
  },
  {
    "id": "859",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain the concept of event bubbling and capturing.",
    "answer": "Bubbling propagates events from child to parent; capturing propagates from parent to child."
  },
  {
    "id": "860",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is a pure function?",
    "answer": "A function that returns the same output for the same inputs and has no side effects."
  },
  {
    "id": "861",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you handle memory leaks in JavaScript?",
    "answer": "By removing references to unused objects, avoiding global variables, and cleaning up event listeners."
  },
  {
    "id": "862",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `setInterval` and `setTimeout`?",
    "answer": "`setInterval` runs repeatedly at intervals; `setTimeout` runs once after a delay."
  },
  {
    "id": "863",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the Temporal Dead Zone?",
    "answer": "The period between entering a scope and when a variable declared with `let` or `const` is initialized, during which accessing it throws an error."
  },
  {
    "id": "864",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are WeakMap and WeakSet?",
    "answer": "Collections that hold weak references to objects, allowing garbage collection if no other references exist."
  },
  {
    "id": "865",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How can you implement inheritance in JavaScript?",
    "answer": "Using prototypes or ES6 classes with `extends`."
  },
  {
    "id": "866",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between a constructor function and a factory function?",
    "answer": "Constructor functions use `new` to create instances; factory functions return new objects without `new`."
  },
  {
    "id": "867",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain the difference between synchronous and asynchronous errors.",
    "answer": "Synchronous errors occur during code execution; asynchronous errors happen in async operations and must be handled with promises or callbacks."
  },
  {
    "id": "868",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the significance of the `__proto__` property?",
    "answer": "It references the object's prototype, used for inheritance."
  },
  {
    "id": "869",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you create a custom iterable in JavaScript?",
    "answer": "By defining a `[Symbol.iterator]` method that returns an iterator object."
  },
  {
    "id": "870",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `function` declarations and function expressions?",
    "answer": "Declarations are hoisted and can be called before definition; expressions are not hoisted."
  },
  {
    "id": "871",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you detect memory leaks caused by closures?",
    "answer": "By identifying functions that hold references to large objects no longer needed."
  },
  {
    "id": "872",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the use of `Symbol.iterator`?",
    "answer": "It defines the default iterator for an object, enabling it to be iterable in loops."
  },
  {
    "id": "873",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you merge two objects in JavaScript?",
    "answer": "Using `Object.assign()` or spread operator `{...obj1, ...obj2}`."
  },
  {
    "id": "874",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is event loop starvation?",
    "answer": "When long-running synchronous code blocks the event loop, preventing async callbacks from executing."
  },
  {
    "id": "875",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is tail call optimization?",
    "answer": "An optimization where the last function call of a function reuses the current stack frame, preventing stack growth."
  },
  {
    "id": "876",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How does JavaScript's garbage collection work?",
    "answer": "It automatically frees memory by removing objects no longer reachable from the root references."
  },
  {
    "id": "877",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between `JSON.stringify()` and `JSON.parse()`?",
    "answer": "`stringify()` converts JavaScript objects to JSON strings; `parse()` converts JSON strings back to objects."
  },
  {
    "id": "878",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain the concept of promises chaining.",
    "answer": "Attaching multiple `.then()` handlers where each returns a new promise allowing sequential async operations."
  },
  {
    "id": "879",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the use of `async/await` over plain promises?",
    "answer": "Provides cleaner, more readable asynchronous code that looks synchronous."
  },
  {
    "id": "880",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How can you avoid callback hell?",
    "answer": "By using promises or async/await to write linear, readable async code."
  },
  {
    "id": "881",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between property descriptors and attributes?",
    "answer": "Property descriptors define configuration like writable, enumerable, configurable for object properties."
  },
  {
    "id": "882",
    "category": "html",
    "difficulty": "easy",
    "question": "What does HTML stand for?",
    "answer": "HTML stands for HyperText Markup Language."
  },
  {
    "id": "883",
    "category": "html",
    "difficulty": "easy",
    "question": "What is the purpose of the `<head>` element in HTML?",
    "answer": "The `<head>` contains meta-information about the document, like its title, character set, styles, and scripts."
  },
  {
    "id": "884",
    "category": "html",
    "difficulty": "easy",
    "question": "What is the difference between `<div>` and `<span>` elements?",
    "answer": "`<div>` is a block-level element used for grouping content, while `<span>` is inline and used for styling parts of text."
  },
  {
    "id": "885",
    "category": "html",
    "difficulty": "easy",
    "question": "What are semantic HTML elements? Give examples.",
    "answer": "Elements that convey meaning about content, such as `<article>`, `<section>`, `<header>`, `<footer>`, and `<nav>`."
  },
  {
    "id": "886",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the role of the `<meta charset='UTF-8'>` tag?",
    "answer": "It specifies the character encoding for the HTML document, ensuring correct display of characters."
  },
  {
    "id": "887",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you make a website mobile-friendly using HTML?",
    "answer": "By using the viewport meta tag and responsive design techniques."
  },
  {
    "id": "888",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain the difference between ordered and unordered lists.",
    "answer": "Ordered lists (`<ol>`) are numbered, unordered lists (`<ul>`) use bullets."
  },
  {
    "id": "889",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `alt` attribute in images?",
    "answer": "Provides alternative text for images, important for accessibility and SEO."
  },
  {
    "id": "890",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you include a JavaScript file in an HTML document?",
    "answer": "Using the `<script src='path/to/file.js'></script>` tag."
  },
  {
    "id": "891",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between block-level and inline elements?",
    "answer": "Block-level elements take up the full width and start on a new line; inline elements flow within text."
  },
  {
    "id": "892",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you create a hyperlink that opens in a new tab?",
    "answer": "By adding `target='_blank'` attribute to the `<a>` tag."
  },
  {
    "id": "893",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the role of the `<form>` element?",
    "answer": "It defines an HTML form for user input."
  },
  {
    "id": "894",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain the difference between `id` and `class` attributes.",
    "answer": "`id` is unique per page; `class` can be shared by multiple elements."
  },
  {
    "id": "895",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the use of the `<label>` element in forms?",
    "answer": "It defines a label for an input element, improving accessibility."
  },
  {
    "id": "896",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you embed a video in an HTML page?",
    "answer": "Using the `<video>` tag with `src` attribute and optional controls."
  },
  {
    "id": "897",
    "category": "html",
    "difficulty": "medium",
    "question": "What are data attributes and how are they used?",
    "answer": "Custom attributes prefixed with `data-` to store extra data on elements."
  },
  {
    "id": "898",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain the difference between the `<section>` and `<div>` elements.",
    "answer": "`<section>` is semantic and groups related content; `<div>` is a generic container."
  },
  {
    "id": "899",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you make a form input required?",
    "answer": "By adding the `required` attribute to the input element."
  },
  {
    "id": "900",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `<head>` vs `<body>` elements?",
    "answer": "`<head>` contains meta and setup info; `<body>` contains the actual content displayed."
  },
  {
    "id": "901",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify a character encoding for an HTML document?",
    "answer": "Using the `<meta charset='UTF-8'>` tag in the head."
  },
  {
    "id": "902",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `<input type='text'>` and `<textarea>`?",
    "answer": "`<input type='text'>` is a single-line text input; `<textarea>` allows multi-line input."
  },
  {
    "id": "903",
    "category": "html",
    "difficulty": "medium",
    "question": "What are void elements? Give examples.",
    "answer": "Elements that do not have closing tags, like `<img>`, `<br>`, `<input>`."
  },
  {
    "id": "904",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain the use of the `<canvas>` element.",
    "answer": "It provides a drawable region for graphics via JavaScript."
  },
  {
    "id": "905",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `href` and `src` attributes?",
    "answer": "`href` specifies the link destination; `src` specifies the source of embedded content."
  },
  {
    "id": "906",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you add comments in HTML?",
    "answer": "Using `<!-- comment here -->` syntax."
  },
  {
    "id": "907",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `lang` attribute in the `<html>` tag?",
    "answer": "Specifies the language of the document for accessibility and SEO."
  },
  {
    "id": "908",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create a dropdown list in HTML?",
    "answer": "Using the `<select>` element with nested `<option>` elements."
  },
  {
    "id": "909",
    "category": "html",
    "difficulty": "medium",
    "question": "What are the global attributes in HTML?",
    "answer": "Attributes common to all HTML elements, like `id`, `class`, `style`, `title`, and `data-*`."
  },
  {
    "id": "910",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `<iframe>` and `<embed>`?",
    "answer": "`<iframe>` embeds another HTML page; `<embed>` embeds external content like PDFs or videos."
  },
  {
    "id": "911",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you disable a form input?",
    "answer": "By adding the `disabled` attribute to the input element."
  },
  {
    "id": "912",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the use of the `<noscript>` tag?",
    "answer": "Defines alternate content displayed when JavaScript is disabled."
  },
  {
    "id": "913",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain the difference between absolute and relative URLs.",
    "answer": "Absolute URLs include the full path; relative URLs are relative to the current page."
  },
  {
    "id": "914",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `<blockquote>` element?",
    "answer": "Used for indicating a section quoted from another source."
  },
  {
    "id": "915",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create a checkbox and radio buttons?",
    "answer": "Using `<input type='checkbox'>` for checkboxes and `<input type='radio'>` for radio buttons."
  },
  {
    "id": "916",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `id` and `name` attributes in form elements?",
    "answer": "`id` is used for identification and label association; `name` is used to submit form data."
  },
  {
    "id": "917",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `defer` attribute in script tags?",
    "answer": "It delays script execution until the HTML document has been parsed."
  },
  {
    "id": "918",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create an ordered list starting at a number other than 1?",
    "answer": "By using the `start` attribute on the `<ol>` tag."
  },
  {
    "id": "919",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the use of the `download` attribute in anchor tags?",
    "answer": "It tells the browser to download the linked resource instead of navigating to it."
  },
  {
    "id": "920",
    "category": "html",
    "difficulty": "medium",
    "question": "What are microdata attributes in HTML?",
    "answer": "Attributes that allow embedding metadata within HTML content for better SEO."
  },
  {
    "id": "921",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify a placeholder text in input fields?",
    "answer": "Using the `placeholder` attribute."
  },
  {
    "id": "922",
    "category": "html",
    "difficulty": "medium",
    "question": "What does the `contenteditable` attribute do?",
    "answer": "It makes an element's content editable directly by the user."
  },
  {
    "id": "923",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you include a favicon in an HTML document?",
    "answer": "Using `<link rel='icon' href='path/to/favicon.ico'>` inside the `<head>`."
  },
  {
    "id": "924",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between the `<b>` and `<strong>` tags?",
    "answer": "`<b>` applies bold styling without semantic meaning; `<strong>` indicates important text."
  },
  {
    "id": "925",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain the difference between `<i>` and `<em>` tags.",
    "answer": "`<i>` italicizes text without emphasis; `<em>` indicates emphasized text with semantic meaning."
  },
  {
    "id": "926",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the use of the `autocomplete` attribute in form elements?",
    "answer": "It suggests whether the browser should enable autofill for the input."
  },
  {
    "id": "927",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you make a form reset button?",
    "answer": "Using `<button type='reset'>` or `<input type='reset'>`."
  },
  {
    "id": "928",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `<script async>` and `<script defer>`?",
    "answer": "`async` loads and executes the script as soon as possible; `defer` loads the script and executes it after parsing."
  },
  {
    "id": "929",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you embed a Google Map in an HTML page?",
    "answer": "Using an `<iframe>` with the Google Maps embed URL."
  },
  {
    "id": "930",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the use of the `<output>` element?",
    "answer": "It represents the result of a calculation or user action."
  },
  {
    "id": "931",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify a character set other than UTF-8?",
    "answer": "By changing the charset value in `<meta charset='value'>`, e.g. `ISO-8859-1`."
  },
  {
    "id": "932",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain the difference between `<article>` and `<section>`.",
    "answer": "`<article>` is for self-contained content; `<section>` is for grouping related content."
  },
  {
    "id": "933",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `hidden` attribute?",
    "answer": "It hides the element from the page but keeps it in the DOM."
  },
  {
    "id": "934",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you make an HTML element draggable?",
    "answer": "By setting the `draggable='true'` attribute."
  },
  {
    "id": "935",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the use of the `<progress>` element?",
    "answer": "It displays progress of a task, like a progress bar."
  },
  {
    "id": "936",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify the default selected option in a dropdown?",
    "answer": "Add the `selected` attribute to the desired `<option>` element."
  },
  {
    "id": "937",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `<fieldset>` and `<legend>` elements?",
    "answer": "`<fieldset>` groups related inputs; `<legend>` provides a caption for the group."
  },
  {
    "id": "938",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you embed audio in an HTML page?",
    "answer": "Using the `<audio>` tag with `src` and optional `controls` attribute."
  },
  {
    "id": "939",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain the difference between the `<link>` and `<style>` tags.",
    "answer": "`<link>` references external stylesheets; `<style>` contains internal CSS."
  },
  {
    "id": "940",
    "category": "html",
    "difficulty": "medium",
    "question": "What does the `sandbox` attribute do in `<iframe>`?",
    "answer": "It applies extra restrictions for security, like disabling scripts or forms."
  },
  {
    "id": "941",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you add metadata for social media sharing?",
    "answer": "Using Open Graph (`og:`) meta tags in the `<head>` section."
  },
  {
    "id": "942",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `<template>` element?",
    "answer": "It holds HTML that isn’t rendered immediately but can be cloned via JavaScript."
  },
  {
    "id": "943",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you make a table accessible?",
    "answer": "Use proper `<th>` for headers, scope attributes, and captions."
  },
  {
    "id": "944",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the use of the `rel` attribute in the `<a>` tag?",
    "answer": "Defines the relationship between the linked resource and the current document."
  },
  {
    "id": "945",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify language direction in HTML?",
    "answer": "Using the `dir` attribute, values can be `ltr`, `rtl`, or `auto`."
  },
  {
    "id": "946",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between the `<code>`, `<pre>`, and `<samp>` tags?",
    "answer": "`<code>` displays inline code, `<pre>` preserves whitespace for blocks, `<samp>` shows sample output."
  },
  {
    "id": "947",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you force a page to refresh without cache?",
    "answer": "By adding meta tags or using HTTP headers like `Cache-Control` set to `no-cache`."
  },
  {
    "id": "948",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain how to make an image responsive in HTML.",
    "answer": "Use CSS properties like `max-width: 100%` and `height: auto` or use the `srcset` attribute."
  },
  {
    "id": "949",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the use of the `sandbox` attribute in `<iframe>`?",
    "answer": "It enables an extra set of restrictions for the content inside the iframe for security."
  },
  {
    "id": "950",
    "category": "html",
    "difficulty": "medium",
    "question": "What does the `tabindex` attribute do?",
    "answer": "Controls the tab order for keyboard navigation."
  },
  {
    "id": "951",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify multiple classes for an element?",
    "answer": "By listing class names separated by spaces in the `class` attribute."
  },
  {
    "id": "952",
    "category": "html",
    "difficulty": "medium",
    "question": "What are ARIA roles and why are they important?",
    "answer": "ARIA roles define accessibility semantics for assistive technologies."
  },
  {
    "id": "953",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you include a CSS file in an HTML document?",
    "answer": "Using `<link rel='stylesheet' href='path/to/file.css'>` in the `<head>`."
  },
  {
    "id": "954",
    "category": "html",
    "difficulty": "medium",
    "question": "What does the `<base>` tag do in HTML?",
    "answer": "Specifies the base URL for all relative URLs in the document."
  },
  {
    "id": "955",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you make a button submit a form?",
    "answer": "By using `<button type='submit'>` inside a `<form>`."
  },
  {
    "id": "956",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `<main>` and `<section>`?",
    "answer": "`<main>` represents the dominant content; `<section>` groups thematic content."
  },
  {
    "id": "957",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you add tooltips to elements?",
    "answer": "Using the `title` attribute."
  },
  {
    "id": "958",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the use of the `<details>` and `<summary>` elements?",
    "answer": "`<details>` creates a collapsible block; `<summary>` defines its visible heading."
  },
  {
    "id": "959",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you specify input type for dates?",
    "answer": "Using `<input type='date'>`."
  },
  {
    "id": "960",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `name` and `id` attributes in HTML?",
    "answer": "`name` is used for form submission; `id` is used for unique identification and CSS/JS."
  },
  {
    "id": "961",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain how to optimize HTML for SEO.",
    "answer": "Use semantic tags, meaningful titles, meta descriptions, alt attributes, and structured data."
  },
  {
    "id": "962",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the function of the `<meta name='viewport'>` tag?",
    "answer": "Controls layout on mobile browsers by setting the viewport size and scale."
  },
  {
    "id": "963",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `<iframe>` and `<embed>`?",
    "answer": "`<iframe>` embeds another HTML page inside the current page; `<embed>` is for embedding external resources like PDFs, videos, or plugins."
  },
  {
    "id": "964",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create a semantic footer in HTML?",
    "answer": "Use the `<footer>` tag, which typically contains copyright, contact info, or links."
  },
  {
    "id": "965",
    "category": "html",
    "difficulty": "medium",
    "question": "What does the `loading='lazy'` attribute do in `<img>` and `<iframe>`?",
    "answer": "It defers loading the resource until it’s near the viewport, improving performance."
  },
  {
    "id": "966",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you define custom data attributes in HTML and access them in JavaScript?",
    "answer": "Add attributes starting with `data-` like `data-id='123'`. Access with `element.dataset.id` in JS."
  },
  {
    "id": "967",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `<nav>` element?",
    "answer": "Defines a section for navigation links."
  },
  {
    "id": "968",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you make text selectable or unselectable in HTML?",
    "answer": "Use CSS properties `user-select: text` to enable and `user-select: none` to disable selection."
  },
  {
    "id": "969",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify a form to open in a new tab when submitted?",
    "answer": "Set the form’s `target` attribute to `_blank`."
  },
  {
    "id": "970",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `meta name='description'` and `meta property='og:description'`?",
    "answer": "`description` is used by search engines; `og:description` is for social media sharing previews."
  },
  {
    "id": "971",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you implement an accessible skip link in HTML?",
    "answer": "Add an `<a href='#main' class='skip-link'>Skip to content</a>` for keyboard users to bypass navigation."
  },
  {
    "id": "972",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `section` and `div`?",
    "answer": "`section` is semantic grouping of related content; `div` is a generic container with no semantic meaning."
  },
  {
    "id": "973",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you embed a video using the `<video>` tag with fallback content?",
    "answer": "Use `<video controls><source src='video.mp4' type='video/mp4'>Fallback text</video>`."
  },
  {
    "id": "974",
    "category": "html",
    "difficulty": "medium",
    "question": "What attributes can you use with the `<input type='file'>` element?",
    "answer": "Attributes like `accept`, `multiple`, `capture` to specify file types, multiple files, or capture directly."
  },
  {
    "id": "975",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the use of the `<mark>` tag?",
    "answer": "Highlights text, typically used for search terms or relevant info."
  },
  {
    "id": "976",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain the difference between relative and absolute URLs.",
    "answer": "Relative URLs depend on the current page’s URL; absolute URLs include the full path starting with the protocol."
  },
  {
    "id": "977",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you include a web font in HTML?",
    "answer": "Use `<link>` in `<head>` to import from services like Google Fonts or use `@font-face` in CSS."
  },
  {
    "id": "978",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the use of the `<cite>` element?",
    "answer": "Represents a reference to a creative work, like a book or article."
  },
  {
    "id": "979",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create a responsive iframe?",
    "answer": "Wrap iframe in a container with CSS aspect-ratio or use padding hacks for responsiveness."
  },
  {
    "id": "980",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `nowrap` and `pre` white-space values?",
    "answer": "`nowrap` prevents line breaks but collapses whitespace; `pre` preserves whitespace and line breaks."
  },
  {
    "id": "981",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you force a link to open in a new tab securely?",
    "answer": "Use `target='_blank'` with `rel='noopener noreferrer'` to prevent security risks."
  },
  {
    "id": "982",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the function of the `<abbr>` tag?",
    "answer": "Represents an abbreviation or acronym with an optional tooltip for full expansion."
  },
  {
    "id": "983",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you disable autocomplete for a specific input?",
    "answer": "Set `autocomplete='off'` on the input element."
  },
  {
    "id": "984",
    "category": "html",
    "difficulty": "medium",
    "question": "What does the `form` attribute do in input elements?",
    "answer": "Associates the input with a form by its `id`, allowing placement outside the form tag."
  },
  {
    "id": "985",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create a horizontal line in HTML?",
    "answer": "Using the `<hr>` tag."
  },
  {
    "id": "986",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `<meta http-equiv='refresh'>` tag?",
    "answer": "Automatically refreshes or redirects the page after a specified time."
  },
  {
    "id": "987",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you make an element visually hidden but accessible to screen readers?",
    "answer": "Use CSS techniques like `position: absolute; width: 1px; height: 1px; overflow: hidden;` or `sr-only` classes."
  },
  {
    "id": "988",
    "category": "html",
    "difficulty": "medium",
    "question": "What does the `<wbr>` tag do?",
    "answer": "Indicates a position where the browser can optionally break a word to wrap text."
  },
  {
    "id": "989",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you define a character encoding for a document?",
    "answer": "Using `<meta charset='UTF-8'>` in the `<head>` section."
  },
  {
    "id": "990",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `block`, `inline`, and `inline-block` elements?",
    "answer": "`block` takes full width and starts on a new line; `inline` flows with text; `inline-block` flows inline but can have width/height."
  },
  {
    "id": "991",
    "category": "html",
    "difficulty": "medium",
    "question": "What attribute would you use to define an image as decorative?",
    "answer": "Set `alt=''` (empty alt) to mark it as decorative for screen readers."
  },
  {
    "id": "992",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create a checkbox group with a single label?",
    "answer": "Wrap checkboxes in a `<fieldset>` with a `<legend>` describing the group."
  },
  {
    "id": "993",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain the use of the `required` attribute in form elements.",
    "answer": "It marks an input as mandatory for form submission."
  },
  {
    "id": "994",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you preload important resources in HTML?",
    "answer": "Using `<link rel='preload' href='file' as='resource-type'>`."
  },
  {
    "id": "995",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the use of the `<time>` element?",
    "answer": "Represents a specific time or date, often machine-readable."
  },
  {
    "id": "996",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify a language for a document or element?",
    "answer": "Using the `lang` attribute, e.g. `<html lang='en'>` or `<p lang='fr'>`."
  },
  {
    "id": "997",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `<label>` and placeholder text?",
    "answer": "Labels remain visible describing the input; placeholders disappear when user types."
  },
  {
    "id": "998",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you group options inside a `<select>` dropdown?",
    "answer": "Using the `<optgroup>` tag with a label attribute."
  },
  {
    "id": "999",
    "category": "html",
    "difficulty": "medium",
    "question": "What does the `novalidate` attribute do in a form?",
    "answer": "Disables built-in HTML5 form validation on submission."
  },
  {
    "id": "1000",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you add comments in HTML?",
    "answer": "Using `<!-- comment text -->`."
  },
  {
    "id": "1001",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `<strong>` and `<b>` tags?",
    "answer": "`<strong>` indicates importance and is semantic; `<b>` is purely stylistic for bold text."
  },
  {
    "id": "1002",
    "category": "html",
    "difficulty": "medium",
    "question": "How does the `<details>` and `<summary>` elements work?",
    "answer": "`<details>` creates a collapsible content block, and `<summary>` defines the visible heading."
  },
  {
    "id": "1003",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `<output>` element?",
    "answer": "Represents the result of a calculation or user action."
  },
  {
    "id": "1004",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you use the `<picture>` element for responsive images?",
    "answer": "Define multiple `<source>` elements with different media queries and fallback `<img>`."
  },
  {
    "id": "1005",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the function of the `aria-label` attribute?",
    "answer": "Provides an accessible name to elements for screen readers."
  },
  {
    "id": "1006",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create a button that behaves like a link?",
    "answer": "Use `<button>` with JavaScript `window.location` or style `<a>` as a button."
  },
  {
    "id": "1007",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between the `id` and `class` attributes?",
    "answer": "`id` is unique per page; `class` can be shared by multiple elements."
  },
  {
    "id": "1008",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you embed SVG inline in HTML?",
    "answer": "Include `<svg>` markup directly inside HTML."
  },
  {
    "id": "1009",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the use of the `hidden` attribute?",
    "answer": "It hides an element from the page but keeps it in the DOM."
  },
  {
    "id": "1010",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you add metadata to your HTML page for social media?",
    "answer": "Use Open Graph meta tags (`og:title`, `og:description`, etc.) in `<head>`."
  },
  {
    "id": "1011",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain the difference between `iframe` sandbox attributes.",
    "answer": "Sandbox restricts iframe capabilities like scripts, forms, or same-origin access."
  },
  {
    "id": "1012",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you optimize forms for better accessibility?",
    "answer": "Use proper labels, fieldsets, aria attributes, and keyboard-friendly markup."
  },
  {
    "id": "1013",
    "category": "html",
    "difficulty": "medium",
    "question": "What does the `tabindex` attribute do?",
    "answer": "Controls keyboard navigation order and focus behavior."
  },
  {
    "id": "1014",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify a custom favicon in HTML?",
    "answer": "Use `<link rel='icon' href='path/to/favicon.ico'>` in the `<head>`."
  },
  {
    "id": "1015",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `<main>` and `<section>`?",
    "answer": "`<main>` is the primary content of the document; `<section>` is a thematic grouping."
  },
  {
    "id": "1016",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create a checkbox that toggles visibility of other elements?",
    "answer": "Use JavaScript to listen for change events and toggle element visibility."
  },
  {
    "id": "1017",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `<code>` tag?",
    "answer": "Represents inline code snippets or programming text."
  },
  {
    "id": "1018",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you define a blockquote with a citation?",
    "answer": "Use `<blockquote>` with an optional `<cite>` inside or an external citation."
  },
  {
    "id": "1019",
    "category": "html",
    "difficulty": "medium",
    "question": "What are void elements in HTML?",
    "answer": "Elements that don’t have closing tags like `<img>`, `<br>`, `<hr>`."
  },
  {
    "id": "1020",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you make an image responsive in HTML?",
    "answer": "Set CSS max-width to 100% and height auto or use the `srcset` attribute."
  },
  {
    "id": "1021",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain the use of the `contenteditable` attribute.",
    "answer": "Allows the content of an element to be edited by the user."
  },
  {
    "id": "1022",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `<sup>` and `<sub>` tags?",
    "answer": "`<sup>` for superscript text; `<sub>` for subscript text."
  },
  {
    "id": "1023",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you declare the document type in HTML5?",
    "answer": "With `<!DOCTYPE html>` at the top of the document."
  },
  {
    "id": "1024",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the role of the `<template>` tag?",
    "answer": "Holds HTML markup that isn't rendered but can be cloned and used by scripts."
  },
  {
    "id": "1025",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you include external JavaScript files in HTML?",
    "answer": "Using `<script src='file.js'></script>`."
  },
  {
    "id": "1026",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `defer` and `async` attributes on `<script>`?",
    "answer": "`defer` waits for parsing and executes after; `async` executes as soon as possible."
  },
  {
    "id": "1027",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you define a comment in HTML?",
    "answer": "Using `<!-- comment -->` syntax."
  },
  {
    "id": "1028",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain how to embed audio in HTML.",
    "answer": "Use `<audio controls><source src='audio.mp3' type='audio/mpeg'>Fallback text</audio>`."
  },
  {
    "id": "1029",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between the `<bdo>` and `<dir>` tags?",
    "answer": "`<bdo>` overrides text direction; `<dir>` is obsolete for directory lists."
  },
  {
    "id": "1030",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you prevent a form from submitting by default?",
    "answer": "Use JavaScript `event.preventDefault()` inside the submit handler."
  },
  {
    "id": "1031",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `rel='stylesheet'` and `rel='preload'`?",
    "answer": "`stylesheet` loads CSS normally; `preload` hints the browser to load resources early."
  },
  {
    "id": "1032",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create an ordered list starting from a specific number?",
    "answer": "Use `<ol start='number'>`."
  },
  {
    "id": "1033",
    "category": "html",
    "difficulty": "medium",
    "question": "What are the differences between `<section>`, `<article>`, and `<div>`?",
    "answer": "`section` groups related content, `article` is independent content, `div` is generic."
  },
  {
    "id": "1034",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the use of the `lang` attribute on elements?",
    "answer": "Defines the language of the element's content for accessibility and SEO."
  },
  {
    "id": "1035",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify a placeholder in a textarea element?",
    "answer": "Use the `placeholder` attribute."
  },
  {
    "id": "1036",
    "category": "html",
    "difficulty": "medium",
    "question": "What does the `autofocus` attribute do?",
    "answer": "Automatically focuses the element on page load."
  },
  {
    "id": "1037",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you mark up an address in HTML?",
    "answer": "Use the `<address>` element for contact information."
  },
  {
    "id": "1038",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain the purpose of the `<hr>` element.",
    "answer": "Represents a thematic break or horizontal rule in content."
  },
  {
    "id": "1039",
    "category": "html",
    "difficulty": "medium",
    "question": "What are some common ARIA roles used in HTML?",
    "answer": "Roles like `button`, `navigation`, `main`, `banner`, `contentinfo` improve accessibility."
  },
  {
    "id": "1040",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you link to a specific part of the page?",
    "answer": "Use anchor links with `href='#id'` pointing to an element with that id."
  },
  {
    "id": "1041",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `<textarea>` and `<input type='text'>`?",
    "answer": "`textarea` allows multiline input; `input type='text'` is single line."
  },
  {
    "id": "1042",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify multiple CSS classes on an element?",
    "answer": "List classes separated by spaces in the `class` attribute."
  },
  {
    "id": "1043",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `<figcaption>` element?",
    "answer": "Provides a caption for a `<figure>` element."
  },
  {
    "id": "1044",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you disable a button element?",
    "answer": "Add the `disabled` attribute to the button."
  },
  {
    "id": "1045",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain how the `download` attribute works on `<a>` elements.",
    "answer": "It tells the browser to download the linked file instead of navigating."
  },
  {
    "id": "1046",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `meta charset` and `meta viewport`?",
    "answer": "`charset` defines character encoding; `viewport` controls layout on mobile devices."
  },
  {
    "id": "1047",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you make a form element required?",
    "answer": "Add the `required` attribute."
  },
  {
    "id": "1048",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between the `<link>` and `<script>` tags?",
    "answer": "`link` imports external resources like CSS; `script` loads JavaScript."
  },
  {
    "id": "1049",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you embed a video with multiple formats for compatibility?",
    "answer": "Use `<video>` with multiple `<source>` elements for different codecs."
  },
  {
    "id": "1050",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the role of the `<nav>` element?",
    "answer": "Defines a section with navigation links."
  },
  {
    "id": "1051",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `name` and `id` attributes in form elements?",
    "answer": "`name` is used for form data submission; `id` uniquely identifies an element in the DOM."
  },
  {
    "id": "1052",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create a dropdown list in HTML?",
    "answer": "Use the `<select>` element with nested `<option>` elements."
  },
  {
    "id": "1053",
    "category": "html",
    "difficulty": "medium",
    "question": "What are data attributes in HTML and how do you use them?",
    "answer": "Custom attributes prefixed with `data-` used to store extra info accessible via JavaScript."
  },
  {
    "id": "1054",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain how the `<label>` element works with form inputs.",
    "answer": "`<label>` associates text with a form input for accessibility, linked via `for` attribute."
  },
  {
    "id": "1055",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify character encoding in an HTML document?",
    "answer": "Using `<meta charset='UTF-8'>` in the `<head>`."
  },
  {
    "id": "1056",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `button`, `submit`, and `reset` types for `<button>`?",
    "answer": "`button` is generic, `submit` submits a form, `reset` resets form fields."
  },
  {
    "id": "1057",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create a fieldset and why is it useful?",
    "answer": "Wrap inputs in `<fieldset>` to group related controls, improves accessibility."
  },
  {
    "id": "1058",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `<datalist>` element?",
    "answer": "Provides predefined options for input elements with autocomplete."
  },
  {
    "id": "1059",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you embed a Google Map in an HTML page?",
    "answer": "Use an `<iframe>` with the Google Maps embed URL."
  },
  {
    "id": "1060",
    "category": "html",
    "difficulty": "medium",
    "question": "What does the `form` attribute do on input elements?",
    "answer": "Associates an input with a form by its id, allowing inputs outside the form tag."
  },
  {
    "id": "1061",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you implement semantic HTML for articles and blog posts?",
    "answer": "Use `<article>` for self-contained content, `<section>` for grouping inside it."
  },
  {
    "id": "1062",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the use of the `accept` attribute in file input elements?",
    "answer": "Limits file types that users can select for upload."
  },
  {
    "id": "1063",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain how to use the `<progress>` element.",
    "answer": "Displays progress of a task; use `value` and `max` attributes."
  },
  {
    "id": "1064",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `<b>` and `<mark>` tags?",
    "answer": "`<b>` bolds text without semantic meaning; `<mark>` highlights text as relevant."
  },
  {
    "id": "1065",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you prevent an anchor tag from navigating?",
    "answer": "Use JavaScript `event.preventDefault()` in click event."
  },
  {
    "id": "1066",
    "category": "html",
    "difficulty": "medium",
    "question": "What are the global attributes in HTML?",
    "answer": "Attributes like `id`, `class`, `style`, `title`, `data-*` usable on almost all elements."
  },
  {
    "id": "1067",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you include an external CSS file in HTML?",
    "answer": "Using `<link rel='stylesheet' href='style.css'>` inside `<head>`."
  },
  {
    "id": "1068",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `<iframe>` element?",
    "answer": "Embeds another HTML document inside the current page."
  },
  {
    "id": "1069",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you implement lazy loading for images in HTML?",
    "answer": "Add the `loading='lazy'` attribute to `<img>` elements."
  },
  {
    "id": "1070",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `<meta name='description'>` and `<title>`?",
    "answer": "`title` sets page title shown in tab; `description` is for SEO summaries."
  },
  {
    "id": "1071",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you define a custom data attribute and access it in JavaScript?",
    "answer": "Use attributes like `data-info='value'` and access with `element.dataset.info`."
  },
  {
    "id": "1072",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain how to use the `<blockquote>` tag correctly.",
    "answer": "Wrap quoted content; optionally include a `cite` attribute for source URL."
  },
  {
    "id": "1073",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the role of the `<meta http-equiv>` attribute?",
    "answer": "Simulates HTTP headers, e.g., content-type, refresh."
  },
  {
    "id": "1074",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you include custom fonts in your HTML page?",
    "answer": "Use `<link>` to Google Fonts or `@font-face` in CSS."
  },
  {
    "id": "1075",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify a language direction in HTML?",
    "answer": "Use the `dir` attribute with values like `ltr` or `rtl`."
  },
  {
    "id": "1076",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you make an image a clickable link?",
    "answer": "Wrap the `<img>` inside an `<a>` tag."
  },
  {
    "id": "1077",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the function of the `sandbox` attribute on iframes?",
    "answer": "Restricts iframe capabilities for security, like blocking scripts."
  },
  {
    "id": "1078",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you use the `<meta viewport>` tag for responsive design?",
    "answer": "Set `<meta name='viewport' content='width=device-width, initial-scale=1'>`."
  },
  {
    "id": "1079",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `autocomplete` attribute in forms?",
    "answer": "Controls browser autofill behavior for inputs."
  },
  {
    "id": "1080",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you use the `<abbr>` element properly?",
    "answer": "Wrap abbreviations and provide full text with the `title` attribute."
  },
  {
    "id": "1081",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between block-level and inline elements?",
    "answer": "Block elements take full width and start on new lines; inline elements flow within text."
  },
  {
    "id": "1082",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create a multi-select dropdown in HTML?",
    "answer": "Add the `multiple` attribute to the `<select>` element."
  },
  {
    "id": "1083",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the use of the `<canvas>` element?",
    "answer": "Provides a drawable area for graphics via JavaScript."
  },
  {
    "id": "1084",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify a favicon in an HTML document?",
    "answer": "Use `<link rel='icon' href='favicon.ico'>` in `<head>`."
  },
  {
    "id": "1085",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you add comments in HTML?",
    "answer": "Use `<!-- comment -->` syntax."
  },
  {
    "id": "1086",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `<section>` and `<div>`?",
    "answer": "`section` is semantic grouping of related content; `div` is a generic container."
  },
  {
    "id": "1087",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you disable autocomplete on form inputs?",
    "answer": "Add `autocomplete='off'` attribute to inputs or form."
  },
  {
    "id": "1088",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `<input type='text'>` and `<textarea>`?",
    "answer": "`input` is for single-line text; `textarea` is for multi-line."
  },
  {
    "id": "1089",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create a responsive table?",
    "answer": "Use CSS techniques like overflow scroll or display block on small screens."
  },
  {
    "id": "1090",
    "category": "html",
    "difficulty": "medium",
    "question": "What are void elements in HTML?",
    "answer": "Elements that do not have closing tags, e.g., `<img>`, `<input>`, `<br>`."
  },
  {
    "id": "1091",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create an accessible form?",
    "answer": "Use semantic tags, labels linked to inputs, and ARIA attributes as needed."
  },
  {
    "id": "1092",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain the use of the `role` attribute in HTML.",
    "answer": "Defines the purpose of an element to assistive technologies for accessibility."
  },
  {
    "id": "1093",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `<output>` element?",
    "answer": "Represents the result of a calculation or user action."
  },
  {
    "id": "1094",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you ensure keyboard accessibility for interactive elements?",
    "answer": "Use semantic HTML, tabindex, and keyboard event handlers."
  },
  {
    "id": "1095",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you embed audio in an HTML page?",
    "answer": "Use the `<audio>` element with `<source>` tags for different formats."
  },
  {
    "id": "1096",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between the `<main>` and `<section>` elements?",
    "answer": "`<main>` is used for the primary content unique to the page, while `<section>` groups related content."
  },
  {
    "id": "1097",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create a hidden element that is still accessible to screen readers?",
    "answer": "Use CSS with `position: absolute; left: -9999px;` or ARIA attributes like `aria-hidden='false'`."
  },
  {
    "id": "1098",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the function of the `<figure>` and `<figcaption>` elements?",
    "answer": "`<figure>` wraps media content, and `<figcaption>` provides a caption describing it."
  },
  {
    "id": "1099",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify that a form input is required?",
    "answer": "Add the `required` attribute to the input element."
  },
  {
    "id": "1100",
    "category": "html",
    "difficulty": "medium",
    "question": "What are ARIA attributes and why are they important?",
    "answer": "Attributes that enhance accessibility by providing extra info to assistive technologies."
  },
  {
    "id": "1101",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you create an accessible navigation menu?",
    "answer": "Use semantic `<nav>`, proper landmarks, focus management, and ARIA roles."
  },
  {
    "id": "1102",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain the difference between the `<header>` and `<footer>` elements.",
    "answer": "`<header>` contains introductory content or navigation; `<footer>` contains closing info or links."
  },
  {
    "id": "1103",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `tabindex` attribute?",
    "answer": "Controls keyboard navigation order and focusability of elements."
  },
  {
    "id": "1104",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you embed a video in HTML with fallback content?",
    "answer": "Use the `<video>` element with nested fallback content inside it."
  },
  {
    "id": "1105",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `iframe` and `object` elements?",
    "answer": "`iframe` embeds another webpage; `object` can embed various types like media or plugins."
  },
  {
    "id": "1106",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify a default value for a form input?",
    "answer": "Use the `value` attribute for inputs or default content inside `<textarea>`."
  },
  {
    "id": "1107",
    "category": "html",
    "difficulty": "medium",
    "question": "What are semantic tags and why are they important?",
    "answer": "Tags that clearly describe their meaning to browsers and developers, improving accessibility and SEO."
  },
  {
    "id": "1108",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you make an HTML element draggable?",
    "answer": "Add the attribute `draggable='true'` and handle drag events with JavaScript."
  },
  {
    "id": "1109",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the use of the `<template>` element?",
    "answer": "Holds inert DOM content that can be cloned and used dynamically via JavaScript."
  },
  {
    "id": "1110",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you make a form submit without a submit button?",
    "answer": "Use JavaScript to trigger form submission or add `onkeydown` event handlers."
  },
  {
    "id": "1111",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `nonce` attribute in script tags?",
    "answer": "Used to allow inline scripts when Content Security Policy is enabled."
  },
  {
    "id": "1112",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you include metadata for social media previews?",
    "answer": "Add Open Graph meta tags like `<meta property='og:title'>` and Twitter card tags."
  },
  {
    "id": "1113",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain the use of the `<time>` element.",
    "answer": "Represents dates or times, improving machine readability and accessibility."
  },
  {
    "id": "1114",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you disable a button element?",
    "answer": "Add the `disabled` attribute."
  },
  {
    "id": "1115",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `rel='stylesheet'` and `rel='preload'`?",
    "answer": "`stylesheet` loads CSS normally; `preload` hints browser to load resource early."
  },
  {
    "id": "1116",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify a base URL for relative links?",
    "answer": "Use the `<base href='URL'>` tag inside the `<head>`."
  },
  {
    "id": "1117",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `<b>` and `<strong>` tags?",
    "answer": "`<b>` is for stylistic bolding; `<strong>` indicates importance semantically."
  },
  {
    "id": "1118",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you add a tooltip to an element?",
    "answer": "Use the `title` attribute."
  },
  {
    "id": "1119",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you optimize loading of external scripts?",
    "answer": "Use `async` or `defer` attributes to control script loading."
  },
  {
    "id": "1120",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the use of the `<noscript>` tag?",
    "answer": "Displays content when JavaScript is disabled."
  },
  {
    "id": "1121",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create a description list in HTML?",
    "answer": "Use `<dl>` with `<dt>` for terms and `<dd>` for definitions."
  },
  {
    "id": "1122",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `<em>` and `<i>`?",
    "answer": "`<em>` emphasizes text semantically; `<i>` is for italic styling without emphasis."
  },
  {
    "id": "1123",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create a checkbox group in HTML?",
    "answer": "Use multiple `<input type='checkbox'>` elements with the same `name` attribute."
  },
  {
    "id": "1124",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `aria-label` attribute?",
    "answer": "Provides an accessible name for elements without visible labels."
  },
  {
    "id": "1125",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create a responsive image using `srcset`?",
    "answer": "Provide multiple image sources with different sizes inside the `srcset` attribute."
  },
  {
    "id": "1126",
    "category": "html",
    "difficulty": "medium",
    "question": "Explain the purpose of the `<link rel='manifest'>` tag.",
    "answer": "Links to a JSON file that defines a web app’s metadata for installation."
  },
  {
    "id": "1127",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `hidden` attribute?",
    "answer": "Hides an element from display and accessibility APIs."
  },
  {
    "id": "1128",
    "category": "html",
    "difficulty": "medium",
    "question": "How can you make text italic in HTML?",
    "answer": "Use `<em>` or `<i>` tags."
  },
  {
    "id": "1129",
    "category": "html",
    "difficulty": "medium",
    "question": "What does the `action` attribute do in a form?",
    "answer": "Specifies the URL where form data is sent on submission."
  },
  {
    "id": "1130",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you add multiple classes to an HTML element?",
    "answer": "List class names separated by spaces inside the `class` attribute."
  },
  {
    "id": "1131",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `id` and `class` attributes?",
    "answer": "`id` uniquely identifies an element; `class` groups elements for styling or scripting."
  },
  {
    "id": "1132",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you create a link that opens in a new tab?",
    "answer": "Add `target='_blank'` attribute to the `<a>` tag."
  },
  {
    "id": "1133",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `<meta charset='UTF-8'>` tag?",
    "answer": "Specifies the character encoding of the document."
  },
  {
    "id": "1134",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify language for an HTML document?",
    "answer": "Add `lang` attribute in the `<html>` tag, e.g., `<html lang='en'>`."
  },
  {
    "id": "1135",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the difference between `<ol>` and `<ul>`?",
    "answer": "`<ol>` is an ordered (numbered) list; `<ul>` is unordered (bulleted)."
  },
  {
    "id": "1136",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you include a web font in HTML?",
    "answer": "Use `<link>` tag to include from services like Google Fonts."
  },
  {
    "id": "1137",
    "category": "html",
    "difficulty": "medium",
    "question": "What are microdata attributes and how are they used?",
    "answer": "Attributes like `itemscope` and `itemprop` to add metadata for search engines."
  },
  {
    "id": "1138",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you set the viewport for responsive design?",
    "answer": "Add `<meta name='viewport' content='width=device-width, initial-scale=1'>`."
  },
  {
    "id": "1139",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the `<canvas>` element?",
    "answer": "Provides a drawable area for graphics via JavaScript."
  },
  {
    "id": "1140",
    "category": "html",
    "difficulty": "medium",
    "question": "How do you specify a favicon in an HTML document?",
    "answer": "Use `<link rel='icon' href='favicon.ico'>` in `<head>`."
  },
  {
    "id": "1141",
    "category": "typescript",
    "difficulty": "easy",
    "question": "What is TypeScript and why use it?",
    "answer": "TypeScript is a typed superset of JavaScript that adds static types and compiles to plain JavaScript, helping catch errors early and improve code maintainability."
  },
  {
    "id": "1142",
    "category": "typescript",
    "difficulty": "easy",
    "question": "How do you define a variable with a specific type in TypeScript?",
    "answer": "Use a colon followed by the type after the variable name, e.g., `let age: number = 30;`."
  },
  {
    "id": "1143",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are interfaces in TypeScript?",
    "answer": "Interfaces define the shape of an object, specifying property names and types without implementation."
  },
  {
    "id": "1144",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you make a property optional in an interface?",
    "answer": "Add a question mark after the property name, e.g., `name?: string;`."
  },
  {
    "id": "1145",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between `type` and `interface`?",
    "answer": "`type` can define aliases for any type including unions and primitives; `interface` is specifically for object shapes and can be extended."
  },
  {
    "id": "1146",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are union types in TypeScript?",
    "answer": "A union type allows a variable to hold more than one type, e.g., `string | number`."
  },
  {
    "id": "1147",
    "category": "typescript",
    "difficulty": "hard",
    "question": "Explain type assertion in TypeScript.",
    "answer": "Type assertion tells the compiler to treat a variable as a specific type, using syntax like `value as Type`."
  },
  {
    "id": "1148",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do generics work in TypeScript?",
    "answer": "Generics allow writing reusable components that work with various types while maintaining type safety."
  },
  {
    "id": "1149",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What is the `never` type in TypeScript?",
    "answer": "`never` represents values that never occur, used for functions that never return or throw errors."
  },
  {
    "id": "1150",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define a function with typed parameters and return type?",
    "answer": "Specify types after parameters and the return type after the parameter list, e.g., `function add(a: number, b: number): number {}`."
  },
  {
    "id": "1151",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are enums in TypeScript?",
    "answer": "Enums define a set of named constants, which can be numeric or string-based."
  },
  {
    "id": "1152",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you create a readonly property in an interface?",
    "answer": "Add the `readonly` modifier before the property name."
  },
  {
    "id": "1153",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What is type narrowing?",
    "answer": "Type narrowing refines a variable's type within a block using checks like `typeof` or `instanceof`."
  },
  {
    "id": "1154",
    "category": "typescript",
    "difficulty": "hard",
    "question": "Explain the difference between `unknown` and `any` types.",
    "answer": "`any` disables type checking; `unknown` is safer because it forces you to check the type before use."
  },
  {
    "id": "1155",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you handle nullable types in TypeScript?",
    "answer": "Use union types with `null` or `undefined`, e.g., `string | null`."
  },
  {
    "id": "1156",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of the `Partial<T>` utility type?",
    "answer": "It makes all properties in type `T` optional."
  },
  {
    "id": "1157",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you extend an interface in TypeScript?",
    "answer": "Use the `extends` keyword, e.g., `interface Child extends Parent {}`."
  },
  {
    "id": "1158",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are mapped types in TypeScript?",
    "answer": "Mapped types generate new types by transforming properties of existing types."
  },
  {
    "id": "1159",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you declare a tuple in TypeScript?",
    "answer": "A tuple is an array with fixed length and types, e.g., `[string, number]`."
  },
  {
    "id": "1160",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between `interface` and `class` in TypeScript?",
    "answer": "`interface` defines type shape without implementation; `class` is blueprint for creating objects with implementation."
  },
  {
    "id": "1161",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How can you use TypeScript with React?",
    "answer": "By typing props and state using interfaces or types and using `.tsx` files."
  },
  {
    "id": "1162",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What does `readonly` do in TypeScript arrays?",
    "answer": "Creates an immutable array that prevents modification of its elements."
  },
  {
    "id": "1163",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you catch errors in asynchronous functions with TypeScript?",
    "answer": "Use `try...catch` blocks and optionally type the error."
  },
  {
    "id": "1164",
    "category": "typescript",
    "difficulty": "hard",
    "question": "Explain conditional types in TypeScript.",
    "answer": "Types that select one of two types based on a condition, e.g., `T extends U ? X : Y`."
  },
  {
    "id": "1165",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What is the `infer` keyword used for?",
    "answer": "Used inside conditional types to infer a type variable within another type."
  },
  {
    "id": "1166",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you declare a function type in TypeScript?",
    "answer": "Use syntax like `(param: Type) => ReturnType`, e.g., `(a: number, b: number) => number`."
  },
  {
    "id": "1167",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you enforce that an object must have specific keys with known types?",
    "answer": "Define an interface or type with those keys and their types."
  },
  {
    "id": "1168",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is declaration merging in TypeScript?",
    "answer": "When multiple declarations with the same name are combined by the compiler into one."
  },
  {
    "id": "1169",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define default values for function parameters in TypeScript?",
    "answer": "Assign default values in the function signature, e.g., `function f(x = 5)`."
  },
  {
    "id": "1170",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is type inference in TypeScript?",
    "answer": "TypeScript automatically infers the type of a variable when it is declared without explicit type."
  },
  {
    "id": "1171",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you make all properties in an interface readonly?",
    "answer": "Use the `Readonly<T>` utility type."
  },
  {
    "id": "1172",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between structural typing and nominal typing?",
    "answer": "TypeScript uses structural typing where compatibility is based on the shape, not the explicit type name."
  },
  {
    "id": "1173",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you represent a function that returns nothing in TypeScript?",
    "answer": "Use the `void` return type."
  },
  {
    "id": "1174",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are intersection types?",
    "answer": "They combine multiple types into one that has all properties of the combined types, e.g., `A & B`."
  },
  {
    "id": "1175",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you handle external JavaScript libraries without type definitions?",
    "answer": "Use `declare` statements or install `@types` packages if available."
  },
  {
    "id": "1176",
    "category": "typescript",
    "difficulty": "hard",
    "question": "Explain how to create custom type guards.",
    "answer": "Create functions returning `param is Type` and use type checks inside."
  },
  {
    "id": "1177",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you type rest parameters in TypeScript?",
    "answer": "Use syntax like `(...args: number[])`."
  },
  {
    "id": "1178",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the `keyof` operator?",
    "answer": "Returns a union of keys of a given type."
  },
  {
    "id": "1179",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you exclude certain types from a union?",
    "answer": "Use the `Exclude` utility type."
  },
  {
    "id": "1180",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of the `as const` assertion?",
    "answer": "It tells TypeScript to infer the narrowest literal types instead of general types."
  },
  {
    "id": "1181",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you type an object with dynamic keys?",
    "answer": "Use index signatures like `{ [key: string]: number }`."
  },
  {
    "id": "1182",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between `interface` and `type` for object types?",
    "answer": "`interface` can be extended and merged, `type` is more flexible but cannot be merged."
  },
  {
    "id": "1183",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Can you override methods in subclasses with different types in TypeScript?",
    "answer": "Yes, but the overriding method must be compatible with the base class method's type."
  },
  {
    "id": "1184",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How does TypeScript handle enums at runtime?",
    "answer": "Enums are compiled to objects with both forward and reverse mappings for numeric enums."
  },
  {
    "id": "1185",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is declaration merging for namespaces?",
    "answer": "Multiple namespace declarations with the same name merge into a single namespace."
  },
  {
    "id": "1186",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you disable implicit any errors in TypeScript?",
    "answer": "Set `noImplicitAny` to `false` in `tsconfig.json`."
  },
  {
    "id": "1187",
    "category": "typescript",
    "difficulty": "hard",
    "question": "Explain variance in TypeScript generics.",
    "answer": "Variance describes how subtyping between complex types relates to subtyping between their components."
  },
  {
    "id": "1188",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define a class with private properties?",
    "answer": "Use the `private` keyword before properties or methods."
  },
  {
    "id": "1189",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the `unknown` type used for?",
    "answer": "Represents any value but requires type checking before use, safer than `any`."
  },
  {
    "id": "1190",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you create a readonly array?",
    "answer": "Use `ReadonlyArray<T>` or `readonly T[]` syntax."
  },
  {
    "id": "1191",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How does TypeScript's `strictNullChecks` affect type checking?",
    "answer": "It forces explicit handling of `null` and `undefined` values."
  },
  {
    "id": "1192",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you write a function overload in TypeScript?",
    "answer": "Provide multiple function declarations with different parameter types followed by a single implementation."
  },
  {
    "id": "1193",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define optional chaining in TypeScript?",
    "answer": "Use the `?.` operator to safely access nested properties without causing errors if a reference is null or undefined."
  },
  {
    "id": "1194",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between `interface` and `abstract class`?",
    "answer": "Interfaces declare type contracts without implementation; abstract classes can provide implementation and be extended."
  },
  {
    "id": "1195",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you create a discriminated union in TypeScript?",
    "answer": "Create a union of types with a common literal property to differentiate them."
  },
  {
    "id": "1196",
    "category": "typescript",
    "difficulty": "hard",
    "question": "Explain the use of the `this` keyword in TypeScript classes.",
    "answer": "`this` refers to the current instance of the class and helps with method chaining and property access."
  },
  {
    "id": "1197",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the `unknown` type and how is it different from `any`?",
    "answer": "`unknown` is a safer alternative to `any` requiring type checking before use."
  },
  {
    "id": "1198",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How can you enforce immutability in TypeScript?",
    "answer": "Use `readonly` properties and types like `Readonly<T>` or `ReadonlyArray<T>`."
  },
  {
    "id": "1199",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a type predicate in TypeScript?",
    "answer": "A function returning `param is Type` to help narrow types within conditionals."
  },
  {
    "id": "1200",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you declare and use enums with string values?",
    "answer": "Use `enum Name { A = 'a', B = 'b' }` syntax for string enums."
  },
  {
    "id": "1201",
    "category": "typescript",
    "difficulty": "hard",
    "question": "Explain the difference between nominal and structural typing in TypeScript.",
    "answer": "TypeScript uses structural typing, where compatibility depends on type shape, not explicit declarations."
  },
  {
    "id": "1202",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the `infer` keyword used for in conditional types?",
    "answer": "To extract and infer types within a conditional type expression."
  },
  {
    "id": "1203",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you create a read-only tuple?",
    "answer": "Add the `readonly` modifier, e.g., `readonly [string, number]`."
  },
  {
    "id": "1204",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you handle unknown property keys in TypeScript objects?",
    "answer": "Use index signatures like `{ [key: string]: any }`."
  },
  {
    "id": "1205",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What is the difference between `Pick<T, K>` and `Omit<T, K>` utility types?",
    "answer": "`Pick` selects a subset of properties; `Omit` excludes certain properties from a type."
  },
  {
    "id": "1206",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define a type-safe event handler in TypeScript for DOM events?",
    "answer": "Use the appropriate event type, e.g., `(event: React.ChangeEvent<HTMLInputElement>) => void`."
  },
  {
    "id": "1207",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What does the `as` keyword do in TypeScript?",
    "answer": "It performs type assertion, telling the compiler to treat a value as a specific type."
  },
  {
    "id": "1208",
    "category": "typescript",
    "difficulty": "hard",
    "question": "Explain how to create a utility type that makes all properties nullable.",
    "answer": "Use mapped types: `{ [P in keyof T]: T[P] | null }`."
  },
  {
    "id": "1209",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between `interface` and `class` in terms of implementation?",
    "answer": "`interface` only defines the shape, `class` provides actual implementation."
  },
  {
    "id": "1210",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How can you define a recursive type in TypeScript?",
    "answer": "By referencing the type name within its own definition."
  },
  {
    "id": "1211",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are conditional types and give an example?",
    "answer": "Types that depend on a condition, e.g., `T extends U ? X : Y`."
  },
  {
    "id": "1212",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you declare a variable that can be a string or a number?",
    "answer": "Use a union type: `let value: string | number;`."
  },
  {
    "id": "1213",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between `interface` and `type` aliases?",
    "answer": "`interface` can be extended and merged; `type` is more flexible but cannot be reopened."
  },
  {
    "id": "1214",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define a generic function in TypeScript?",
    "answer": "Use angle brackets with a type parameter, e.g., `function identity<T>(arg: T): T`."
  },
  {
    "id": "1215",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is type inference and how does it work in TypeScript?",
    "answer": "The compiler automatically deduces the type based on assigned values or return statements."
  },
  {
    "id": "1216",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you type an object with optional properties?",
    "answer": "Use the `?` operator in the property declaration, e.g., `name?: string`."
  },
  {
    "id": "1217",
    "category": "typescript",
    "difficulty": "hard",
    "question": "Explain intersection types with an example.",
    "answer": "Combine multiple types into one with all properties, e.g., `type A = B & C;`."
  },
  {
    "id": "1218",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the `never` type and when is it used?",
    "answer": "`never` represents values that never occur, like functions that throw or infinite loops."
  },
  {
    "id": "1219",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define readonly properties in classes?",
    "answer": "Use the `readonly` keyword before the property name."
  },
  {
    "id": "1220",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the benefits of using TypeScript with React?",
    "answer": "Better type safety for props and state, improved IDE support, and catching errors early."
  },
  {
    "id": "1221",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you handle external JavaScript libraries without types in TypeScript?",
    "answer": "Use `declare module` or install community type definitions from DefinitelyTyped."
  },
  {
    "id": "1222",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What does the `keyof` operator return?",
    "answer": "A union of the keys of the given type."
  },
  {
    "id": "1223",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you declare a tuple type with specific types?",
    "answer": "Use square brackets with types in order, e.g., `[string, number, boolean]`."
  },
  {
    "id": "1224",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the use of `as const` in TypeScript.",
    "answer": "It infers literal types and makes the value immutable."
  },
  {
    "id": "1225",
    "category": "typescript",
    "difficulty": "hard",
    "question": "How can you create a mapped type that makes all properties optional?",
    "answer": "Use `type Partial<T> = { [P in keyof T]?: T[P] }`."
  },
  {
    "id": "1226",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is type compatibility in TypeScript?",
    "answer": "Two types are compatible if their structures match according to structural typing rules."
  },
  {
    "id": "1227",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define an interface for a function type?",
    "answer": "Use call signatures, e.g., `interface Fn { (arg: string): number }`."
  },
  {
    "id": "1228",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How can you extend an interface?",
    "answer": "Use `interface NewInterface extends ExistingInterface {}`."
  },
  {
    "id": "1229",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between `type` alias and `enum`?",
    "answer": "`type` defines custom types or unions; `enum` defines a set of named constants."
  },
  {
    "id": "1230",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define a function that returns a promise in TypeScript?",
    "answer": "Use `Promise<T>` as the return type, e.g., `function fetch(): Promise<string>`."
  },
  {
    "id": "1231",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you narrow types in TypeScript?",
    "answer": "Use type guards like `typeof`, `instanceof`, or user-defined type predicates."
  },
  {
    "id": "1232",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are utility types in TypeScript?",
    "answer": "Predefined generic types like `Partial`, `Pick`, `Omit` to transform existing types."
  },
  {
    "id": "1233",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you declare a type for an array of strings?",
    "answer": "Use `string[]` or `Array<string>`."
  },
  {
    "id": "1234",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you create an alias for a union type?",
    "answer": "Use `type Name = A | B | C;`."
  },
  {
    "id": "1235",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you prevent properties from being modified in TypeScript?",
    "answer": "Use the `readonly` modifier on properties."
  },
  {
    "id": "1236",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between `null` and `undefined` in TypeScript?",
    "answer": "`undefined` means a variable has been declared but not assigned a value; `null` is an assigned value indicating 'no value'."
  },
  {
    "id": "1237",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define a generic interface?",
    "answer": "Use angle brackets with a type parameter, e.g., `interface Box<T> { value: T }`."
  },
  {
    "id": "1238",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is type assertion and when should it be used?",
    "answer": "It tells the compiler to treat a variable as a specific type, used when you know more about the variable than TypeScript."
  },
  {
    "id": "1239",
    "category": "typescript",
    "difficulty": "hard",
    "question": "Explain how to create a type-safe event handler for custom events.",
    "answer": "Define event types with generics and use them in event listener declarations to ensure correct typing."
  },
  {
    "id": "1240",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the utility of the `never` type in exhaustive checks?",
    "answer": "It helps detect unreachable code and ensures all cases are handled, especially in switch statements."
  },
  {
    "id": "1241",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you type a function with rest parameters?",
    "answer": "Use the rest syntax with a typed array, e.g., `function fn(...args: number[]): void`."
  },
  {
    "id": "1242",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between `interface` merging and `type` alias merging?",
    "answer": "Interfaces can be merged automatically by the compiler; type aliases cannot be merged."
  },
  {
    "id": "1243",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How can you enforce a function parameter to be a literal type?",
    "answer": "Use literal types or string literal unions for the parameter type."
  },
  {
    "id": "1244",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you declare a readonly array type?",
    "answer": "Use `readonly` modifier before the array type, e.g., `readonly string[]`."
  },
  {
    "id": "1245",
    "category": "typescript",
    "difficulty": "hard",
    "question": "Explain how conditional types can improve API design in TypeScript.",
    "answer": "They enable types to adapt based on inputs, allowing flexible yet type-safe APIs."
  },
  {
    "id": "1246",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the `Exclude` utility type?",
    "answer": "It creates a type by excluding from union `T` all types assignable to `U`."
  },
  {
    "id": "1247",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you ensure a property exists on an object before accessing it?",
    "answer": "Use optional chaining or explicit checks for property existence."
  },
  {
    "id": "1248",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the use of the `ReturnType<T>` utility?",
    "answer": "It extracts the return type of a function type `T`."
  },
  {
    "id": "1249",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you type a function that takes another function as an argument?",
    "answer": "Specify the parameter as a function type, e.g., `(callback: (x: number) => void) => void`."
  },
  {
    "id": "1250",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How can you represent a function that never returns in TypeScript?",
    "answer": "Declare its return type as `never`."
  },
  {
    "id": "1251",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What does the `Parameters<T>` utility type do?",
    "answer": "Extracts the parameter types of function type `T` as a tuple."
  },
  {
    "id": "1252",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you declare an index signature with number keys?",
    "answer": "Use `[key: number]: Type` syntax."
  },
  {
    "id": "1253",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between structural and nominal typing?",
    "answer": "TypeScript uses structural typing: types are compatible based on their shape, not explicit names."
  },
  {
    "id": "1254",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define a type guard function?",
    "answer": "A function returning `param is Type` to narrow down types within conditional blocks."
  },
  {
    "id": "1255",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of the `declare` keyword?",
    "answer": "To tell the compiler about variables or types defined elsewhere (e.g., global libraries)."
  },
  {
    "id": "1256",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define an intersection type?",
    "answer": "Combine multiple types using `&`, e.g., `type A = B & C`."
  },
  {
    "id": "1257",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between `unknown` and `any`?",
    "answer": "`unknown` requires type checking before use, `any` disables type checking."
  },
  {
    "id": "1258",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you enforce exhaustive checks in switch statements?",
    "answer": "Use a `never`-typed default case that throws errors if reached."
  },
  {
    "id": "1259",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are mapped types?",
    "answer": "Types created by transforming properties of another type with a mapping."
  },
  {
    "id": "1260",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you create an alias for a tuple type?",
    "answer": "Use `type Name = [Type1, Type2, ...]`."
  },
  {
    "id": "1261",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define an abstract class?",
    "answer": "Use the `abstract` keyword before the class declaration."
  },
  {
    "id": "1262",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the benefit of using literal types?",
    "answer": "They allow exact value matching, improving type safety and narrowing."
  },
  {
    "id": "1263",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you specify that a function parameter can only accept specific string values?",
    "answer": "Use string literal union types, e.g., `'start' | 'stop' | 'pause'`."
  },
  {
    "id": "1264",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How can you make all properties of a type required?",
    "answer": "Use the `Required<T>` utility type."
  },
  {
    "id": "1265",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a type alias?",
    "answer": "A new name for a type, created using the `type` keyword."
  },
  {
    "id": "1266",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you declare an enum with numeric values?",
    "answer": "Use `enum Name { A, B, C }` where values default to 0, 1, 2."
  },
  {
    "id": "1267",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you type a function that returns another function?",
    "answer": "Specify return type as a function, e.g., `() => () => string`."
  },
  {
    "id": "1268",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of the `Partial<T>` utility type?",
    "answer": "Makes all properties of `T` optional."
  },
  {
    "id": "1269",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you use `keyof` with generics?",
    "answer": "Constrain types to keys of a generic parameter using `K extends keyof T`."
  },
  {
    "id": "1270",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How can you define a type-safe wrapper for third-party libraries?",
    "answer": "Use declaration files (`.d.ts`) to specify types."
  },
  {
    "id": "1271",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between interface extension and declaration merging?",
    "answer": "Extension adds new members; declaration merging combines multiple declarations."
  },
  {
    "id": "1272",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you type a class that implements multiple interfaces?",
    "answer": "Use `class MyClass implements Interface1, Interface2 {}`."
  },
  {
    "id": "1273",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you represent optional properties in interfaces?",
    "answer": "Add a question mark, e.g., `property?: Type`."
  },
  {
    "id": "1274",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you type asynchronous functions with async/await?",
    "answer": "Declare return type as `Promise<ReturnType>`, e.g., `async function f(): Promise<string>`."
  },
  {
    "id": "1275",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How can you type discriminate union types?",
    "answer": "Use a common discriminant property to narrow types."
  },
  {
    "id": "1276",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the use of the `unknown` type over `any`?",
    "answer": "`unknown` forces type checks before usage, increasing type safety."
  },
  {
    "id": "1277",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define recursive types?",
    "answer": "Use type aliases that refer to themselves, e.g., `type Tree = { value: number; children?: Tree[] }`."
  },
  {
    "id": "1278",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you type default function parameters?",
    "answer": "Specify the type normally; defaults do not affect typing."
  },
  {
    "id": "1279",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between `interface` and `class` in TypeScript?",
    "answer": "`interface` defines shapes; `class` implements logic and structure."
  },
  {
    "id": "1280",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you type a function that accepts multiple overloads?",
    "answer": "Declare multiple function signatures before the implementation."
  },
  {
    "id": "1281",
    "category": "sass",
    "difficulty": "easy",
    "question": "What is Sass and why is it used?",
    "answer": "Sass is a CSS preprocessor that adds features like variables, nesting, and mixins to make writing CSS more efficient and maintainable."
  },
  {
    "id": "1282",
    "category": "sass",
    "difficulty": "easy",
    "question": "What is the difference between Sass and SCSS syntax?",
    "answer": "Sass uses indentation-based syntax without braces or semicolons, while SCSS is a superset of CSS with braces and semicolons."
  },
  {
    "id": "1283",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do variables work in Sass?",
    "answer": "Variables in Sass are defined with a `$` prefix and can store values like colors, fonts, or any CSS value, which can then be reused throughout the stylesheet."
  },
  {
    "id": "1284",
    "category": "sass",
    "difficulty": "medium",
    "question": "Explain nesting in Sass and its advantages.",
    "answer": "Nesting allows selectors to be nested inside one another, reflecting the HTML structure and making the stylesheet more organized and easier to read."
  },
  {
    "id": "1285",
    "category": "sass",
    "difficulty": "medium",
    "question": "What are mixins in Sass and how do you use them?",
    "answer": "Mixins are reusable blocks of code defined with `@mixin` and included with `@include`, allowing you to avoid repetition and manage styles better."
  },
  {
    "id": "1286",
    "category": "sass",
    "difficulty": "medium",
    "question": "What is the difference between `@extend` and mixins?",
    "answer": "`@extend` inherits styles from another selector, merging selectors in output, while mixins copy code and can accept parameters."
  },
  {
    "id": "1287",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you pass arguments to mixins?",
    "answer": "Define parameters inside parentheses in `@mixin` and pass values when using `@include`."
  },
  {
    "id": "1288",
    "category": "sass",
    "difficulty": "medium",
    "question": "What is a placeholder selector in Sass?",
    "answer": "Placeholders start with `%` and are used with `@extend` to share styles without outputting a CSS selector."
  },
  {
    "id": "1289",
    "category": "sass",
    "difficulty": "medium",
    "question": "Explain how control directives like `@if` and `@for` work in Sass.",
    "answer": "`@if` runs conditional code blocks; `@for` creates loops, both allowing dynamic CSS generation."
  },
  {
    "id": "1290",
    "category": "sass",
    "difficulty": "medium",
    "question": "What are the advantages of using functions in Sass?",
    "answer": "Functions help compute values dynamically, reducing duplication and increasing flexibility in styles."
  },
  {
    "id": "1291",
    "category": "sass",
    "difficulty": "medium",
    "question": "How does Sass handle importing files?",
    "answer": "Sass uses `@import` or the newer `@use` to include and modularize stylesheets, avoiding duplicate CSS output with `@use`."
  },
  {
    "id": "1292",
    "category": "sass",
    "difficulty": "medium",
    "question": "What is the difference between `@import` and `@use` in Sass?",
    "answer": "`@import` merges files and can cause duplication, while `@use` loads a module once and scopes variables to avoid conflicts."
  },
  {
    "id": "1293",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create and use maps in Sass?",
    "answer": "Maps are key-value pairs, defined with parentheses and colons, accessed with `map-get()`."
  },
  {
    "id": "1294",
    "category": "sass",
    "difficulty": "medium",
    "question": "Explain how to loop over maps in Sass.",
    "answer": "Use `@each $key, $value in $map` to iterate through map entries."
  },
  {
    "id": "1295",
    "category": "sass",
    "difficulty": "medium",
    "question": "What are some common pitfalls when using nesting in Sass?",
    "answer": "Over-nesting leads to overly specific CSS selectors, increasing CSS size and complexity."
  },
  {
    "id": "1296",
    "category": "sass",
    "difficulty": "hard",
    "question": "How do you optimize Sass for maintainability and performance?",
    "answer": "Use modular files, avoid deep nesting, prefer `@use` over `@import`, and minimize unnecessary mixins or extends."
  },
  {
    "id": "1297",
    "category": "sass",
    "difficulty": "medium",
    "question": "Can you explain the concept of ‘scope’ in Sass variables?",
    "answer": "Variables have lexical scope; those declared inside blocks are local and override outer scopes."
  },
  {
    "id": "1298",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do default values for variables work in Sass?",
    "answer": "Using `!default`, variables are assigned only if they haven’t been defined before."
  },
  {
    "id": "1299",
    "category": "sass",
    "difficulty": "medium",
    "question": "How can you create responsive design using Sass?",
    "answer": "Use mixins and media query nesting to apply styles based on viewport sizes."
  },
  {
    "id": "1300",
    "category": "sass",
    "difficulty": "medium",
    "question": "What is the role of the ampersand `&` in Sass selectors?",
    "answer": "It references the parent selector, allowing complex selector concatenation and pseudo-classes."
  },
  {
    "id": "1301",
    "category": "sass",
    "difficulty": "medium",
    "question": "How can you conditionally include styles in Sass?",
    "answer": "Use `@if` directives to include or exclude style blocks based on conditions."
  },
  {
    "id": "1302",
    "category": "sass",
    "difficulty": "medium",
    "question": "How can you debug Sass code?",
    "answer": "Use `@debug` and `@warn` directives to output messages during compilation."
  },
  {
    "id": "1303",
    "category": "sass",
    "difficulty": "medium",
    "question": "What is the difference between `lighten()` and `darken()` functions?",
    "answer": "`lighten()` increases the lightness of a color; `darken()` decreases it."
  },
  {
    "id": "1304",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create custom functions in Sass?",
    "answer": "Use `@function` to define reusable logic that returns values."
  },
  {
    "id": "1305",
    "category": "sass",
    "difficulty": "medium",
    "question": "What is the difference between `@mixin` and `@function`?",
    "answer": "`@mixin` outputs CSS rules; `@function` returns values for use in expressions."
  },
  {
    "id": "1306",
    "category": "sass",
    "difficulty": "medium",
    "question": "Explain the concept of silent classes or placeholders.",
    "answer": "Silent classes (`%placeholder`) are not output unless extended, useful for shared styles."
  },
  {
    "id": "1307",
    "category": "sass",
    "difficulty": "medium",
    "question": "How does inheritance work in Sass?",
    "answer": "Using `@extend`, selectors inherit properties from other selectors to avoid duplication."
  },
  {
    "id": "1308",
    "category": "sass",
    "difficulty": "hard",
    "question": "How do you handle large-scale Sass projects and architecture?",
    "answer": "Organize with partials, use `@use`, maintain consistent naming, and follow methodologies like BEM or SMACSS."
  },
  {
    "id": "1309",
    "category": "sass",
    "difficulty": "medium",
    "question": "What are the common functions for color manipulation in Sass?",
    "answer": "Functions like `lighten()`, `darken()`, `saturate()`, `desaturate()`, `rgba()`."
  },
  {
    "id": "1310",
    "category": "sass",
    "difficulty": "medium",
    "question": "Can you explain how to use `@content` in mixins?",
    "answer": "It allows mixins to accept blocks of styles as content for flexible code reuse."
  },
  {
    "id": "1311",
    "category": "sass",
    "difficulty": "medium",
    "question": "What is the difference between `@forward` and `@use`?",
    "answer": "`@forward` re-exports modules, while `@use` imports and scopes them."
  },
  {
    "id": "1312",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you handle theming with Sass?",
    "answer": "Use variables, maps, and mixins to define and switch between themes."
  },
  {
    "id": "1313",
    "category": "sass",
    "difficulty": "medium",
    "question": "Explain the importance of modular Sass and partials.",
    "answer": "Partials split code into manageable files, improving maintainability and reusability."
  },
  {
    "id": "1314",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you generate dynamic grid layouts using Sass?",
    "answer": "Use loops and mixins to generate grid classes with customizable columns and gaps."
  },
  {
    "id": "1315",
    "category": "sass",
    "difficulty": "medium",
    "question": "What are silent comments in Sass and how are they used?",
    "answer": "Silent comments (`//`) are not included in compiled CSS and used for developer notes."
  },
  {
    "id": "1316",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you use math operations in Sass?",
    "answer": "Sass supports operators like `+`, `-`, `*`, `/`, `%` for calculations in properties."
  },
  {
    "id": "1317",
    "category": "sass",
    "difficulty": "medium",
    "question": "Can you explain the concept of parent selector referencing `&`?",
    "answer": "It refers to the current selector, useful in nesting for pseudo-classes or modifiers."
  },
  {
    "id": "1318",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you prevent code duplication in Sass?",
    "answer": "By using mixins, placeholders, variables, and `@extend`."
  },
  {
    "id": "1319",
    "category": "sass",
    "difficulty": "hard",
    "question": "Explain how you can use Sass to implement a design system.",
    "answer": "Use variables for colors/fonts, mixins for components, and maps for spacing to build scalable styles."
  },
  {
    "id": "1320",
    "category": "sass",
    "difficulty": "medium",
    "question": "How does Sass compilation work?",
    "answer": "Sass files are processed by the compiler to generate standard CSS files."
  },
  {
    "id": "1321",
    "category": "sass",
    "difficulty": "medium",
    "question": "How can you integrate Sass with modern frontend build tools?",
    "answer": "Use loaders/plugins for tools like Webpack, Vite, or Next.js to compile Sass into CSS."
  },
  {
    "id": "1322",
    "category": "sass",
    "difficulty": "medium",
    "question": "What is the purpose of the `!global` flag in Sass variables?",
    "answer": "It forces a variable assignment in the global scope, overriding local scope."
  },
  {
    "id": "1323",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you handle vendor prefixes in Sass?",
    "answer": "Use mixins or tools like Autoprefixer to manage vendor prefixes automatically."
  },
  {
    "id": "1324",
    "category": "sass",
    "difficulty": "medium",
    "question": "Explain how to use interpolation in Sass.",
    "answer": "Interpolation `#{$variable}` injects variables into selectors or property names."
  },
  {
    "id": "1325",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you write conditional logic in Sass?",
    "answer": "Using `@if`, `@else if`, and `@else` directives."
  },
  {
    "id": "1326",
    "category": "sass",
    "difficulty": "medium",
    "question": "What are some common use cases for `@each` in Sass?",
    "answer": "Iterating over lists or maps to generate repeated styles or utility classes."
  },
  {
    "id": "1327",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you manage state-based styles using Sass?",
    "answer": "Use mixins and conditional logic to apply styles based on component states."
  },
  {
    "id": "1328",
    "category": "sass",
    "difficulty": "medium",
    "question": "How can you modularize Sass files effectively?",
    "answer": "Break styles into partials, use `@use` to import them, and keep related styles grouped by feature or component."
  },
  {
    "id": "1329",
    "category": "sass",
    "difficulty": "medium",
    "question": "What is the difference between `@debug` and `@warn` in Sass?",
    "answer": "`@debug` outputs debug messages during compilation, while `@warn` issues warnings without stopping compilation."
  },
  {
    "id": "1330",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you use Sass to manage font stacks and typography?",
    "answer": "Define font stacks as variables or maps and create mixins to apply consistent typography styles."
  },
  {
    "id": "1331",
    "category": "sass",
    "difficulty": "medium",
    "question": "How can you avoid specificity issues when using Sass nesting?",
    "answer": "Limit nesting depth and avoid nesting selectors with IDs or overly specific classes."
  },
  {
    "id": "1332",
    "category": "sass",
    "difficulty": "medium",
    "question": "Explain how `@content` can enhance mixins with examples.",
    "answer": "`@content` allows passing blocks of styles into mixins, making them more flexible and reusable."
  },
  {
    "id": "1333",
    "category": "sass",
    "difficulty": "medium",
    "question": "What is the purpose of `@forward` in Sass modules?",
    "answer": "`@forward` re-exports a module's members, letting you create public APIs for Sass libraries."
  },
  {
    "id": "1334",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create responsive utilities in Sass?",
    "answer": "Write mixins with media queries and use loops to generate utility classes for different breakpoints."
  },
  {
    "id": "1335",
    "category": "sass",
    "difficulty": "medium",
    "question": "Can you explain the difference between static and dynamic Sass functions?",
    "answer": "Static functions return fixed values; dynamic functions calculate values based on inputs."
  },
  {
    "id": "1336",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you use Sass maps to manage colors in a project?",
    "answer": "Store colors as key-value pairs and retrieve them with `map-get()` to keep color usage consistent."
  },
  {
    "id": "1337",
    "category": "sass",
    "difficulty": "medium",
    "question": "What are the benefits of using placeholders `%` over mixins for shared styles?",
    "answer": "Placeholders avoid duplicated CSS by merging selectors, while mixins copy styles each time they’re included."
  },
  {
    "id": "1338",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you handle browser support and fallbacks in Sass?",
    "answer": "Use mixins and functions to provide vendor prefixes or fallback values conditionally."
  },
  {
    "id": "1339",
    "category": "sass",
    "difficulty": "medium",
    "question": "Explain how to create theme toggling using Sass variables and maps.",
    "answer": "Define theme colors in maps and switch themes by changing which map is used in your styles."
  },
  {
    "id": "1340",
    "category": "sass",
    "difficulty": "medium",
    "question": "What is the best practice for organizing partials in a large Sass project?",
    "answer": "Group partials by features or components, keep a clear folder structure, and use `@use` for imports."
  },
  {
    "id": "1341",
    "category": "sass",
    "difficulty": "medium",
    "question": "How can Sass help in maintaining consistent spacing across a project?",
    "answer": "Use spacing variables or maps and apply them through mixins or functions for uniform spacing."
  },
  {
    "id": "1342",
    "category": "sass",
    "difficulty": "medium",
    "question": "Describe the use of `@media` queries inside Sass mixins.",
    "answer": "Encapsulate media queries within mixins to reuse responsive behavior across components."
  },
  {
    "id": "1343",
    "category": "sass",
    "difficulty": "medium",
    "question": "How does Sass improve CSS maintainability?",
    "answer": "Through variables, nesting, mixins, functions, and modular architecture that reduce repetition and improve clarity."
  },
  {
    "id": "1344",
    "category": "sass",
    "difficulty": "medium",
    "question": "What are the limitations of Sass?",
    "answer": "It can't manipulate DOM, has a compile step, and excessive nesting or poor architecture can cause bloated CSS."
  },
  {
    "id": "1345",
    "category": "sass",
    "difficulty": "medium",
    "question": "Explain how Sass handles arithmetic operations with units.",
    "answer": "Sass can add, subtract, multiply, and divide numbers with compatible units, automatically managing unit conversions."
  },
  {
    "id": "1346",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you use `@each` with lists in Sass?",
    "answer": "Loop through list items with `@each $item in $list` to generate repeated CSS rules."
  },
  {
    "id": "1347",
    "category": "sass",
    "difficulty": "medium",
    "question": "What role do conditionals play in Sass scripts?",
    "answer": "Conditionals let you generate CSS selectively based on variables or logic."
  },
  {
    "id": "1348",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you avoid duplication when using Sass mixins?",
    "answer": "Keep mixins focused and small; use placeholders for shared styles when possible."
  },
  {
    "id": "1349",
    "category": "sass",
    "difficulty": "medium",
    "question": "Can you explain the concept of `@content` blocks in mixins?",
    "answer": "They allow passing a block of CSS to be inserted inside a mixin call for flexible styles."
  },
  {
    "id": "1350",
    "category": "sass",
    "difficulty": "medium",
    "question": "How can Sass be used to build utility-first CSS?",
    "answer": "Generate utility classes dynamically using loops and mixins for common properties like margin, padding, and colors."
  },
  {
    "id": "1351",
    "category": "sass",
    "difficulty": "medium",
    "question": "What are the key benefits of using `@use` over `@import`?",
    "answer": "`@use` prevents duplicate CSS, scopes variables, and supports namespaces for better modularity."
  },
  {
    "id": "1352",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you generate classes dynamically in Sass using loops?",
    "answer": "Use `@for` or `@each` loops to create repetitive classes with variable names or values."
  },
  {
    "id": "1353",
    "category": "sass",
    "difficulty": "medium",
    "question": "Explain how to implement dark mode support with Sass.",
    "answer": "Use variables for colors and switch their values based on a `.dark` class or media queries."
  },
  {
    "id": "1354",
    "category": "sass",
    "difficulty": "medium",
    "question": "What are silent comments in Sass and why use them?",
    "answer": "Comments starting with `//` are not included in compiled CSS, useful for notes and documentation."
  },
  {
    "id": "1355",
    "category": "sass",
    "difficulty": "medium",
    "question": "How can you create reusable button styles with Sass?",
    "answer": "Define mixins or placeholders for buttons and use variables for colors, padding, and borders."
  },
  {
    "id": "1356",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you handle complex selector combinations in Sass?",
    "answer": "Use the parent selector `&` with nesting and interpolation for dynamic selectors."
  },
  {
    "id": "1357",
    "category": "sass",
    "difficulty": "medium",
    "question": "What are the common pitfalls when using `@extend`?",
    "answer": "It can create unexpected selector chains, increasing specificity and CSS size."
  },
  {
    "id": "1358",
    "category": "sass",
    "difficulty": "medium",
    "question": "Explain how to create responsive typography with Sass.",
    "answer": "Use mixins with media queries and variables for font sizes that adapt to screen sizes."
  },
  {
    "id": "1359",
    "category": "sass",
    "difficulty": "medium",
    "question": "What is the difference between `@function` and JavaScript functions?",
    "answer": "Sass functions run at compile time and return CSS values; JS functions run in the browser or server."
  },
  {
    "id": "1360",
    "category": "sass",
    "difficulty": "medium",
    "question": "How can you use Sass to create consistent grid systems?",
    "answer": "Use loops and variables to generate grid columns and gutters with customizable values."
  },
  {
    "id": "1361",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you manage z-index layers with Sass?",
    "answer": "Define z-index values as variables or maps to keep layering consistent across components."
  },
  {
    "id": "1362",
    "category": "sass",
    "difficulty": "medium",
    "question": "Explain how to use Sass with CSS custom properties (variables).",
    "answer": "Use Sass variables for static values and CSS custom properties for runtime dynamic styling."
  },
  {
    "id": "1363",
    "category": "sass",
    "difficulty": "medium",
    "question": "What are the benefits of using Sass partials?",
    "answer": "Partials modularize code, reduce duplication, and speed up development."
  },
  {
    "id": "1364",
    "category": "sass",
    "difficulty": "medium",
    "question": "How can you write DRY code with Sass?",
    "answer": "Use variables, mixins, functions, placeholders, and modular files to avoid repetition."
  },
  {
    "id": "1365",
    "category": "sass",
    "difficulty": "medium",
    "question": "What is the significance of the `!default` flag in Sass variables?",
    "answer": "It allows variables to be overridden only if they are not already assigned."
  },
  {
    "id": "1366",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create a Sass map from a list?",
    "answer": "Use functions like `map-merge` and loops to convert lists into key-value maps."
  },
  {
    "id": "1367",
    "category": "sass",
    "difficulty": "medium",
    "question": "Explain how to debug Sass code effectively.",
    "answer": "Use `@debug` statements, check compiled CSS, and simplify complex nesting."
  },
  {
    "id": "1368",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you write maintainable Sass for large teams?",
    "answer": "Follow consistent naming conventions, modularize files, document code, and avoid deep nesting."
  },
  {
    "id": "1369",
    "category": "sass",
    "difficulty": "medium",
    "question": "What is the use of the `@error` directive in Sass?",
    "answer": "It throws compilation errors when certain conditions aren't met, helping catch issues early."
  },
  {
    "id": "1370",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you write custom functions in Sass?",
    "answer": "Define `@function` blocks that take parameters and return computed values."
  },
  {
    "id": "1371",
    "category": "regex",
    "difficulty": "easy",
    "question": "What is a regular expression (regex)?",
    "answer": "A regex is a sequence of characters that defines a search pattern, mainly used for string matching and manipulation."
  },
  {
    "id": "1372",
    "category": "regex",
    "difficulty": "easy",
    "question": "What does the dot `.` symbol mean in regex?",
    "answer": "The dot matches any single character except newline characters."
  },
  {
    "id": "1373",
    "category": "regex",
    "difficulty": "easy",
    "question": "How do you match a digit using regex?",
    "answer": "Use `\\d` to match any single digit (0-9)."
  },
  {
    "id": "1374",
    "category": "regex",
    "difficulty": "easy",
    "question": "What is the difference between `+` and `*` quantifiers?",
    "answer": "`+` matches one or more occurrences, `*` matches zero or more."
  },
  {
    "id": "1375",
    "category": "regex",
    "difficulty": "easy",
    "question": "How do you specify the start and end of a string in regex?",
    "answer": "`^` matches the start, `$` matches the end."
  },
  {
    "id": "1376",
    "category": "regex",
    "difficulty": "easy",
    "question": "What are character classes in regex?",
    "answer": "Character classes, like `[abc]`, match any one character inside the brackets."
  },
  {
    "id": "1377",
    "category": "regex",
    "difficulty": "easy",
    "question": "How do you escape special characters in regex?",
    "answer": "Use a backslash `\\` before special characters like `.`, `*`, `+`, `?`, `(`, `)`, etc."
  },
  {
    "id": "1378",
    "category": "regex",
    "difficulty": "easy",
    "question": "What does the `?` quantifier mean?",
    "answer": "`?` matches zero or one occurrence of the preceding element."
  },
  {
    "id": "1379",
    "category": "regex",
    "difficulty": "easy",
    "question": "How do you create a group in regex?",
    "answer": "Use parentheses `()` to group parts of the regex."
  },
  {
    "id": "1380",
    "category": "regex",
    "difficulty": "easy",
    "question": "What is the difference between greedy and lazy quantifiers?",
    "answer": "Greedy quantifiers match as much as possible; lazy quantifiers match as little as possible."
  },
  {
    "id": "1381",
    "category": "regex",
    "difficulty": "medium",
    "question": "How do you match an email address using regex?",
    "answer": "Use a pattern like `^[\\w.-]+@[\\w.-]+\\.\\w{2,}$` but note that fully accurate email validation is complex."
  },
  {
    "id": "1382",
    "category": "regex",
    "difficulty": "medium",
    "question": "Explain lookahead assertions in regex.",
    "answer": "Lookaheads check if a pattern is followed (or not) by another pattern without consuming characters."
  },
  {
    "id": "1383",
    "category": "regex",
    "difficulty": "medium",
    "question": "What is a non-capturing group?",
    "answer": "A group `(?:...)` that groups expressions without capturing them for back-references."
  },
  {
    "id": "1384",
    "category": "regex",
    "difficulty": "medium",
    "question": "How do you use regex to validate phone numbers?",
    "answer": "Create a pattern that matches the expected format, e.g., `^\\+?\\d{1,3}?[- .]?\\(?(\\d{1,4})\\)?[- .]?\\d{1,4}[- .]?\\d{1,9}$`."
  },
  {
    "id": "1385",
    "category": "regex",
    "difficulty": "medium",
    "question": "What is the difference between `\\b` and `\\B`?",
    "answer": "`\\b` matches a word boundary; `\\B` matches a position that is not a word boundary."
  },
  {
    "id": "1386",
    "category": "regex",
    "difficulty": "medium",
    "question": "How can you reference a previously captured group?",
    "answer": "Use backreferences like `\\1`, `\\2` to refer to captured groups."
  },
  {
    "id": "1387",
    "category": "regex",
    "difficulty": "medium",
    "question": "What is the purpose of the `g` flag in JavaScript regex?",
    "answer": "The `g` flag enables global matching, allowing multiple matches in the input string."
  },
  {
    "id": "1388",
    "category": "regex",
    "difficulty": "medium",
    "question": "Explain the difference between `match()` and `test()` methods in JavaScript regex.",
    "answer": "`match()` returns matched substrings or null; `test()` returns a boolean indicating if the pattern exists."
  },
  {
    "id": "1389",
    "category": "regex",
    "difficulty": "medium",
    "question": "How do you match a URL using regex?",
    "answer": "A simplified pattern could be `(https?:\\/\\/)?([\\w.-]+)\\.([a-z]{2,6})([\\/\\w .-]*)*\\/?`."
  },
  {
    "id": "1390",
    "category": "regex",
    "difficulty": "medium",
    "question": "What is the use of `^` and `$` inside character classes?",
    "answer": "Inside `[]`, `^` negates the class; `$` has no special meaning."
  },
  {
    "id": "1391",
    "category": "regex",
    "difficulty": "medium",
    "question": "How does regex engine handle backtracking?",
    "answer": "The engine tries different match paths and backtracks on failures until a match is found or all paths fail."
  },
  {
    "id": "1392",
    "category": "regex",
    "difficulty": "medium",
    "question": "How do you match a hex color code with regex?",
    "answer": "Use `^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$`."
  },
  {
    "id": "1393",
    "category": "regex",
    "difficulty": "medium",
    "question": "What does the `i` flag do in regex?",
    "answer": "It makes the matching case-insensitive."
  },
  {
    "id": "1394",
    "category": "regex",
    "difficulty": "medium",
    "question": "How do you use regex to split a string by commas but ignore commas inside quotes?",
    "answer": "Use a more advanced pattern with lookaheads or parse manually; regex alone is tricky for nested structures."
  },
  {
    "id": "1395",
    "category": "regex",
    "difficulty": "medium",
    "question": "What is the difference between greedy and possessive quantifiers?",
    "answer": "Greedy quantifiers backtrack to find a match; possessive quantifiers don't backtrack, which can cause failures."
  },
  {
    "id": "1396",
    "category": "regex",
    "difficulty": "hard",
    "question": "How do you optimize regex for performance?",
    "answer": "Avoid excessive backtracking, use atomic groups, avoid ambiguous quantifiers, and keep patterns as specific as possible."
  },
  {
    "id": "1397",
    "category": "regex",
    "difficulty": "hard",
    "question": "Explain recursive patterns and if they're supported in JavaScript regex.",
    "answer": "Recursive patterns match nested structures; JavaScript regex does not support recursion natively."
  },
  {
    "id": "1398",
    "category": "regex",
    "difficulty": "hard",
    "question": "How can you match balanced parentheses with regex?",
    "answer": "Regex alone can't match balanced parentheses due to lack of recursion; parser or custom logic is needed."
  },
  {
    "id": "1399",
    "category": "regex",
    "difficulty": "hard",
    "question": "What are lookbehind assertions in regex?",
    "answer": "Lookbehinds assert that what precedes the current position matches a pattern; supported in modern JS with `(?<=...)`."
  },
  {
    "id": "1400",
    "category": "regex",
    "difficulty": "hard",
    "question": "How do you debug complex regex patterns?",
    "answer": "Use online tools like regex101, add comments in verbose mode, and test step-by-step."
  },
  {
    "id": "1401",
    "category": "regex",
    "difficulty": "hard",
    "question": "Explain the difference between capturing and non-capturing groups with examples.",
    "answer": "Capturing groups `()` save matched text for backreferences; non-capturing `(?:)` group without saving."
  },
  {
    "id": "1402",
    "category": "regex",
    "difficulty": "hard",
    "question": "What is the difference between `\\s` and `\\S`?",
    "answer": "`\\s` matches whitespace characters; `\\S` matches non-whitespace characters."
  },
  {
    "id": "1403",
    "category": "regex",
    "difficulty": "hard",
    "question": "How can regex be used for input sanitization?",
    "answer": "Use regex to validate allowed characters or patterns and reject unwanted input."
  },
  {
    "id": "1404",
    "category": "regex",
    "difficulty": "hard",
    "question": "Explain the difference between `.*?` and `.*`.",
    "answer": "`.*?` is lazy (matches as little as possible); `.*` is greedy (matches as much as possible)."
  },
  {
    "id": "1405",
    "category": "regex",
    "difficulty": "hard",
    "question": "How do you handle multiline strings in regex?",
    "answer": "Use the `m` flag to allow `^` and `$` to match start and end of lines, not just string."
  },
  {
    "id": "1406",
    "category": "regex",
    "difficulty": "hard",
    "question": "What are atomic groups and how do they help in regex?",
    "answer": "Atomic groups `(?>...)` prevent backtracking inside the group, improving performance."
  },
  {
    "id": "1407",
    "category": "regex",
    "difficulty": "hard",
    "question": "How can you extract all URLs from a large text using regex?",
    "answer": "Use a global regex matching URL patterns with the `g` flag and iterate over all matches."
  },
  {
    "id": "1408",
    "category": "regex",
    "difficulty": "hard",
    "question": "What is the role of the `u` flag in JavaScript regex?",
    "answer": "The `u` flag enables full Unicode matching, allowing matching of astral symbols."
  },
  {
    "id": "1409",
    "category": "regex",
    "difficulty": "hard",
    "question": "Explain how to use regex to validate JSON strings.",
    "answer": "Regex is not suitable for validating full JSON due to complexity; use parsers instead."
  },
  {
    "id": "1410",
    "category": "regex",
    "difficulty": "hard",
    "question": "How do you perform conditional matching in regex?",
    "answer": "Conditional matching `(?(condition)true-pattern|false-pattern)` is supported in some engines but not JavaScript."
  },
  {
    "id": "1411",
    "category": "regex",
    "difficulty": "hard",
    "question": "What are Unicode property escapes in regex?",
    "answer": "Syntax like `\\p{Property}` to match characters with specific Unicode properties; available with the `u` flag."
  },
  {
    "id": "1412",
    "category": "regex",
    "difficulty": "hard",
    "question": "How do you prevent catastrophic backtracking in regex?",
    "answer": "Make patterns more specific, avoid nested quantifiers, and use atomic groups or possessive quantifiers if available."
  },
  {
    "id": "1413",
    "category": "regex",
    "difficulty": "hard",
    "question": "Explain the difference between `\\w` and `[a-zA-Z0-9_]`.",
    "answer": "`\\w` matches any word character including underscore; equivalent to `[a-zA-Z0-9_]`."
  },
  {
    "id": "1414",
    "category": "regex",
    "difficulty": "hard",
    "question": "How do you match a date format like YYYY-MM-DD using regex?",
    "answer": "Use `^\\d{4}-\\d{2}-\\d{2}$` but note this does not validate the actual date values."
  },
  {
    "id": "1415",
    "category": "regex",
    "difficulty": "hard",
    "question": "What are backreferences and how are they used?",
    "answer": "Backreferences refer to previously captured groups using `\\1`, `\\2` etc., useful for matching repeated patterns."
  },
  {
    "id": "1416",
    "category": "regex",
    "difficulty": "hard",
    "question": "How do you match either 'cat' or 'dog' in regex?",
    "answer": "Use alternation: `(cat|dog)`."
  },
  {
    "id": "1417",
    "category": "regex",
    "difficulty": "hard",
    "question": "How do you strip HTML tags using regex?",
    "answer": "Use a pattern like `<[^>]*>` to match and remove tags, though regex isn't ideal for complex HTML."
  },
  {
    "id": "1418",
    "category": "regex",
    "difficulty": "hard",
    "question": "What is the purpose of the `s` flag in regex?",
    "answer": "The `s` flag makes the dot `.` match newline characters as well."
  },
  {
    "id": "1419",
    "category": "regex",
    "difficulty": "hard",
    "question": "How can regex be used for password validation?",
    "answer": "Create patterns that enforce rules like minimum length, required characters, and exclusions."
  },
  {
    "id": "1420",
    "category": "regex",
    "difficulty": "hard",
    "question": "What are the main limitations of regex?",
    "answer": "Regex can't parse nested structures well, has limited context awareness, and can be inefficient for complex tasks."
  },
  {
    "id": "1421",
    "category": "prisma",
    "difficulty": "easy",
    "question": "What is Prisma?",
    "answer": "Prisma is an ORM (Object-Relational Mapping) tool that simplifies database access in Node.js and TypeScript applications."
  },
  {
    "id": "1422",
    "category": "prisma",
    "difficulty": "easy",
    "question": "How do you define a model in Prisma schema?",
    "answer": "Models are defined using the `model` keyword in the Prisma schema file, specifying fields and their types."
  },
  {
    "id": "1423",
    "category": "prisma",
    "difficulty": "easy",
    "question": "What databases does Prisma support?",
    "answer": "Prisma supports PostgreSQL, MySQL, SQLite, SQL Server, and MongoDB."
  },
  {
    "id": "1424",
    "category": "prisma",
    "difficulty": "easy",
    "question": "How do you run migrations in Prisma?",
    "answer": "Use the command `prisma migrate dev` to create and apply migrations during development."
  },
  {
    "id": "1425",
    "category": "prisma",
    "difficulty": "easy",
    "question": "What is Prisma Client?",
    "answer": "Prisma Client is an auto-generated, type-safe query builder for your database."
  },
  {
    "id": "1426",
    "category": "prisma",
    "difficulty": "easy",
    "question": "How do you generate Prisma Client?",
    "answer": "Run `prisma generate` after defining your schema or migrations."
  },
  {
    "id": "1427",
    "category": "prisma",
    "difficulty": "easy",
    "question": "What is the Prisma schema file?",
    "answer": "It's a `.prisma` file where you define your data models, datasource, and generators."
  },
  {
    "id": "1428",
    "category": "prisma",
    "difficulty": "easy",
    "question": "How do you define relations between models in Prisma?",
    "answer": "Use fields with relation types and specify `@relation` attributes in the schema."
  },
  {
    "id": "1429",
    "category": "prisma",
    "difficulty": "easy",
    "question": "How do you perform CRUD operations with Prisma Client?",
    "answer": "Use methods like `create`, `findMany`, `update`, and `delete` on the Prisma Client instance."
  },
  {
    "id": "1430",
    "category": "prisma",
    "difficulty": "easy",
    "question": "What is Prisma Migrate?",
    "answer": "A tool to create, manage, and apply database schema migrations."
  },
  {
    "id": "1431",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you handle relations when querying with Prisma Client?",
    "answer": "Use the `include` or `select` options to fetch related records."
  },
  {
    "id": "1432",
    "category": "prisma",
    "difficulty": "medium",
    "question": "What is the difference between `include` and `select` in Prisma queries?",
    "answer": "`include` fetches related models entirely, `select` fetches specific fields."
  },
  {
    "id": "1433",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How can you handle transactions in Prisma?",
    "answer": "Use `prisma.$transaction()` to run multiple queries atomically."
  },
  {
    "id": "1434",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you implement pagination with Prisma?",
    "answer": "Use `take` and `skip` options to paginate results."
  },
  {
    "id": "1435",
    "category": "prisma",
    "difficulty": "medium",
    "question": "What is the `@id` attribute in Prisma schema?",
    "answer": "It marks a field as the primary key of the model."
  },
  {
    "id": "1436",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you define composite primary keys in Prisma?",
    "answer": "Use the `@@id` attribute on multiple fields inside the model."
  },
  {
    "id": "1437",
    "category": "prisma",
    "difficulty": "medium",
    "question": "What is Prisma's `datasource` block used for?",
    "answer": "It configures the database connection details."
  },
  {
    "id": "1438",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you use environment variables with Prisma?",
    "answer": "Reference them in the schema file using `env()` in the datasource URL."
  },
  {
    "id": "1439",
    "category": "prisma",
    "difficulty": "medium",
    "question": "What are Prisma generators?",
    "answer": "Generators create artifacts like Prisma Client based on the schema."
  },
  {
    "id": "1440",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you handle database indexes in Prisma schema?",
    "answer": "Use `@@index` or `@@unique` attributes on model fields."
  },
  {
    "id": "1441",
    "category": "prisma",
    "difficulty": "medium",
    "question": "Can Prisma work with raw SQL queries?",
    "answer": "Yes, use `prisma.$queryRaw` or `prisma.$executeRaw` for raw SQL."
  },
  {
    "id": "1442",
    "category": "prisma",
    "difficulty": "medium",
    "question": "What is the difference between `findUnique` and `findFirst`?",
    "answer": "`findUnique` finds a record by unique fields, `findFirst` returns the first match based on filters."
  },
  {
    "id": "1443",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How does Prisma handle nullability in schema?",
    "answer": "Fields are nullable by default if marked with `?` or not required."
  },
  {
    "id": "1444",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you handle migrations in production with Prisma?",
    "answer": "Use `prisma migrate deploy` to apply migrations safely."
  },
  {
    "id": "1445",
    "category": "prisma",
    "difficulty": "medium",
    "question": "What is the Prisma Studio?",
    "answer": "A GUI tool to explore and manipulate your database visually."
  },
  {
    "id": "1446",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you handle enums in Prisma schema?",
    "answer": "Define enums with the `enum` keyword and use them as field types."
  },
  {
    "id": "1447",
    "category": "prisma",
    "difficulty": "medium",
    "question": "What are some limitations of Prisma?",
    "answer": "Limited support for advanced SQL features, some database-specific quirks, and no native support for certain NoSQL databases."
  },
  {
    "id": "1448",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you handle relations with many-to-many in Prisma?",
    "answer": "Define relation tables explicitly or use implicit many-to-many relations if supported."
  },
  {
    "id": "1449",
    "category": "prisma",
    "difficulty": "medium",
    "question": "What is the purpose of the `@@map` attribute?",
    "answer": "It maps a model or field to a different database table or column name."
  },
  {
    "id": "1450",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you update multiple records with Prisma?",
    "answer": "Use `updateMany` with filters and update data."
  },
  {
    "id": "1451",
    "category": "prisma",
    "difficulty": "medium",
    "question": "Can Prisma handle soft deletes?",
    "answer": "Not natively; implement soft deletes by adding a boolean or timestamp field."
  },
  {
    "id": "1452",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How does Prisma Client ensure type safety?",
    "answer": "It generates TypeScript types based on your schema, so queries and results are strongly typed."
  },
  {
    "id": "1453",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How do you optimize Prisma queries for performance?",
    "answer": "Select only needed fields, use indexes, limit nested relations, and use raw queries when necessary."
  },
  {
    "id": "1454",
    "category": "prisma",
    "difficulty": "hard",
    "question": "What are middleware functions in Prisma?",
    "answer": "Functions that run before or after queries to modify behavior, useful for logging, validation, or auditing."
  },
  {
    "id": "1455",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How do you handle migrations conflicts in Prisma?",
    "answer": "Manually resolve migration files, rebase changes, or reset the database if needed."
  },
  {
    "id": "1456",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How does Prisma support working with MongoDB?",
    "answer": "Prisma supports MongoDB with specific features and some limitations compared to SQL databases."
  },
  {
    "id": "1457",
    "category": "prisma",
    "difficulty": "hard",
    "question": "What is the use of `prisma.$disconnect()`?",
    "answer": "It closes the database connection, important to call on app shutdown."
  },
  {
    "id": "1458",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How do you handle recursive relations in Prisma?",
    "answer": "Define relations within the same model referencing itself."
  },
  {
    "id": "1459",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How do you manage schema changes with active users in production?",
    "answer": "Use migrations carefully, deploy backward-compatible changes, and handle downtime planning."
  },
  {
    "id": "1460",
    "category": "prisma",
    "difficulty": "hard",
    "question": "What is Prisma's `previewFeatures`?",
    "answer": "Experimental features that can be enabled in the schema for early access but might be unstable."
  },
  {
    "id": "1461",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How does Prisma's query engine work under the hood?",
    "answer": "It translates Prisma Client queries into optimized SQL or MongoDB queries executed by the database."
  },
  {
    "id": "1462",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How do you handle circular dependencies in Prisma relations?",
    "answer": "Design your schema to break cycles or use optional relations to avoid strict cycles."
  },
  {
    "id": "1463",
    "category": "prisma",
    "difficulty": "hard",
    "question": "What are some best practices for Prisma schema design?",
    "answer": "Keep models simple, define explicit relations, use indexes wisely, and keep migrations small."
  },
  {
    "id": "1464",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How can you customize generated Prisma Client?",
    "answer": "Use generators with custom configs or use middleware to alter query behavior."
  },
  {
    "id": "1465",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How do you debug Prisma queries?",
    "answer": "Enable query logging with environment variables or Prisma Client options."
  },
  {
    "id": "1466",
    "category": "prisma",
    "difficulty": "hard",
    "question": "What strategies exist to seed data with Prisma?",
    "answer": "Create seed scripts using Prisma Client to insert initial data."
  },
  {
    "id": "1467",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How do you manage multiple environments with Prisma?",
    "answer": "Use different `.env` files and configure datasources accordingly."
  },
  {
    "id": "1468",
    "category": "prisma",
    "difficulty": "hard",
    "question": "What is the difference between Prisma's `findMany` and raw SQL queries in performance?",
    "answer": "`findMany` is optimized but raw SQL can be faster for complex queries."
  },
  {
    "id": "1469",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How do you use Prisma with GraphQL?",
    "answer": "Use Prisma Client in resolvers to fetch and mutate data."
  },
  {
    "id": "1470",
    "category": "prisma",
    "difficulty": "hard",
    "question": "What are the benefits of Prisma over traditional ORMs?",
    "answer": "Type safety, auto-generated clients, modern API, and good developer experience."
  },
  {
    "id": "1471",
    "category": "prisma",
    "difficulty": "easy",
    "question": "How do you install Prisma in a Node.js project?",
    "answer": "Run `npm install @prisma/client` and `npm install prisma --save-dev`."
  },
  {
    "id": "1472",
    "category": "prisma",
    "difficulty": "easy",
    "question": "What is the command to initialize a new Prisma project?",
    "answer": "Use `npx prisma init` to create the Prisma folder and initial schema."
  },
  {
    "id": "1473",
    "category": "prisma",
    "difficulty": "easy",
    "question": "Where is the Prisma schema file located by default?",
    "answer": "It is located in the `prisma/schema.prisma` file."
  },
  {
    "id": "1474",
    "category": "prisma",
    "difficulty": "easy",
    "question": "How do you specify the database provider in Prisma schema?",
    "answer": "In the `datasource` block, use `provider = \"postgresql\"` or other supported databases."
  },
  {
    "id": "1475",
    "category": "prisma",
    "difficulty": "easy",
    "question": "What does the `prisma migrate dev` command do?",
    "answer": "It creates a new migration and applies it to the database during development."
  },
  {
    "id": "1476",
    "category": "prisma",
    "difficulty": "easy",
    "question": "How do you generate Prisma Client types after schema changes?",
    "answer": "Run `npx prisma generate`."
  },
  {
    "id": "1477",
    "category": "prisma",
    "difficulty": "easy",
    "question": "Can Prisma be used with TypeScript?",
    "answer": "Yes, Prisma Client has full TypeScript support and auto-generated types."
  },
  {
    "id": "1478",
    "category": "prisma",
    "difficulty": "medium",
    "question": "What is the purpose of the `@default` attribute in Prisma schema?",
    "answer": "It sets a default value for a field when creating new records."
  },
  {
    "id": "1479",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you define optional fields in Prisma models?",
    "answer": "Append `?` to the field type to make it optional, e.g., `name String?`."
  },
  {
    "id": "1480",
    "category": "prisma",
    "difficulty": "medium",
    "question": "Explain the difference between `create` and `upsert` in Prisma Client.",
    "answer": "`create` inserts a new record; `upsert` inserts or updates if it exists."
  },
  {
    "id": "1481",
    "category": "prisma",
    "difficulty": "medium",
    "question": "What is the use of `@@unique` in Prisma schema?",
    "answer": "It enforces uniqueness on one or more fields in a model."
  },
  {
    "id": "1482",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How can you query related data with Prisma?",
    "answer": "Use the `include` option to load related models."
  },
  {
    "id": "1483",
    "category": "prisma",
    "difficulty": "medium",
    "question": "What is the `@@map` attribute used for in Prisma?",
    "answer": "It maps the model or fields to a different table or column name in the database."
  },
  {
    "id": "1484",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you perform batch updates in Prisma?",
    "answer": "Use the `updateMany` method with filter criteria."
  },
  {
    "id": "1485",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you implement many-to-many relationships in Prisma?",
    "answer": "Define relation tables explicitly or use implicit many-to-many relations supported by Prisma."
  },
  {
    "id": "1486",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How does Prisma handle cascading deletes?",
    "answer": "Define `onDelete` behavior in schema relations, such as `Cascade` or `Restrict`."
  },
  {
    "id": "1487",
    "category": "prisma",
    "difficulty": "medium",
    "question": "What is the command to reset the database in Prisma?",
    "answer": "Run `npx prisma migrate reset` to drop and recreate the database."
  },
  {
    "id": "1488",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you log Prisma Client queries?",
    "answer": "Set environment variable `DEBUG=\"prisma:client\"` or configure logging in Prisma Client options."
  },
  {
    "id": "1489",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you implement validations in Prisma schema?",
    "answer": "Use database constraints like `@unique` or custom validations in application code."
  },
  {
    "id": "1490",
    "category": "prisma",
    "difficulty": "medium",
    "question": "What is the Prisma Studio?",
    "answer": "A web-based GUI for viewing and editing database records."
  },
  {
    "id": "1491",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How can you seed a database using Prisma?",
    "answer": "Write a script that uses Prisma Client to insert initial data."
  },
  {
    "id": "1492",
    "category": "prisma",
    "difficulty": "medium",
    "question": "What is the difference between `findUnique` and `findFirst`?",
    "answer": "`findUnique` finds by unique fields; `findFirst` finds the first record matching filters."
  },
  {
    "id": "1493",
    "category": "prisma",
    "difficulty": "medium",
    "question": "How do you use raw SQL queries in Prisma?",
    "answer": "Use `prisma.$queryRaw` for SELECT queries and `prisma.$executeRaw` for other SQL commands."
  },
  {
    "id": "1494",
    "category": "prisma",
    "difficulty": "medium",
    "question": "Can Prisma work with NoSQL databases?",
    "answer": "Prisma supports MongoDB but has limited support for other NoSQL databases."
  },
  {
    "id": "1495",
    "category": "prisma",
    "difficulty": "hard",
    "question": "Explain Prisma middleware and its use cases.",
    "answer": "Middleware intercepts queries for logging, validation, or modifying behavior before/after execution."
  },
  {
    "id": "1496",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How do you handle concurrency issues with Prisma?",
    "answer": "Use transactions with `prisma.$transaction()` to ensure atomic operations."
  },
  {
    "id": "1497",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How to handle large datasets efficiently with Prisma?",
    "answer": "Use pagination with `take` and `skip`, and select only required fields."
  },
  {
    "id": "1498",
    "category": "prisma",
    "difficulty": "hard",
    "question": "What are preview features in Prisma and how do you enable them?",
    "answer": "Experimental features enabled via `previewFeatures` in the generator block in schema."
  },
  {
    "id": "1499",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How does Prisma Client caching work?",
    "answer": "Prisma Client doesn’t provide built-in caching; caching must be implemented separately."
  },
  {
    "id": "1500",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How do you optimize Prisma schema for complex queries?",
    "answer": "Use indexes, avoid unnecessary relations, and denormalize data when needed."
  },
  {
    "id": "1501",
    "category": "prisma",
    "difficulty": "hard",
    "question": "What is the recommended way to handle migrations in CI/CD pipelines with Prisma?",
    "answer": "Use `prisma migrate deploy` to apply migrations safely during deployments."
  },
  {
    "id": "1502",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How do you handle schema evolution in production without downtime?",
    "answer": "Apply backward-compatible migrations, use feature flags, and plan gradual rollouts."
  },
  {
    "id": "1503",
    "category": "prisma",
    "difficulty": "hard",
    "question": "What are some common pitfalls when using Prisma in production?",
    "answer": "Ignoring connection limits, unoptimized queries, improper migration handling, and missing error handling."
  },
  {
    "id": "1504",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How to implement soft deletes with Prisma?",
    "answer": "Add a boolean or timestamp field and filter queries to exclude deleted records."
  },
  {
    "id": "1505",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How can you debug Prisma query errors effectively?",
    "answer": "Enable detailed logging, check generated SQL, and use Prisma Studio for inspection."
  },
  {
    "id": "1506",
    "category": "prisma",
    "difficulty": "hard",
    "question": "What is the role of `prisma.$disconnect()` and when should it be used?",
    "answer": "It closes the database connection, important to call when the app shuts down."
  },
  {
    "id": "1507",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How does Prisma compare to other ORMs like TypeORM or Sequelize?",
    "answer": "Prisma focuses on type safety, auto-generation, and modern developer experience, whereas others offer broader feature sets."
  },
  {
    "id": "1508",
    "category": "prisma",
    "difficulty": "hard",
    "question": "Explain how to use Prisma with serverless functions.",
    "answer": "Initialize Prisma Client per function invocation and properly disconnect to avoid connection leaks."
  },
  {
    "id": "1509",
    "category": "prisma",
    "difficulty": "hard",
    "question": "How do you test Prisma queries in unit tests?",
    "answer": "Use an in-memory or test database, seed test data, and clean up after tests."
  },
  {
    "id": "1510",
    "category": "prisma",
    "difficulty": "hard",
    "question": "What strategies help reduce Prisma Client bundle size in frontend projects?",
    "answer": "Avoid bundling Prisma Client on the frontend; use it only on the server."
  },
  {
    "id": "1511",
    "category": "drizzle",
    "difficulty": "easy",
    "question": "What is Drizzle ORM?",
    "answer": "Drizzle ORM is a TypeScript-first ORM designed for type-safe and simple database access."
  },
  {
    "id": "1512",
    "category": "drizzle",
    "difficulty": "easy",
    "question": "Which databases does Drizzle ORM support?",
    "answer": "It supports PostgreSQL, MySQL, SQLite, and SQL Server."
  },
  {
    "id": "1513",
    "category": "drizzle",
    "difficulty": "easy",
    "question": "How do you define a table schema in Drizzle?",
    "answer": "Use the `pgTable` or `mysqlTable` functions with column definitions."
  },
  {
    "id": "1514",
    "category": "drizzle",
    "difficulty": "easy",
    "question": "How do you insert data using Drizzle ORM?",
    "answer": "Use the `insert` method on the table object."
  },
  {
    "id": "1515",
    "category": "drizzle",
    "difficulty": "easy",
    "question": "Does Drizzle ORM support TypeScript types for queries?",
    "answer": "Yes, it provides full type inference for queries and results."
  },
  {
    "id": "1516",
    "category": "drizzle",
    "difficulty": "easy",
    "question": "How do you perform a select query in Drizzle?",
    "answer": "Use the `select` method with optional filters on the table object."
  },
  {
    "id": "1517",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "What is the syntax to update a record in Drizzle?",
    "answer": "Use the `update` method with `set` and `where` clauses."
  },
  {
    "id": "1518",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How does Drizzle handle relations between tables?",
    "answer": "Relations are defined manually using foreign key columns and joined in queries."
  },
  {
    "id": "1519",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "Can you perform transactions with Drizzle ORM?",
    "answer": "Yes, Drizzle supports transactions through its query runner interface."
  },
  {
    "id": "1520",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How do you delete records in Drizzle ORM?",
    "answer": "Use the `delete` method with a `where` clause specifying records to remove."
  },
  {
    "id": "1521",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "What is the advantage of Drizzle being TypeScript-first?",
    "answer": "It reduces runtime errors by catching type mismatches at compile time."
  },
  {
    "id": "1522",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How do you handle migrations in Drizzle ORM?",
    "answer": "Drizzle provides a migration system to apply incremental schema changes."
  },
  {
    "id": "1523",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "Can you explain how to use raw SQL queries in Drizzle?",
    "answer": "Drizzle allows raw SQL queries using its `sql` tagged template literal."
  },
  {
    "id": "1524",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How does Drizzle compare to Prisma in terms of type safety?",
    "answer": "Both offer strong TypeScript integration, but Drizzle is more lightweight and minimalistic."
  },
  {
    "id": "1525",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How do you paginate results with Drizzle?",
    "answer": "Use `limit` and `offset` methods on the query builder."
  },
  {
    "id": "1526",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "Is Drizzle ORM compatible with Next.js?",
    "answer": "Yes, it can be integrated with Next.js for server-side database queries."
  },
  {
    "id": "1527",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How do you perform joins in Drizzle ORM?",
    "answer": "Use the `innerJoin`, `leftJoin`, or raw SQL with the query builder."
  },
  {
    "id": "1528",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How do you implement complex nested queries in Drizzle?",
    "answer": "Compose queries using the fluent API and subqueries with raw SQL if necessary."
  },
  {
    "id": "1529",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How does Drizzle ensure SQL injection safety?",
    "answer": "By using parameterized queries and its SQL tagged template to sanitize inputs."
  },
  {
    "id": "1530",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "Can you explain how to use transactions in Drizzle with examples?",
    "answer": "Use `db.transaction(async (trx) => { ... })` to run multiple queries atomically."
  },
  {
    "id": "1531",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How do you optimize Drizzle queries for performance?",
    "answer": "Select only required columns, use indexes, and avoid N+1 queries."
  },
  {
    "id": "1532",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "What challenges might you face when scaling Drizzle ORM?",
    "answer": "Managing complex relations manually and handling large datasets without built-in caching."
  },
  {
    "id": "1533",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "Explain how to integrate Drizzle ORM with GraphQL APIs.",
    "answer": "Use Drizzle queries inside resolvers for type-safe data fetching."
  },
  {
    "id": "1534",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How does Drizzle handle schema migrations compared to Prisma?",
    "answer": "Drizzle has a simpler migration system focusing on SQL files; Prisma uses declarative schema-based migrations."
  },
  {
    "id": "1535",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How do you handle database connection pooling with Drizzle?",
    "answer": "Configure your database driver or connection pooler outside Drizzle ORM."
  },
  {
    "id": "1536",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "What is the recommended way to handle error handling in Drizzle ORM?",
    "answer": "Catch exceptions in async functions and handle database errors gracefully."
  },
  {
    "id": "1537",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "Can Drizzle ORM be used in serverless environments? If yes, how?",
    "answer": "Yes, by initializing the connection per invocation and properly closing it."
  },
  {
    "id": "1538",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How do you handle migrations in a team environment using Drizzle?",
    "answer": "Use version control for migration files and coordinate schema changes carefully."
  },
  {
    "id": "1539",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How to handle soft deletes in Drizzle ORM?",
    "answer": "Add a boolean or timestamp column and filter queries accordingly."
  },
  {
    "id": "1540",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "Explain the process of debugging Drizzle ORM queries.",
    "answer": "Enable query logging, inspect generated SQL, and test queries independently."
  },
  {
    "id": "1541",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "What is the best practice for organizing Drizzle ORM code in a large project?",
    "answer": "Separate schema definitions, queries, and transaction logic in modular files."
  },
  {
    "id": "1542",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How does Drizzle ORM support database schema versioning?",
    "answer": "Through migration files that apply incremental SQL changes."
  },
  {
    "id": "1543",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "Can you use Drizzle ORM with NoSQL databases?",
    "answer": "No, Drizzle is designed for SQL-based relational databases only."
  },
  {
    "id": "1544",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How to use raw SQL fragments within Drizzle queries?",
    "answer": "Use the `sql` tagged template literal for inserting raw SQL safely."
  },
  {
    "id": "1545",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How does Drizzle's type inference improve developer experience?",
    "answer": "It reduces errors by providing accurate autocompletion and type checking."
  },
  {
    "id": "1546",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "What are the limitations of Drizzle ORM compared to full-featured ORMs?",
    "answer": "Less built-in relation management, no built-in caching or advanced lifecycle hooks."
  },
  {
    "id": "1547",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How do you rollback a migration in Drizzle ORM?",
    "answer": "Manually apply a rollback SQL migration; no automated rollback command."
  },
  {
    "id": "1548",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How to write unit tests for database logic using Drizzle?",
    "answer": "Use a test database instance, seed data, and clean after each test."
  },
  {
    "id": "1549",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "Explain how to handle schema synchronization issues with Drizzle.",
    "answer": "Track schema versions carefully and apply migrations in order."
  },
  {
    "id": "1550",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How to extend Drizzle ORM with custom query helpers?",
    "answer": "Write utility functions wrapping Drizzle queries to reuse complex logic."
  },
  {
    "id": "1551",
    "category": "drizzle",
    "difficulty": "easy",
    "question": "What is the basic setup process for Drizzle ORM in a new project?",
    "answer": "Install the Drizzle package, configure the database connection, and define your tables."
  },
  {
    "id": "1552",
    "category": "drizzle",
    "difficulty": "easy",
    "question": "How do you define primary keys in Drizzle table schemas?",
    "answer": "Use the `primaryKey()` method on the column definition."
  },
  {
    "id": "1553",
    "category": "drizzle",
    "difficulty": "easy",
    "question": "How to define nullable columns in Drizzle ORM?",
    "answer": "Use `.nullable()` on the column definition."
  },
  {
    "id": "1554",
    "category": "drizzle",
    "difficulty": "easy",
    "question": "What types of columns are supported by Drizzle?",
    "answer": "Common types like string, number, boolean, date, and JSON are supported."
  },
  {
    "id": "1555",
    "category": "drizzle",
    "difficulty": "easy",
    "question": "How to add default values to columns in Drizzle?",
    "answer": "Use `.default()` method in the column definition."
  },
  {
    "id": "1556",
    "category": "drizzle",
    "difficulty": "easy",
    "question": "How do you run raw SQL migrations with Drizzle?",
    "answer": "Place raw SQL files in migration folders and run them via the CLI."
  },
  {
    "id": "1557",
    "category": "drizzle",
    "difficulty": "easy",
    "question": "Can Drizzle ORM handle JSON column types?",
    "answer": "Yes, Drizzle supports JSON column types if the database supports them."
  },
  {
    "id": "1558",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How do you handle composite primary keys in Drizzle?",
    "answer": "Define multiple columns as primary keys using the `.primaryKey()` method on the table."
  },
  {
    "id": "1559",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "What is the best practice to handle ENUM types in Drizzle ORM?",
    "answer": "Use database-native enum types or define string union types in TypeScript."
  },
  {
    "id": "1560",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How to perform bulk inserts with Drizzle ORM?",
    "answer": "Pass an array of records to the `insert` method."
  },
  {
    "id": "1561",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How do you implement soft deletes with Drizzle?",
    "answer": "Add a `deletedAt` timestamp column and filter queries to exclude deleted records."
  },
  {
    "id": "1562",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How does Drizzle handle database migrations rollback?",
    "answer": "You have to manually create rollback SQL scripts; no automatic rollback."
  },
  {
    "id": "1563",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "Explain how to create indexes in Drizzle ORM.",
    "answer": "Use the `index()` method on the table or column definition."
  },
  {
    "id": "1564",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How do you handle one-to-many relationships in Drizzle?",
    "answer": "Use foreign key columns and write join queries manually."
  },
  {
    "id": "1565",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "What are the advantages of Drizzle's query builder compared to raw SQL?",
    "answer": "Type safety, better readability, and prevention of SQL injection."
  },
  {
    "id": "1566",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How do you implement transactions spanning multiple queries in Drizzle?",
    "answer": "Use the `transaction` method wrapping your queries inside an async function."
  },
  {
    "id": "1567",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "Can Drizzle ORM be used with both JavaScript and TypeScript?",
    "answer": "Yes, but it’s designed primarily with TypeScript for type safety."
  },
  {
    "id": "1568",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "How do you write conditional queries in Drizzle?",
    "answer": "Use JavaScript conditionals to add query parts dynamically."
  },
  {
    "id": "1569",
    "category": "drizzle",
    "difficulty": "medium",
    "question": "Explain how to perform raw SQL queries in Drizzle safely.",
    "answer": "Use the `sql` tagged template literal to avoid SQL injection."
  },
  {
    "id": "1570",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How would you implement a complex many-to-many relationship with Drizzle?",
    "answer": "Create a join table with foreign keys and write manual join queries."
  },
  {
    "id": "1571",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How do you optimize Drizzle ORM queries for large datasets?",
    "answer": "Use pagination, select only needed fields, and proper indexing."
  },
  {
    "id": "1572",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How do you debug generated SQL queries in Drizzle?",
    "answer": "Enable query logging or inspect SQL generated by the `sql` tagged template."
  },
  {
    "id": "1573",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How to handle database schema versioning and migrations in Drizzle in CI/CD pipelines?",
    "answer": "Apply migrations via CLI in deployment scripts before application starts."
  },
  {
    "id": "1574",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "Explain how Drizzle manages connection pooling.",
    "answer": "It relies on the underlying database driver’s pooling features."
  },
  {
    "id": "1575",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How can Drizzle ORM be extended to support custom SQL functions?",
    "answer": "Use raw SQL snippets with the `sql` template literal inside queries."
  },
  {
    "id": "1576",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How do you implement auditing (created_at, updated_at) fields in Drizzle?",
    "answer": "Add timestamp columns and update them via triggers or in application logic."
  },
  {
    "id": "1577",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "What strategies exist to avoid N+1 query problems in Drizzle?",
    "answer": "Use joins or batch queries to fetch related data in one go."
  },
  {
    "id": "1578",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How to handle migrations that require data transformations in Drizzle?",
    "answer": "Write migration scripts with raw SQL or JS to alter data during migration."
  },
  {
    "id": "1579",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How do you test Drizzle ORM database operations in integration tests?",
    "answer": "Run tests against a real or in-memory test database with seeded data."
  },
  {
    "id": "1580",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How to manage environment-specific database configurations in Drizzle projects?",
    "answer": "Use environment variables and conditional connection setups."
  },
  {
    "id": "1581",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "Explain the differences between Drizzle ORM and Prisma ORM.",
    "answer": "Drizzle is lighter, focuses on type safety and minimalism, while Prisma offers more features and ecosystem tools."
  },
  {
    "id": "1582",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How does Drizzle ORM support database transactions in serverless environments?",
    "answer": "Transactions must be initiated and completed within the single invocation."
  },
  {
    "id": "1583",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How do you manage schema synchronization issues between development and production with Drizzle?",
    "answer": "Use migration files consistently and verify schema before deployments."
  },
  {
    "id": "1584",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "What are the common pitfalls when using Drizzle ORM in large applications?",
    "answer": "Manual relation handling can get complex; lack of some automation features."
  },
  {
    "id": "1585",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How do you migrate data safely when changing column types in Drizzle?",
    "answer": "Create migration scripts with data transformations and backups."
  },
  {
    "id": "1586",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "Can you combine Drizzle ORM with raw SQL libraries like Knex?",
    "answer": "Yes, but it requires careful management to avoid conflicts."
  },
  {
    "id": "1587",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How to implement optimistic concurrency control with Drizzle ORM?",
    "answer": "Add version fields and check them during updates to prevent conflicts."
  },
  {
    "id": "1588",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "Explain how to monitor and log Drizzle ORM queries in production.",
    "answer": "Use middleware or database driver logging features."
  },
  {
    "id": "1589",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "What are the best practices for error handling in Drizzle ORM?",
    "answer": "Catch database errors, retry on transient issues, and log them appropriately."
  },
  {
    "id": "1590",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How do you implement multi-tenancy with Drizzle ORM?",
    "answer": "Separate schemas or use tenant ID columns and filter queries."
  },
  {
    "id": "1591",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How to integrate Drizzle ORM with server-side rendering frameworks like Next.js?",
    "answer": "Initialize Drizzle in API routes or server components to access database."
  },
  {
    "id": "1592",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "Can Drizzle ORM be used in a microservices architecture?",
    "answer": "Yes, each service can have its own Drizzle setup for its database."
  },
  {
    "id": "1593",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How do you ensure data integrity when using Drizzle ORM?",
    "answer": "Define constraints in the database and validate inputs in application."
  },
  {
    "id": "1594",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How to handle schema drift between multiple environments with Drizzle?",
    "answer": "Regularly apply migrations and compare schemas with tools."
  },
  {
    "id": "1595",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How do you manage connection lifecycle in serverless environments using Drizzle?",
    "answer": "Open connections inside each invocation and close after."
  },
  {
    "id": "1596",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How do you write performant pagination queries with Drizzle ORM?",
    "answer": "Use keyset pagination or limit-offset with indexes."
  },
  {
    "id": "1597",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "Explain how to use Drizzle ORM with NoSQL databases.",
    "answer": "Drizzle is mainly for SQL databases; for NoSQL, use other ORMs."
  },
  {
    "id": "1598",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How to handle migrations in a team setting with Drizzle ORM?",
    "answer": "Commit migration files and coordinate schema changes via version control."
  },
  {
    "id": "1599",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "What are the limitations of Drizzle ORM compared to Prisma?",
    "answer": "Fewer automated features like schema introspection and rich relation management."
  },
  {
    "id": "1600",
    "category": "drizzle",
    "difficulty": "hard",
    "question": "How do you extend Drizzle ORM to support new database types or drivers?",
    "answer": "By contributing to its core or writing custom adapters."
  },
  {
    "id": "1601",
    "category": "backend",
    "difficulty": "easy",
    "question": "What is Node.js and why is it used for backend development?",
    "answer": "Node.js is a runtime environment that allows running JavaScript on the server side. It's used for backend development because of its event-driven, non-blocking I/O model, which makes it efficient for handling many simultaneous connections."
  },
  {
    "id": "1602",
    "category": "backend",
    "difficulty": "easy",
    "question": "What is Express.js and how does it simplify backend development?",
    "answer": "Express.js is a minimal web framework for Node.js that simplifies routing, middleware management, and handling HTTP requests and responses, speeding up API and server development."
  },
  {
    "id": "1603",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you handle asynchronous operations in Node.js?",
    "answer": "By using callbacks, Promises, or async/await syntax to avoid blocking the event loop and manage asynchronous code efficiently."
  },
  {
    "id": "1604",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is middleware in Express.js?",
    "answer": "Middleware is a function that has access to the request and response objects, and can modify them or control the flow. It's used for tasks like logging, authentication, or parsing request bodies."
  },
  {
    "id": "1605",
    "category": "backend",
    "difficulty": "medium",
    "question": "Explain how you manage environment variables in a Node.js application.",
    "answer": "Use environment variables stored in a .env file and load them with packages like dotenv, so sensitive data like API keys and database credentials aren't hardcoded."
  },
  {
    "id": "1606",
    "category": "backend",
    "difficulty": "hard",
    "question": "How do you scale a Node.js backend application?",
    "answer": "By using clustering to fork multiple processes, load balancing, horizontal scaling with multiple servers, caching, and optimizing database queries."
  },
  {
    "id": "1607",
    "category": "backend",
    "difficulty": "hard",
    "question": "What strategies do you use to handle errors in a Node.js backend?",
    "answer": "Use try-catch with async/await, centralized error-handling middleware, proper logging, and graceful shutdown of the server."
  },
  {
    "id": "1608",
    "category": "backend",
    "difficulty": "medium",
    "question": "What are streams in Node.js and when would you use them?",
    "answer": "Streams are objects that let you read or write data piece by piece. They are useful for handling large files or network data efficiently without loading everything into memory."
  },
  {
    "id": "1609",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you secure a REST API built with Node.js and Express?",
    "answer": "Use authentication (JWT, OAuth), input validation, HTTPS, rate limiting, CORS policies, and sanitize inputs to prevent injection attacks."
  },
  {
    "id": "1610",
    "category": "backend",
    "difficulty": "easy",
    "question": "What is the event loop in Node.js?",
    "answer": "The event loop is the mechanism that handles asynchronous callbacks in Node.js, allowing non-blocking I/O by queuing events and executing them one by one."
  },
  {
    "id": "1611",
    "category": "backend",
    "difficulty": "medium",
    "question": "Explain the difference between process.nextTick(), setImmediate(), and setTimeout() in Node.js.",
    "answer": "process.nextTick() runs callbacks immediately after the current operation, before I/O events; setImmediate() runs callbacks on the next iteration of the event loop; setTimeout() schedules callbacks after a minimum delay."
  },
  {
    "id": "1612",
    "category": "backend",
    "difficulty": "hard",
    "question": "How do you implement caching in a Node.js backend?",
    "answer": "Use in-memory caches like Redis or Memcached to store frequent data or computation results, reducing database load and improving response times."
  },
  {
    "id": "1613",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is CORS and how do you handle it in Node.js?",
    "answer": "CORS (Cross-Origin Resource Sharing) controls access to resources from different domains. In Node.js, use the cors middleware to configure allowed origins, methods, and headers."
  },
  {
    "id": "1614",
    "category": "backend",
    "difficulty": "medium",
    "question": "How would you implement file uploads in an Express.js application?",
    "answer": "Use middleware like multer to handle multipart/form-data, which parses and saves uploaded files to disk or cloud storage."
  },
  {
    "id": "1615",
    "category": "backend",
    "difficulty": "hard",
    "question": "Explain how you can prevent SQL injection attacks in Node.js applications.",
    "answer": "Use parameterized queries or ORM query builders, sanitize inputs, and avoid concatenating user input directly into queries."
  },
  {
    "id": "1616",
    "category": "backend",
    "difficulty": "medium",
    "question": "What are worker threads in Node.js and when would you use them?",
    "answer": "Worker threads allow running CPU-intensive tasks in parallel, preventing the main event loop from blocking."
  },
  {
    "id": "1617",
    "category": "backend",
    "difficulty": "hard",
    "question": "Describe how to implement rate limiting in a Node.js API.",
    "answer": "Use middleware like express-rate-limit to track IP requests and block or slow down requests exceeding a threshold within a time window."
  },
  {
    "id": "1618",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the difference between process.env and config files in Node.js?",
    "answer": "process.env stores environment variables at runtime; config files hold static configuration but shouldn't contain sensitive data."
  },
  {
    "id": "1619",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you implement authentication in a Node.js backend?",
    "answer": "Use strategies like JWT tokens, session-based authentication with cookies, or OAuth flows, combined with password hashing and secure storage."
  },
  {
    "id": "1620",
    "category": "backend",
    "difficulty": "hard",
    "question": "Explain how to debug performance issues in a Node.js backend.",
    "answer": "Use profiling tools like Node.js inspector, check event loop delays, analyze CPU and memory usage, and identify blocking code."
  },
  {
    "id": "1621",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the purpose of cluster module in Node.js?",
    "answer": "The cluster module allows you to create child processes to take advantage of multi-core CPUs, enabling better concurrency."
  },
  {
    "id": "1622",
    "category": "backend",
    "difficulty": "easy",
    "question": "How do you create a REST API endpoint with Express.js?",
    "answer": "Define routes using app.get, app.post, etc., and write handler functions to process requests and send responses."
  },
  {
    "id": "1623",
    "category": "backend",
    "difficulty": "medium",
    "question": "What are some common HTTP status codes used in REST APIs?",
    "answer": "200 OK, 201 Created, 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, 500 Internal Server Error."
  },
  {
    "id": "1624",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you handle database connections in Node.js to ensure efficiency?",
    "answer": "Use connection pooling to reuse connections and avoid overhead from opening/closing connections frequently."
  },
  {
    "id": "1625",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is JWT and how does it work in authentication?",
    "answer": "JWT (JSON Web Token) is a compact token that contains claims and is signed. It's used to authenticate users without server-side session storage."
  },
  {
    "id": "1626",
    "category": "backend",
    "difficulty": "hard",
    "question": "Explain how you would implement WebSocket communication in a Node.js backend.",
    "answer": "Use libraries like socket.io or ws to establish and manage persistent bi-directional connections for real-time data transfer."
  },
  {
    "id": "1627",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you structure a Node.js project for scalability?",
    "answer": "Separate concerns into folders (routes, controllers, services, models), use environment configs, apply modular code, and follow conventions."
  },
  {
    "id": "1628",
    "category": "backend",
    "difficulty": "easy",
    "question": "What is npm and why is it important in Node.js development?",
    "answer": "npm is the package manager for Node.js, used to install and manage dependencies in a project."
  },
  {
    "id": "1629",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the difference between synchronous and asynchronous code in Node.js?",
    "answer": "Synchronous code blocks execution until complete, while asynchronous code allows other operations to run concurrently."
  },
  {
    "id": "1630",
    "category": "backend",
    "difficulty": "hard",
    "question": "How do you handle file system operations asynchronously in Node.js?",
    "answer": "Use the fs module’s async methods like fs.promises.readFile or callback-based functions to avoid blocking the event loop."
  },
  {
    "id": "1631",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the difference between PUT and PATCH HTTP methods?",
    "answer": "PUT replaces the entire resource, PATCH applies partial updates."
  },
  {
    "id": "1632",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you handle cross-site scripting (XSS) attacks in a Node.js backend?",
    "answer": "Sanitize user inputs, use templating engines that escape HTML, and set proper HTTP headers like Content Security Policy."
  },
  {
    "id": "1633",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is Helmet.js and why is it used?",
    "answer": "Helmet.js is middleware that helps secure Express apps by setting various HTTP headers to protect against common vulnerabilities."
  },
  {
    "id": "1634",
    "category": "backend",
    "difficulty": "medium",
    "question": "Explain the role of package.json in a Node.js project.",
    "answer": "package.json manages metadata about the project, dependencies, scripts, and configurations."
  },
  {
    "id": "1635",
    "category": "backend",
    "difficulty": "medium",
    "question": "How can you improve API response times in a Node.js backend?",
    "answer": "Use caching, optimize database queries, compress responses, and minimize payload size."
  },
  {
    "id": "1636",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the difference between a monolithic and microservices architecture in backend development?",
    "answer": "Monolithic architecture is a single unified codebase; microservices split functionality into independent services."
  },
  {
    "id": "1637",
    "category": "backend",
    "difficulty": "hard",
    "question": "How do you manage transactions in Node.js with databases?",
    "answer": "Use database drivers or ORMs that support transactions, wrap operations in transaction blocks, and handle commits or rollbacks properly."
  },
  {
    "id": "1638",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the use of npm scripts in Node.js?",
    "answer": "They automate common tasks like running tests, building code, or starting the server."
  },
  {
    "id": "1639",
    "category": "backend",
    "difficulty": "easy",
    "question": "How do you send JSON responses in Express?",
    "answer": "Use res.json() to send a JSON response to the client."
  },
  {
    "id": "1640",
    "category": "backend",
    "difficulty": "medium",
    "question": "What are promises in JavaScript and how do they help in backend development?",
    "answer": "Promises represent the eventual completion or failure of an asynchronous operation, making async code easier to write and manage."
  },
  {
    "id": "1641",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you validate user input on the backend?",
    "answer": "Use validation libraries like Joi or express-validator to enforce data formats and constraints."
  },
  {
    "id": "1642",
    "category": "backend",
    "difficulty": "hard",
    "question": "Explain how you would implement logging in a Node.js backend application.",
    "answer": "Use logging libraries like Winston or Bunyan, set different log levels, and output to files or external services."
  },
  {
    "id": "1643",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the purpose of the package-lock.json file?",
    "answer": "It locks the exact versions of dependencies to ensure consistent installs across environments."
  },
  {
    "id": "1644",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you handle CORS errors in development?",
    "answer": "Use the cors middleware in Express and configure allowed origins and headers appropriately."
  },
  {
    "id": "1645",
    "category": "backend",
    "difficulty": "easy",
    "question": "What is the default port for an Express.js server if none is specified?",
    "answer": "Usually, there is no default; you must specify a port explicitly (e.g., 3000)."
  },
  {
    "id": "1646",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the difference between a callback and a Promise?",
    "answer": "Callbacks are functions passed to handle async results, while Promises provide a cleaner, chainable way to handle async operations and errors."
  },
  {
    "id": "1647",
    "category": "backend",
    "difficulty": "hard",
    "question": "How do you implement Webhooks in a Node.js backend?",
    "answer": "Create an endpoint that listens for HTTP POST requests from external services and processes the payload accordingly."
  },
  {
    "id": "1648",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you prevent memory leaks in Node.js applications?",
    "answer": "Monitor and profile the app, avoid global variables, properly clean up event listeners, and manage closures carefully."
  },
  {
    "id": "1649",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the difference between GET and POST HTTP methods?",
    "answer": "GET requests retrieve data and can be cached; POST submits data to be processed and usually changes server state."
  },
  {
    "id": "1650",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you implement pagination in a backend API?",
    "answer": "Use query parameters like page and limit, and in the database query, use OFFSET and LIMIT or cursor-based pagination."
  },
  {
    "id": "1651",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the role of the package.json 'scripts' section in a Node.js project?",
    "answer": "It defines custom commands to automate tasks like testing, building, or starting the server."
  },
  {
    "id": "1652",
    "category": "backend",
    "difficulty": "easy",
    "question": "How do you read environment variables in a Node.js app?",
    "answer": "By accessing process.env.VARIABLE_NAME."
  },
  {
    "id": "1653",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is REST and why is it important for backend APIs?",
    "answer": "REST is an architectural style for designing networked applications, focusing on stateless, resource-based interactions over HTTP."
  },
  {
    "id": "1654",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you handle JSON parsing errors in Express middleware?",
    "answer": "Use error-handling middleware to catch SyntaxError thrown by JSON parsing."
  },
  {
    "id": "1655",
    "category": "backend",
    "difficulty": "hard",
    "question": "Explain how Node.js handles child processes and when you might use them.",
    "answer": "Child processes allow running separate scripts or commands concurrently, useful for CPU-heavy tasks or running external programs."
  },
  {
    "id": "1656",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the difference between blocking and non-blocking code?",
    "answer": "Blocking code halts execution until complete, non-blocking allows other operations to continue."
  },
  {
    "id": "1657",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you secure sensitive data in Node.js applications?",
    "answer": "Use environment variables, encryption, secure storage, and restrict access controls."
  },
  {
    "id": "1658",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the purpose of the 'next' function in Express middleware?",
    "answer": "It passes control to the next middleware or route handler."
  },
  {
    "id": "1659",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you implement pagination in MongoDB queries?",
    "answer": "Use skip() and limit() methods or use a cursor-based approach for better performance."
  },
  {
    "id": "1660",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the role of the 'body-parser' middleware in Express?",
    "answer": "It parses incoming request bodies and makes the data available under req.body."
  },
  {
    "id": "1661",
    "category": "backend",
    "difficulty": "easy",
    "question": "How do you start an Express server on port 3000?",
    "answer": "Use app.listen(3000, callback)."
  },
  {
    "id": "1662",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the difference between synchronous and asynchronous file reading in Node.js?",
    "answer": "Synchronous blocks execution until the file is read; asynchronous reads the file and executes a callback once done."
  },
  {
    "id": "1663",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you handle database migrations in Node.js projects?",
    "answer": "Use migration tools like Knex, Sequelize CLI, or Prisma migrate to version and apply schema changes."
  },
  {
    "id": "1664",
    "category": "backend",
    "difficulty": "hard",
    "question": "Explain event-driven architecture in Node.js.",
    "answer": "It's a design where the flow is determined by events and callbacks, enabling asynchronous processing."
  },
  {
    "id": "1665",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you configure CORS in Express for multiple origins?",
    "answer": "Use the cors middleware with an origin function that checks and allows specific origins."
  },
  {
    "id": "1666",
    "category": "backend",
    "difficulty": "easy",
    "question": "What does npm install do?",
    "answer": "It installs dependencies listed in package.json."
  },
  {
    "id": "1667",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the difference between session and token-based authentication?",
    "answer": "Sessions store data server-side; tokens (like JWT) store auth info client-side."
  },
  {
    "id": "1668",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you handle uncaught exceptions in a Node.js app?",
    "answer": "Listen for process 'uncaughtException' event and perform cleanup or restart."
  },
  {
    "id": "1669",
    "category": "backend",
    "difficulty": "medium",
    "question": "What are streams and how can they improve performance?",
    "answer": "Streams process data piece-by-piece, reducing memory usage and improving speed for large datasets."
  },
  {
    "id": "1670",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you implement role-based access control (RBAC) in a Node.js API?",
    "answer": "Check user roles in middleware before granting access to routes."
  },
  {
    "id": "1671",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the use of the fs module in Node.js?",
    "answer": "It provides APIs to interact with the file system."
  },
  {
    "id": "1672",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you connect a Node.js app to a PostgreSQL database?",
    "answer": "Use clients like pg or ORMs such as Prisma or Sequelize."
  },
  {
    "id": "1673",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the difference between PUT and POST in RESTful APIs?",
    "answer": "PUT is idempotent and replaces a resource; POST creates a new resource."
  },
  {
    "id": "1674",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you prevent cross-site request forgery (CSRF) in Node.js apps?",
    "answer": "Use CSRF tokens, verify Origin headers, and set SameSite cookies."
  },
  {
    "id": "1675",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the role of npm scripts?",
    "answer": "To automate common tasks like building, testing, or running servers."
  },
  {
    "id": "1676",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you manage package versions in Node.js projects?",
    "answer": "Use package.json to specify versions; package-lock.json locks them."
  },
  {
    "id": "1677",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is middleware chaining in Express?",
    "answer": "Calling next() in middleware to pass control to the next middleware function."
  },
  {
    "id": "1678",
    "category": "backend",
    "difficulty": "medium",
    "question": "Explain how you would implement logging with Winston in Node.js.",
    "answer": "Configure Winston transports for console and file, set log levels, and integrate into the app."
  },
  {
    "id": "1679",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is a promise and how is it different from a callback?",
    "answer": "A promise represents the result of an async operation and supports chaining and error handling; callbacks are functions called after completion."
  },
  {
    "id": "1680",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you handle input validation in Express?",
    "answer": "Use middleware libraries like express-validator or Joi to check inputs."
  },
  {
    "id": "1681",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is cluster module used for in Node.js?",
    "answer": "To create child processes that share server ports, improving performance on multi-core systems."
  },
  {
    "id": "1682",
    "category": "backend",
    "difficulty": "hard",
    "question": "How do you optimize database queries in Node.js?",
    "answer": "Use indexes, avoid N+1 queries, cache results, and use query builders or ORMs efficiently."
  },
  {
    "id": "1683",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is a RESTful API?",
    "answer": "An API following REST principles, using HTTP methods and stateless communication."
  },
  {
    "id": "1684",
    "category": "backend",
    "difficulty": "easy",
    "question": "How do you send a 404 response in Express?",
    "answer": "Use res.status(404).send('Not Found')."
  },
  {
    "id": "1685",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is JWT and how is it used in authentication?",
    "answer": "JSON Web Token is a compact token for securely transmitting user claims, often used for stateless authentication."
  },
  {
    "id": "1686",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you debug a Node.js application?",
    "answer": "Use console logs, Node inspector, or debugging tools integrated in editors."
  },
  {
    "id": "1687",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the event loop in Node.js?",
    "answer": "It's a mechanism that handles async callbacks, keeping Node.js non-blocking."
  },
  {
    "id": "1688",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you handle file uploads in Express?",
    "answer": "Use middleware like multer to process multipart/form-data."
  },
  {
    "id": "1689",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the use of the crypto module in Node.js?",
    "answer": "It provides cryptographic functionalities like hashing and encryption."
  },
  {
    "id": "1690",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you implement rate limiting in Express?",
    "answer": "Use middleware like express-rate-limit to restrict repeated requests."
  },
  {
    "id": "1691",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the difference between SQL and NoSQL databases?",
    "answer": "SQL databases are relational, NoSQL are non-relational, more flexible with schema."
  },
  {
    "id": "1692",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you test a Node.js API?",
    "answer": "Use testing frameworks like Mocha, Jest, or supertest for endpoint testing."
  },
  {
    "id": "1693",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is a callback hell and how to avoid it?",
    "answer": "It’s nested callbacks leading to hard-to-read code; avoid with promises or async/await."
  },
  {
    "id": "1694",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you secure a Node.js app from SQL injection?",
    "answer": "Use parameterized queries or ORM query builders that escape inputs."
  },
  {
    "id": "1695",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the purpose of the package-lock.json file?",
    "answer": "It locks dependency versions to ensure consistent installs."
  },
  {
    "id": "1696",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you handle real-time communication in Node.js?",
    "answer": "Use libraries like Socket.io or WebSockets."
  },
  {
    "id": "1697",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is a promise chain?",
    "answer": "A sequence of promises where each waits for the previous to resolve."
  },
  {
    "id": "1698",
    "category": "backend",
    "difficulty": "medium",
    "question": "How do you configure environment variables for production?",
    "answer": "Set variables on the server or use dotenv files excluded from version control."
  },
  {
    "id": "1699",
    "category": "backend",
    "difficulty": "medium",
    "question": "What are microservices?",
    "answer": "An architecture breaking an app into small independent services."
  },
  {
    "id": "1700",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the difference between require() and import in Node.js?",
    "answer": "require() is CommonJS syntax; import is ES Modules syntax."
  },
  {
    "id": "1701",
    "category": "nodejs",
    "difficulty": "easy",
    "question": "What is Node.js?",
    "answer": "Node.js is a JavaScript runtime built on Chrome's V8 engine for executing JavaScript on the server."
  },
  {
    "id": "1702",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How does Node.js handle asynchronous operations?",
    "answer": "Node.js uses an event loop and non-blocking I/O to handle asynchronous operations efficiently."
  },
  {
    "id": "1703",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the event loop in Node.js?",
    "answer": "It's a mechanism that handles callbacks and async operations to keep Node.js non-blocking."
  },
  {
    "id": "1704",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What are streams in Node.js?",
    "answer": "Streams are objects that let you read or write data piece-by-piece, which improves performance with large data."
  },
  {
    "id": "1705",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "Explain the difference between process.nextTick() and setImmediate() in Node.js.",
    "answer": "process.nextTick() executes callbacks before the next event loop tick, setImmediate() runs on the next iteration after I/O events."
  },
  {
    "id": "1706",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is a callback in Node.js?",
    "answer": "A function passed as an argument to another function, called after the completion of an async task."
  },
  {
    "id": "1707",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you handle errors in asynchronous code in Node.js?",
    "answer": "Use error-first callbacks, try/catch with async/await, or promise catch handlers."
  },
  {
    "id": "1708",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the role of the package.json file in a Node.js project?",
    "answer": "It manages project metadata, dependencies, scripts, and configuration."
  },
  {
    "id": "1709",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you create a simple HTTP server in Node.js?",
    "answer": "Use the built-in http module and call http.createServer with a request listener."
  },
  {
    "id": "1710",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between require() and import in Node.js?",
    "answer": "require() is CommonJS syntax; import is ES Modules syntax, supported natively in newer Node.js versions."
  },
  {
    "id": "1711",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "How do you debug a Node.js application?",
    "answer": "Use the built-in debugger, inspect with Chrome DevTools, or use IDE-integrated debuggers."
  },
  {
    "id": "1712",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between cluster and child_process modules?",
    "answer": "cluster is for spawning workers to share server load; child_process runs independent scripts or commands."
  },
  {
    "id": "1713",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How does Node.js handle concurrency?",
    "answer": "Node.js handles concurrency with its event loop and asynchronous, non-blocking APIs."
  },
  {
    "id": "1714",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is npm and what role does it play in Node.js?",
    "answer": "npm is the Node package manager that helps install and manage third-party libraries."
  },
  {
    "id": "1715",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you read and write files asynchronously in Node.js?",
    "answer": "Use fs.readFile and fs.writeFile methods with callbacks or promise versions."
  },
  {
    "id": "1716",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What are buffers in Node.js?",
    "answer": "Buffers represent raw binary data and are used to handle streams or binary protocols."
  },
  {
    "id": "1717",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How can you manage environment variables in a Node.js application?",
    "answer": "Use process.env and tools like dotenv to load variables from .env files."
  },
  {
    "id": "1718",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is middleware in the context of Node.js and Express?",
    "answer": "Middleware functions process requests and responses, adding functionality like logging or authentication."
  },
  {
    "id": "1719",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you handle uncaught exceptions in Node.js?",
    "answer": "Listen to process 'uncaughtException' or 'unhandledRejection' events and handle or log errors."
  },
  {
    "id": "1720",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between synchronous and asynchronous functions in Node.js?",
    "answer": "Synchronous functions block execution; asynchronous functions allow other code to run while waiting."
  },
  {
    "id": "1721",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How does the require cache work in Node.js?",
    "answer": "Modules are cached after first load; subsequent requires return cached exports."
  },
  {
    "id": "1722",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What are the main built-in modules of Node.js?",
    "answer": "Modules like fs, http, path, events, stream, crypto, and os."
  },
  {
    "id": "1723",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How can you improve performance of a Node.js application?",
    "answer": "Use clustering, caching, asynchronous operations, and avoid blocking code."
  },
  {
    "id": "1724",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the use of the process object in Node.js?",
    "answer": "It provides info and control over the current Node.js process, including environment, args, and events."
  },
  {
    "id": "1725",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you handle signals like SIGINT in Node.js?",
    "answer": "Use process.on('SIGINT', callback) to handle termination signals gracefully."
  },
  {
    "id": "1726",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between global and local modules in Node.js?",
    "answer": "Global modules are installed system-wide; local modules are project-specific."
  },
  {
    "id": "1727",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you use async/await in Node.js?",
    "answer": "Mark functions as async and await promises inside them for cleaner async code."
  },
  {
    "id": "1728",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How does Node.js handle CPU-intensive tasks?",
    "answer": "It offloads heavy tasks to child processes or worker threads to avoid blocking the event loop."
  },
  {
    "id": "1729",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What are worker threads in Node.js?",
    "answer": "Worker threads run JavaScript in parallel, useful for CPU-bound tasks."
  },
  {
    "id": "1730",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How can you schedule tasks in Node.js?",
    "answer": "Use setTimeout, setInterval, or libraries like node-cron."
  },
  {
    "id": "1731",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the purpose of the cluster module?",
    "answer": "It allows creating child processes that share server ports to improve scalability."
  },
  {
    "id": "1732",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you handle HTTP requests in Node.js?",
    "answer": "Use the http module to create servers that listen and respond to requests."
  },
  {
    "id": "1733",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between HTTP/1.1 and HTTP/2 support in Node.js?",
    "answer": "HTTP/2 supports multiplexing and header compression, improving performance over HTTP/1.1."
  },
  {
    "id": "1734",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you handle CORS in a Node.js backend?",
    "answer": "Use the cors middleware to set appropriate HTTP headers for cross-origin requests."
  },
  {
    "id": "1735",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What are event emitters in Node.js?",
    "answer": "Objects that emit named events and allow listeners to handle those events."
  },
  {
    "id": "1736",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you implement authentication in Node.js?",
    "answer": "Use libraries like Passport.js or JWT-based strategies for stateless auth."
  },
  {
    "id": "1737",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is middleware chaining in Express.js?",
    "answer": "Multiple middleware functions run sequentially for processing requests."
  },
  {
    "id": "1738",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you prevent memory leaks in Node.js?",
    "answer": "Avoid global variables, remove event listeners when not needed, and profile memory usage."
  },
  {
    "id": "1739",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the use of the cluster.fork() method?",
    "answer": "It spawns a new worker process to share the load of a Node.js application."
  },
  {
    "id": "1740",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you manage sessions in a Node.js application?",
    "answer": "Use session middleware like express-session with in-memory or persistent stores."
  },
  {
    "id": "1741",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the purpose of the 'nextTick' queue in Node.js?",
    "answer": "It queues callbacks to run immediately after the current operation completes, before I/O events."
  },
  {
    "id": "1742",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you connect to a database in Node.js?",
    "answer": "Use database drivers or ORMs like mongoose for MongoDB or sequelize for SQL databases."
  },
  {
    "id": "1743",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is a package-lock.json file and why is it important?",
    "answer": "It locks exact versions of dependencies to ensure consistent installs."
  },
  {
    "id": "1744",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you implement logging in Node.js?",
    "answer": "Use console methods or libraries like Winston or Bunyan for structured logging."
  },
  {
    "id": "1745",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between process.exit() and process.kill()?",
    "answer": "process.exit() stops the Node.js process; process.kill() sends signals to processes."
  },
  {
    "id": "1746",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you secure sensitive information in Node.js applications?",
    "answer": "Use environment variables, avoid hardcoding secrets, and use encryption when necessary."
  },
  {
    "id": "1747",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between callback hell and promise chaining?",
    "answer": "Callback hell happens when callbacks are nested deeply, making code hard to read; promise chaining flattens async calls, improving readability."
  },
  {
    "id": "1748",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you convert a callback-based function to return a promise in Node.js?",
    "answer": "Use the util.promisify() method to wrap the callback function and return a promise."
  },
  {
    "id": "1749",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the significance of the 'this' keyword in Node.js modules?",
    "answer": "'this' in a Node.js module refers to module.exports, which is the object exported from the module."
  },
  {
    "id": "1750",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How can you monitor performance in a Node.js application?",
    "answer": "Use tools like Node.js built-in profiler, clinic.js, or external monitoring services like New Relic."
  },
  {
    "id": "1751",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "Explain how to handle file uploads in Node.js.",
    "answer": "Use middleware like multer to parse multipart/form-data and handle file uploads."
  },
  {
    "id": "1752",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between Buffer.alloc() and Buffer.from()?",
    "answer": "Buffer.alloc() creates a zero-filled buffer of specified size; Buffer.from() creates a buffer from an existing data source."
  },
  {
    "id": "1753",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you handle cross-site scripting (XSS) attacks in Node.js apps?",
    "answer": "Sanitize user input, use libraries like helmet, and implement Content Security Policy (CSP) headers."
  },
  {
    "id": "1754",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the purpose of the domain module in Node.js?",
    "answer": "It provides a way to handle multiple different I/O operations as a single group for better error handling."
  },
  {
    "id": "1755",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How can you debug memory leaks in a Node.js application?",
    "answer": "Use tools like Chrome DevTools heap snapshots, node-memwatch, or built-in inspector to find leaks."
  },
  {
    "id": "1756",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between global, process, and module in Node.js?",
    "answer": "global is the global object accessible everywhere; process contains info about the Node process; module contains info about the current module."
  },
  {
    "id": "1757",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you implement rate limiting in a Node.js server?",
    "answer": "Use middleware like express-rate-limit to limit repeated requests from clients."
  },
  {
    "id": "1758",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the use of the path module in Node.js?",
    "answer": "It provides utilities for working with file and directory paths."
  },
  {
    "id": "1759",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "Explain how to secure REST APIs built with Node.js.",
    "answer": "Use authentication (JWT, OAuth), validate inputs, enable HTTPS, and sanitize data."
  },
  {
    "id": "1760",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What are the differences between exec() and spawn() in child_process module?",
    "answer": "exec() runs a command and buffers output; spawn() launches a process with streams for stdin/stdout."
  },
  {
    "id": "1761",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How can you implement caching in Node.js applications?",
    "answer": "Use in-memory caches like NodeCache or Redis for distributed caching."
  },
  {
    "id": "1762",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the role of the crypto module in Node.js?",
    "answer": "It provides cryptographic functionality like hashing, encryption, and signing."
  },
  {
    "id": "1763",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "Explain how to handle HTTP redirects in Node.js.",
    "answer": "Set HTTP status codes like 301 or 302 and use response.setHeader('Location', url)."
  },
  {
    "id": "1764",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between process.argv and process.env?",
    "answer": "process.argv holds command-line arguments; process.env holds environment variables."
  },
  {
    "id": "1765",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How does Node.js handle child processes?",
    "answer": "Using the child_process module, Node.js can spawn or fork child processes for parallel execution."
  },
  {
    "id": "1766",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you implement WebSockets in Node.js?",
    "answer": "Use libraries like ws or Socket.io to enable real-time bidirectional communication."
  },
  {
    "id": "1767",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What are common ways to secure a Node.js application?",
    "answer": "Use HTTPS, sanitize inputs, implement authentication, and keep dependencies updated."
  },
  {
    "id": "1768",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you handle unhandled promise rejections in Node.js?",
    "answer": "Listen for the 'unhandledRejection' event on process and handle or log errors."
  },
  {
    "id": "1769",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between PUT and PATCH methods in REST APIs?",
    "answer": "PUT replaces the entire resource; PATCH applies partial updates."
  },
  {
    "id": "1770",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you implement file streaming in Node.js?",
    "answer": "Use fs.createReadStream and fs.createWriteStream to handle large files efficiently."
  },
  {
    "id": "1771",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the purpose of the os module in Node.js?",
    "answer": "It provides operating system-related utility methods and properties."
  },
  {
    "id": "1772",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you use promises to avoid callback hell?",
    "answer": "Chain promises to handle asynchronous tasks sequentially and catch errors more cleanly."
  },
  {
    "id": "1773",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "Explain the use of EventEmitter in Node.js.",
    "answer": "EventEmitter allows emitting and listening for events within Node.js apps."
  },
  {
    "id": "1774",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is middleware in Express.js and how is it used?",
    "answer": "Middleware are functions that process requests before reaching route handlers, used for logging, auth, etc."
  },
  {
    "id": "1775",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What are the different types of streams in Node.js?",
    "answer": "Readable, writable, duplex (both read and write), and transform (modify data while reading/writing)."
  },
  {
    "id": "1776",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How does Node.js achieve scalability?",
    "answer": "Through its non-blocking I/O, event loop, clustering, and load balancing."
  },
  {
    "id": "1777",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between synchronous and asynchronous file operations in Node.js?",
    "answer": "Synchronous operations block the thread until completion; asynchronous ones allow other tasks to run."
  },
  {
    "id": "1778",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you implement authentication using JWT in Node.js?",
    "answer": "Generate JWTs on login, send them to clients, then verify tokens on protected routes."
  },
  {
    "id": "1779",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the purpose of the util module in Node.js?",
    "answer": "It provides utility functions for debugging, formatting, and promisifying callbacks."
  },
  {
    "id": "1780",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "Explain how you handle cross-origin resource sharing (CORS) in Node.js.",
    "answer": "By setting appropriate HTTP headers, often using the cors middleware."
  },
  {
    "id": "1781",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is a readable stream pipe() method?",
    "answer": "It connects a readable stream to a writable stream to automatically transfer data."
  },
  {
    "id": "1782",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you handle concurrency in Node.js?",
    "answer": "Using event-driven architecture, worker threads, and clustering."
  },
  {
    "id": "1783",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you implement rate limiting in Express?",
    "answer": "Use middleware like express-rate-limit to limit repeated requests."
  },
  {
    "id": "1784",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between require and import in Node.js?",
    "answer": "require is CommonJS syntax; import is ES module syntax, supported in newer Node.js versions."
  },
  {
    "id": "1785",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you handle errors in asynchronous functions in Node.js?",
    "answer": "Use try-catch with async-await or catch() with promises."
  },
  {
    "id": "1786",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the event loop in Node.js?",
    "answer": "It manages the execution of asynchronous callbacks in a single-threaded environment."
  },
  {
    "id": "1787",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you handle file system permissions in Node.js?",
    "answer": "Use fs module methods like chmod and chown."
  },
  {
    "id": "1788",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between cluster and worker_threads in Node.js?",
    "answer": "Cluster forks multiple processes; worker_threads runs threads within a single process."
  },
  {
    "id": "1789",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you implement API versioning in a Node.js app?",
    "answer": "Use route prefixes or headers to differentiate API versions."
  },
  {
    "id": "1790",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How can you improve startup performance of a Node.js app?",
    "answer": "Lazy-load modules, avoid blocking code, and use faster startup scripts."
  },
  {
    "id": "1791",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the purpose of the package-lock.json file?",
    "answer": "It locks the versions of dependencies to ensure consistent installs across environments."
  },
  {
    "id": "1792",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you handle environment variables securely in Node.js?",
    "answer": "Use environment files (.env) and libraries like dotenv, and avoid committing secrets to source control."
  },
  {
    "id": "1793",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "Explain how to implement graceful shutdown in a Node.js server.",
    "answer": "Listen for termination signals, close open connections, and clean up resources before exiting."
  },
  {
    "id": "1794",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between setImmediate() and process.nextTick()?",
    "answer": "process.nextTick() executes before the next event loop tick; setImmediate() runs on the next iteration."
  },
  {
    "id": "1795",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you implement streaming JSON parsing in Node.js?",
    "answer": "Use libraries like JSONStream to parse large JSON data without blocking."
  },
  {
    "id": "1796",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between HTTP/1.1 and HTTP/2 in Node.js?",
    "answer": "HTTP/2 supports multiplexing, header compression, and server push, improving performance."
  },
  {
    "id": "1797",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you prevent SQL injection attacks in Node.js?",
    "answer": "Use parameterized queries or ORM query builders instead of string concatenation."
  },
  {
    "id": "1798",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "Explain the purpose of worker threads in Node.js.",
    "answer": "Worker threads enable running CPU-intensive tasks in parallel without blocking the event loop."
  },
  {
    "id": "1799",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How does the event loop prioritize timers, I/O callbacks, and other tasks?",
    "answer": "It follows a specific phases order: timers, pending callbacks, idle/prepare, poll, check, and close callbacks."
  },
  {
    "id": "1800",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What are the main security risks when deploying Node.js apps?",
    "answer": "Risks include injection attacks, broken authentication, sensitive data exposure, and insecure dependencies."
  },
  {
    "id": "1801",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you use async_hooks in Node.js?",
    "answer": "async_hooks track async resources lifecycle, useful for debugging and context propagation."
  },
  {
    "id": "1802",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the significance of the exports object in Node.js modules?",
    "answer": "exports is a shortcut to module.exports, used to expose functions or variables from a module."
  },
  {
    "id": "1803",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How can you optimize database connections in a Node.js app?",
    "answer": "Use connection pooling to reuse database connections and reduce overhead."
  },
  {
    "id": "1804",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What are the differences between npm and yarn?",
    "answer": "Both are package managers; yarn is faster in installs and uses a lockfile format that ensures deterministic installs."
  },
  {
    "id": "1805",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you implement session management in a Node.js app?",
    "answer": "Use packages like express-session to manage user sessions with cookies or tokens."
  },
  {
    "id": "1806",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "Explain what is an Event Loop tick in Node.js.",
    "answer": "An event loop tick is a single cycle of the event loop where callbacks are processed."
  },
  {
    "id": "1807",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you handle large file uploads in Node.js?",
    "answer": "Use streaming with libraries like busboy or multer to process files efficiently without loading entire files into memory."
  },
  {
    "id": "1808",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the role of the cluster module?",
    "answer": "It allows creating child processes that share server ports to improve app scalability on multi-core systems."
  },
  {
    "id": "1809",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you implement logging in Node.js?",
    "answer": "Use logging libraries like Winston or Bunyan for structured and level-based logging."
  },
  {
    "id": "1810",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between blocking and non-blocking code?",
    "answer": "Blocking code stops execution until complete; non-blocking code lets other tasks run while waiting."
  },
  {
    "id": "1811",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you handle CORS errors in Node.js applications?",
    "answer": "Set appropriate CORS headers or use cors middleware to allow cross-origin requests."
  },
  {
    "id": "1812",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What are environment-specific configurations in Node.js?",
    "answer": "Configurations like database URLs or API keys that change based on deployment environment."
  },
  {
    "id": "1813",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How does Node.js handle uncaught exceptions?",
    "answer": "By default, it crashes the process; you can catch them with 'uncaughtException' event, but graceful shutdown is recommended."
  },
  {
    "id": "1814",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the use of the buffer module in Node.js?",
    "answer": "It handles raw binary data buffers efficiently."
  },
  {
    "id": "1815",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you implement HTTPS server in Node.js?",
    "answer": "Use the https module with SSL certificates to create secure servers."
  },
  {
    "id": "1816",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the purpose of process.exit()?",
    "answer": "It terminates the Node.js process with an optional exit code."
  },
  {
    "id": "1817",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "Explain how to test Node.js applications.",
    "answer": "Use testing frameworks like Mocha, Jest, or Jasmine to write unit and integration tests."
  },
  {
    "id": "1818",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you handle JSON parsing errors in Node.js?",
    "answer": "Wrap JSON.parse in try-catch blocks to handle invalid JSON safely."
  },
  {
    "id": "1819",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between synchronous and asynchronous require in Node.js?",
    "answer": "require is synchronous; dynamic import() is asynchronous."
  },
  {
    "id": "1820",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you handle uncaught promise rejections?",
    "answer": "Listen to the 'unhandledRejection' event and log or handle the error."
  },
  {
    "id": "1821",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the role of the process object in Node.js?",
    "answer": "It provides info and control over the current Node.js process."
  },
  {
    "id": "1822",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you implement real-time features in Node.js?",
    "answer": "Use WebSocket libraries like Socket.io for real-time communication."
  },
  {
    "id": "1823",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is a callback hell and how do you avoid it?",
    "answer": "Nested callbacks causing complex code; avoid with promises or async/await."
  },
  {
    "id": "1824",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you monitor performance in Node.js apps?",
    "answer": "Use tools like Node.js built-in profiler, clinic.js, or external APM services."
  },
  {
    "id": "1825",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "Explain the concept of streams in Node.js.",
    "answer": "Streams handle reading/writing data piece by piece, useful for large data."
  },
  {
    "id": "1826",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you prevent memory leaks in Node.js?",
    "answer": "Avoid global variables, properly close event listeners, and use profiling tools."
  },
  {
    "id": "1827",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between process.nextTick() and setTimeout(fn, 0)?",
    "answer": "process.nextTick runs before any I/O or timer callbacks; setTimeout(fn, 0) runs after."
  },
  {
    "id": "1828",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you handle multipart form data in Node.js?",
    "answer": "Use middleware like multer to parse multipart/form-data."
  },
  {
    "id": "1829",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "Explain the difference between middleware and route handlers in Express.",
    "answer": "Middleware functions run before route handlers to modify req/res or handle errors."
  },
  {
    "id": "1830",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you handle file system operations asynchronously in Node.js?",
    "answer": "Use fs module's async methods like fs.readFile and fs.writeFile."
  },
  {
    "id": "1831",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is a Promise and how does it work in Node.js?",
    "answer": "A Promise represents a future value, handling asynchronous operations with then/catch."
  },
  {
    "id": "1832",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you debug a Node.js application?",
    "answer": "Use built-in debugger, VSCode debug tools, or inspect with console.log."
  },
  {
    "id": "1833",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the difference between global and process objects in Node.js?",
    "answer": "global is the global namespace object; process gives info about the runtime process."
  },
  {
    "id": "1834",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you implement rate limiting in Node.js APIs?",
    "answer": "Use middleware like express-rate-limit to limit repeated requests."
  },
  {
    "id": "1835",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the purpose of the exports object in Node.js modules?",
    "answer": "It exposes module functions and variables to be imported by other files."
  },
  {
    "id": "1836",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you use environment variables in a Node.js app?",
    "answer": "Access via process.env and load from .env files using libraries like dotenv."
  },
  {
    "id": "1837",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What are common ways to secure a Node.js API?",
    "answer": "Use HTTPS, validate inputs, authenticate users, and handle errors properly."
  },
  {
    "id": "1838",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "Explain how you would deploy a Node.js app to production.",
    "answer": "Use process managers like PM2, set environment variables, and monitor app health."
  },
  {
    "id": "1839",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the significance of the 'use strict' directive in Node.js?",
    "answer": "It enables strict mode for better error checking and avoids some silent errors."
  },
  {
    "id": "1840",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "How do you handle cross-site scripting (XSS) in Node.js applications?",
    "answer": "Sanitize inputs and outputs, use security headers like Content Security Policy."
  },
  {
    "id": "1841",
    "category": "express",
    "difficulty": "medium",
    "question": "What is Express.js and why is it popular?",
    "answer": "Express.js is a minimal and flexible Node.js web framework that simplifies building web applications and APIs."
  },
  {
    "id": "1842",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you create a simple server using Express?",
    "answer": "Import express, create an app with express(), define routes using app.get/post, and listen on a port."
  },
  {
    "id": "1843",
    "category": "express",
    "difficulty": "medium",
    "question": "What are middleware functions in Express?",
    "answer": "Middleware are functions that have access to request and response objects and can modify them or end the request-response cycle."
  },
  {
    "id": "1844",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle errors in Express applications?",
    "answer": "By defining error-handling middleware with four arguments (err, req, res, next) and placing it after other middleware."
  },
  {
    "id": "1845",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the difference between app.use() and app.get() in Express?",
    "answer": "app.use() mounts middleware for all HTTP methods; app.get() handles GET requests for specific routes."
  },
  {
    "id": "1846",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you serve static files in Express?",
    "answer": "Use express.static middleware pointing to the directory containing static assets."
  },
  {
    "id": "1847",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the purpose of next() function in Express middleware?",
    "answer": "next() passes control to the next middleware function in the stack."
  },
  {
    "id": "1848",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you parse JSON request bodies in Express?",
    "answer": "Use express.json() middleware to parse incoming JSON payloads."
  },
  {
    "id": "1849",
    "category": "express",
    "difficulty": "medium",
    "question": "How can you handle URL parameters and query strings in Express?",
    "answer": "Access URL params via req.params and query strings via req.query."
  },
  {
    "id": "1850",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement route-level middleware in Express?",
    "answer": "Pass middleware functions as additional arguments to route handlers."
  },
  {
    "id": "1851",
    "category": "express",
    "difficulty": "medium",
    "question": "Explain how to implement CORS in an Express app.",
    "answer": "Use the cors middleware package to enable Cross-Origin Resource Sharing."
  },
  {
    "id": "1852",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle file uploads in Express?",
    "answer": "Use middleware like multer to parse and handle multipart/form-data uploads."
  },
  {
    "id": "1853",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the role of router in Express?",
    "answer": "Router allows creating modular, mountable route handlers and organizing routes."
  },
  {
    "id": "1854",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement sessions in Express?",
    "answer": "Use express-session middleware to manage user sessions with cookies."
  },
  {
    "id": "1855",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the difference between app.route() and app.use()?",
    "answer": "app.route() chains route handlers for specific paths; app.use() applies middleware globally or for a path."
  },
  {
    "id": "1856",
    "category": "express",
    "difficulty": "medium",
    "question": "How can you implement rate limiting in Express?",
    "answer": "Use middleware like express-rate-limit to restrict repeated requests."
  },
  {
    "id": "1857",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you send different HTTP status codes in Express responses?",
    "answer": "Use res.status(code) before sending the response with res.send or res.json."
  },
  {
    "id": "1858",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the use of res.locals in Express?",
    "answer": "res.locals stores data accessible in templates or subsequent middleware during a request."
  },
  {
    "id": "1859",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you redirect requests in Express?",
    "answer": "Use res.redirect(url) to send a 302 redirect to the client."
  },
  {
    "id": "1860",
    "category": "express",
    "difficulty": "medium",
    "question": "Explain how to implement authentication in Express apps.",
    "answer": "Use middleware like Passport.js to handle authentication strategies."
  },
  {
    "id": "1861",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the significance of order when defining middleware in Express?",
    "answer": "Middleware is executed in the order defined; incorrect order can cause bugs or skipped handlers."
  },
  {
    "id": "1862",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement template engines with Express?",
    "answer": "Set the view engine with app.set and use res.render to serve templates."
  },
  {
    "id": "1863",
    "category": "express",
    "difficulty": "medium",
    "question": "What methods are available to send responses in Express?",
    "answer": "res.send, res.json, res.end, res.redirect, res.render, and res.sendFile."
  },
  {
    "id": "1864",
    "category": "express",
    "difficulty": "medium",
    "question": "How can you handle query string validation in Express?",
    "answer": "Use middleware or libraries like express-validator to validate req.query parameters."
  },
  {
    "id": "1865",
    "category": "express",
    "difficulty": "medium",
    "question": "Explain the concept of route parameters in Express.",
    "answer": "Route parameters define dynamic segments in URL paths accessible via req.params."
  },
  {
    "id": "1866",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you create nested routes using Express Router?",
    "answer": "Mount routers on specific paths inside another router or the main app."
  },
  {
    "id": "1867",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle 404 errors in Express?",
    "answer": "Add a middleware at the end that catches unmatched routes and sends a 404 response."
  },
  {
    "id": "1868",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the use of req.params versus req.query?",
    "answer": "req.params captures dynamic path segments; req.query contains URL query string parameters."
  },
  {
    "id": "1869",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle cross-site scripting (XSS) in Express apps?",
    "answer": "Sanitize user inputs and use security middleware like helmet."
  },
  {
    "id": "1870",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement CORS manually without middleware in Express?",
    "answer": "Set Access-Control-Allow-Origin and related headers in response for incoming requests."
  },
  {
    "id": "1871",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you parse URL-encoded form data in Express?",
    "answer": "Use express.urlencoded() middleware to parse application/x-www-form-urlencoded data."
  },
  {
    "id": "1872",
    "category": "express",
    "difficulty": "medium",
    "question": "What is a mounted middleware in Express?",
    "answer": "Middleware attached to a specific path or router, executed only when requests match."
  },
  {
    "id": "1873",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you test Express applications?",
    "answer": "Use testing frameworks like Mocha or Jest with supertest to test routes and middleware."
  },
  {
    "id": "1874",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle JSONP requests in Express?",
    "answer": "Use res.jsonp() to send JSONP responses."
  },
  {
    "id": "1875",
    "category": "express",
    "difficulty": "medium",
    "question": "Explain how to use app.param() in Express.",
    "answer": "app.param registers middleware to preprocess route parameters."
  },
  {
    "id": "1876",
    "category": "express",
    "difficulty": "medium",
    "question": "How can you secure HTTP headers in Express?",
    "answer": "Use helmet middleware to set secure headers."
  },
  {
    "id": "1877",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle compression in Express responses?",
    "answer": "Use compression middleware to gzip responses for faster delivery."
  },
  {
    "id": "1878",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you configure Express to trust proxy headers?",
    "answer": "Set app.set('trust proxy', true) to trust headers like X-Forwarded-For."
  },
  {
    "id": "1879",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement WebSocket integration with Express?",
    "answer": "Use libraries like socket.io or ws alongside Express for real-time communication."
  },
  {
    "id": "1880",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle multipart form data for file uploads in Express?",
    "answer": "Use multer middleware to parse multipart/form-data and handle files."
  },
  {
    "id": "1881",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement logging in Express apps?",
    "answer": "Use middleware like morgan to log HTTP requests."
  },
  {
    "id": "1882",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the role of req.body in Express?",
    "answer": "req.body contains the parsed data sent in the request body, available after body parsing middleware."
  },
  {
    "id": "1883",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle HTTPS in Express?",
    "answer": "Create an HTTPS server with Node's https module and pass the Express app as a handler."
  },
  {
    "id": "1884",
    "category": "express",
    "difficulty": "medium",
    "question": "How can you implement API versioning in Express?",
    "answer": "Use different route prefixes or headers to separate API versions."
  },
  {
    "id": "1885",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you use environment variables in Express apps?",
    "answer": "Access via process.env and manage them with packages like dotenv."
  },
  {
    "id": "1886",
    "category": "express",
    "difficulty": "medium",
    "question": "What are the security best practices for Express apps?",
    "answer": "Validate inputs, use HTTPS, set security headers, sanitize data, and handle errors properly."
  },
  {
    "id": "1887",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle JSON schema validation in Express?",
    "answer": "Use libraries like Ajv or Joi integrated as middleware to validate request bodies."
  },
  {
    "id": "1888",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement graceful shutdown in Express servers?",
    "answer": "Listen to process signals and close server connections properly before exiting."
  },
  {
    "id": "1889",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle cookies in Express?",
    "answer": "Use cookie-parser middleware to parse cookies from incoming requests."
  },
  {
    "id": "1890",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the difference between res.send() and res.json()?",
    "answer": "res.send() sends any type of response, res.json() specifically sends JSON and sets Content-Type header."
  },
  {
    "id": "1891",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement middleware for authentication in Express?",
    "answer": "Create a middleware that checks for valid tokens or sessions before allowing access to protected routes."
  },
  {
    "id": "1892",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the purpose of the express.Router() class?",
    "answer": "It helps organize routes into modular, mountable route handlers."
  },
  {
    "id": "1893",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you send a file as a response in Express?",
    "answer": "Use res.sendFile() with the absolute path to the file."
  },
  {
    "id": "1894",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the difference between synchronous and asynchronous middleware in Express?",
    "answer": "Synchronous middleware runs immediately and blocks the event loop; asynchronous middleware performs async operations and must call next() or handle promises properly."
  },
  {
    "id": "1895",
    "category": "express",
    "difficulty": "medium",
    "question": "How can you limit the size of incoming JSON payloads in Express?",
    "answer": "Pass a limit option to express.json(), e.g., express.json({ limit: '1mb' })."
  },
  {
    "id": "1896",
    "category": "express",
    "difficulty": "medium",
    "question": "Explain how to use template inheritance with Express view engines.",
    "answer": "Use engines like Pug or EJS that support layouts and partials to reuse templates."
  },
  {
    "id": "1897",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle URL rewriting or redirects in Express?",
    "answer": "Use res.redirect() or middleware to rewrite URLs before they reach route handlers."
  },
  {
    "id": "1898",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you debug an Express app effectively?",
    "answer": "Use console logs, Node inspector, debugger statements, and middleware like morgan."
  },
  {
    "id": "1899",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the significance of app.listen() in an Express application?",
    "answer": "It binds the app to a network port and starts listening for incoming requests."
  },
  {
    "id": "1900",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you create APIs that support both JSON and XML responses in Express?",
    "answer": "Check Accept headers in req and respond accordingly, using libraries to serialize XML if needed."
  },
  {
    "id": "1901",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle multipart uploads with streaming in Express?",
    "answer": "Use busboy or similar streaming middleware to process file uploads efficiently."
  },
  {
    "id": "1902",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement pagination in Express APIs?",
    "answer": "Accept page and limit parameters in query, then slice or limit data returned accordingly."
  },
  {
    "id": "1903",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the difference between res.end() and res.send()?",
    "answer": "res.end() ends the response without any data; res.send() sends data and ends the response."
  },
  {
    "id": "1904",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement request logging with custom formats in Express?",
    "answer": "Use morgan with a custom format string or function."
  },
  {
    "id": "1905",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle route conflicts in Express?",
    "answer": "Define more specific routes before generic ones and carefully order middleware."
  },
  {
    "id": "1906",
    "category": "express",
    "difficulty": "medium",
    "question": "Explain the role of res.append() in Express.",
    "answer": "It appends additional values to HTTP headers."
  },
  {
    "id": "1907",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you set and clear cookies in Express?",
    "answer": "Use res.cookie() to set and res.clearCookie() to clear cookies."
  },
  {
    "id": "1908",
    "category": "express",
    "difficulty": "medium",
    "question": "How can you protect Express routes from CSRF attacks?",
    "answer": "Use CSRF middleware like csurf to validate tokens."
  },
  {
    "id": "1909",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the use of req.originalUrl in Express?",
    "answer": "It stores the original request URL before any routing or middleware modifications."
  },
  {
    "id": "1910",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement localization in Express apps?",
    "answer": "Use middleware like i18n or custom logic to detect and serve localized content."
  },
  {
    "id": "1911",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle HTTP method overrides in Express?",
    "answer": "Use method-override middleware to support PUT/DELETE via POST requests."
  },
  {
    "id": "1912",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement conditional GET requests in Express?",
    "answer": "Use res.set() to set ETag or Last-Modified headers and check req headers to send 304 if unchanged."
  },
  {
    "id": "1913",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you serve compressed assets in Express?",
    "answer": "Use compression middleware to gzip responses automatically."
  },
  {
    "id": "1914",
    "category": "express",
    "difficulty": "medium",
    "question": "Explain how to use environment-specific configurations in Express.",
    "answer": "Load different config files or variables based on NODE_ENV environment variable."
  },
  {
    "id": "1915",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement request throttling in Express?",
    "answer": "Use express-rate-limit or custom middleware to limit request frequency."
  },
  {
    "id": "1916",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the role of the next('route') function in Express middleware?",
    "answer": "It skips the remaining middleware for the current route and moves to the next route handler."
  },
  {
    "id": "1917",
    "category": "express",
    "difficulty": "medium",
    "question": "How can you implement websocket authentication with Express?",
    "answer": "Authenticate on the HTTP handshake or with tokens during websocket connection establishment."
  },
  {
    "id": "1918",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement a health check endpoint in Express?",
    "answer": "Create a simple route that returns status 200 and optionally service info."
  },
  {
    "id": "1919",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the difference between res.locals and app.locals?",
    "answer": "res.locals is per request, app.locals is global to the app."
  },
  {
    "id": "1920",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement custom headers in Express responses?",
    "answer": "Use res.set() or res.header() to add custom headers."
  },
  {
    "id": "1921",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you prevent HTTP parameter pollution in Express?",
    "answer": "Use middleware like hpp to protect against parameter pollution attacks."
  },
  {
    "id": "1922",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement OAuth with Express?",
    "answer": "Use libraries like Passport.js with OAuth strategies."
  },
  {
    "id": "1923",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the purpose of app.disable() and app.enable() in Express?",
    "answer": "They turn off or on settings within the Express app."
  },
  {
    "id": "1924",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you access request headers in Express?",
    "answer": "Use req.headers or req.get(headerName) to access headers."
  },
  {
    "id": "1925",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle multipart form uploads without saving files in Express?",
    "answer": "Use multer's memory storage to keep files in memory buffers."
  },
  {
    "id": "1926",
    "category": "express",
    "difficulty": "medium",
    "question": "How can you implement WebSocket fallback for clients in Express?",
    "answer": "Use libraries like socket.io which provide fallback transports."
  },
  {
    "id": "1927",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the use of res.format() in Express?",
    "answer": "It performs content negotiation and responds with different formats."
  },
  {
    "id": "1928",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle errors thrown inside async route handlers in Express?",
    "answer": "Use try-catch or middleware like express-async-errors to catch async errors."
  },
  {
    "id": "1929",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement CSRF protection with cookie-based tokens in Express?",
    "answer": "Generate token on server, send it as cookie and verify on subsequent requests."
  },
  {
    "id": "1930",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle multiple middleware functions for a single route in Express?",
    "answer": "Pass them as arguments in order before the route handler."
  },
  {
    "id": "1931",
    "category": "express",
    "difficulty": "medium",
    "question": "How can you disable the 'X-Powered-By' header in Express?",
    "answer": "Use app.disable('x-powered-by') to remove that header."
  },
  {
    "id": "1932",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement server-sent events (SSE) with Express?",
    "answer": "Set appropriate headers and keep the response open, sending data with res.write()."
  },
  {
    "id": "1933",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle static file caching in Express?",
    "answer": "Set cacheControl options in express.static middleware or set headers manually."
  },
  {
    "id": "1934",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the use of req.route in Express?",
    "answer": "It contains the current matched route information."
  },
  {
    "id": "1935",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement custom error pages in Express?",
    "answer": "Use error-handling middleware to render custom views or send responses."
  },
  {
    "id": "1936",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle query string parameters in Express?",
    "answer": "Access them via req.query object."
  },
  {
    "id": "1937",
    "category": "express",
    "difficulty": "medium",
    "question": "How can you implement rate limiting for specific routes in Express?",
    "answer": "Use express-rate-limit middleware with route-specific configuration to limit requests."
  },
  {
    "id": "1938",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the difference between app.use() and app.all() in Express?",
    "answer": "app.use() mounts middleware for all HTTP methods and paths matching a prefix; app.all() matches all HTTP methods for a specific route."
  },
  {
    "id": "1939",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you manage sessions in Express?",
    "answer": "Use express-session middleware to create and manage session data."
  },
  {
    "id": "1940",
    "category": "express",
    "difficulty": "medium",
    "question": "How can you serve multiple static directories in Express?",
    "answer": "Call express.static() multiple times with different directories and mount paths."
  },
  {
    "id": "1941",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle CORS preflight requests in Express?",
    "answer": "Use the cors middleware and ensure OPTIONS method is handled properly."
  },
  {
    "id": "1942",
    "category": "express",
    "difficulty": "medium",
    "question": "Explain how to mount a sub-application in Express.",
    "answer": "Use app.use() to mount another Express app at a specific path."
  },
  {
    "id": "1943",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you parse URL-encoded bodies in Express?",
    "answer": "Use express.urlencoded() middleware."
  },
  {
    "id": "1944",
    "category": "express",
    "difficulty": "medium",
    "question": "How can you handle route parameters in Express?",
    "answer": "Define routes with colon-prefixed parameters, e.g. /user/:id, and access via req.params."
  },
  {
    "id": "1945",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle JSON parsing errors in Express?",
    "answer": "Use error-handling middleware that checks for syntax errors thrown by express.json()."
  },
  {
    "id": "1946",
    "category": "express",
    "difficulty": "medium",
    "question": "What are best practices for structuring an Express project?",
    "answer": "Organize routes, controllers, middleware, and configs in separate folders with clear naming."
  },
  {
    "id": "1947",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle file uploads with Express and multer?",
    "answer": "Configure multer storage and use as middleware on routes handling uploads."
  },
  {
    "id": "1948",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement custom logging in Express?",
    "answer": "Write middleware that logs request details before passing control."
  },
  {
    "id": "1949",
    "category": "express",
    "difficulty": "medium",
    "question": "How can you implement health checks that verify database connectivity in Express?",
    "answer": "Create a route that checks DB connection and returns status accordingly."
  },
  {
    "id": "1950",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle HTTP request timeouts in Express?",
    "answer": "Use timeout middleware like connect-timeout or set time limits in reverse proxies."
  },
  {
    "id": "1951",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the role of next() in Express middleware?",
    "answer": "It passes control to the next middleware or route handler."
  },
  {
    "id": "1952",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement API versioning in Express?",
    "answer": "Use different route prefixes or headers to distinguish API versions."
  },
  {
    "id": "1953",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you secure Express apps against common vulnerabilities?",
    "answer": "Use helmet middleware, validate inputs, sanitize data, and handle errors properly."
  },
  {
    "id": "1954",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you test Express routes?",
    "answer": "Use testing libraries like supertest with Jest or Mocha."
  },
  {
    "id": "1955",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle redirects in Express?",
    "answer": "Use res.redirect() with target URL."
  },
  {
    "id": "1956",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement query validation in Express?",
    "answer": "Use validation libraries like Joi or express-validator."
  },
  {
    "id": "1957",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle errors thrown by asynchronous code in Express?",
    "answer": "Use try-catch blocks in async handlers or libraries like express-async-errors."
  },
  {
    "id": "1958",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the use of res.locals in Express?",
    "answer": "It stores data local to the response that can be accessed in middleware and views."
  },
  {
    "id": "1959",
    "category": "express",
    "difficulty": "medium",
    "question": "How can you implement content security policies in Express?",
    "answer": "Use helmet-csp or set Content-Security-Policy headers manually."
  },
  {
    "id": "1960",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle query string parsing in Express?",
    "answer": "Express uses the qs module internally to parse query strings accessible via req.query."
  },
  {
    "id": "1961",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you restrict allowed HTTP methods for a route in Express?",
    "answer": "Define only handlers for specific HTTP methods and send 405 for others."
  },
  {
    "id": "1962",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the difference between app.route() and app.use()?",
    "answer": "app.route() creates chainable route handlers for a path; app.use() mounts middleware for any HTTP method."
  },
  {
    "id": "1963",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement streaming responses in Express?",
    "answer": "Use res.write() to send chunks of data and res.end() to finish."
  },
  {
    "id": "1964",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you serve dynamic HTML with Express?",
    "answer": "Use a templating engine like Pug, EJS, or Handlebars with res.render()."
  },
  {
    "id": "1965",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle cross-site scripting (XSS) in Express apps?",
    "answer": "Sanitize user inputs, escape output in templates, and use security middleware."
  },
  {
    "id": "1966",
    "category": "express",
    "difficulty": "medium",
    "question": "How can you add response headers globally in Express?",
    "answer": "Use middleware that sets headers on res before next() is called."
  },
  {
    "id": "1967",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you manage cookies securely in Express?",
    "answer": "Set flags like HttpOnly, Secure, and SameSite on cookies via res.cookie()."
  },
  {
    "id": "1968",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle proxy servers with Express apps?",
    "answer": "Set app.set('trust proxy', true) to trust headers like X-Forwarded-For."
  },
  {
    "id": "1969",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement authentication using JWT in Express?",
    "answer": "Verify JWT tokens in middleware and protect routes accordingly."
  },
  {
    "id": "1970",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle errors globally in Express?",
    "answer": "Use an error-handling middleware with four arguments (err, req, res, next)."
  },
  {
    "id": "1971",
    "category": "express",
    "difficulty": "medium",
    "question": "How can you debug Express applications?",
    "answer": "Use Node.js built-in debugger, logging, or debugging tools like nodemon and inspector."
  },
  {
    "id": "1972",
    "category": "express",
    "difficulty": "medium",
    "question": "What is middleware chaining in Express?",
    "answer": "Sequential execution of multiple middleware functions for a request."
  },
  {
    "id": "1973",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle multipart form data in Express?",
    "answer": "Use middleware like multer to parse multipart/form-data."
  },
  {
    "id": "1974",
    "category": "express",
    "difficulty": "medium",
    "question": "What is the default template engine in Express?",
    "answer": "Express does not have a default; you must install and set one explicitly."
  },
  {
    "id": "1975",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you enable gzip compression in Express?",
    "answer": "Use compression middleware to gzip responses."
  },
  {
    "id": "1976",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle environment-specific configurations in Express?",
    "answer": "Use environment variables and config files with dotenv or similar libraries."
  },
  {
    "id": "1977",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement internationalization (i18n) in Express apps?",
    "answer": "Use middleware like i18next or express-request-language to manage locales."
  },
  {
    "id": "1978",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you implement WebSocket support alongside Express?",
    "answer": "Use libraries like ws or socket.io together with Express server."
  },
  {
    "id": "1979",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle large request bodies in Express?",
    "answer": "Increase size limits in body-parser or express.json() middleware configuration."
  },
  {
    "id": "1980",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you create reusable middleware in Express?",
    "answer": "Write middleware functions that accept options and return middleware handlers."
  },
  {
    "id": "1981",
    "category": "express",
    "difficulty": "medium",
    "question": "How do you handle route redirection based on user roles in Express?",
    "answer": "Implement middleware that checks user role and redirects accordingly."
  },
  {
    "id": "1982",
    "category": "other",
    "difficulty": "easy",
    "question": "What is the difference between synchronous and asynchronous programming?",
    "answer": "Synchronous programming executes tasks one after another, blocking until each finishes; asynchronous allows tasks to run concurrently without blocking."
  },
  {
    "id": "1983",
    "category": "other",
    "difficulty": "easy",
    "question": "What is REST and why is it important?",
    "answer": "REST is an architectural style for designing networked applications that uses stateless HTTP requests and standard methods like GET and POST."
  },
  {
    "id": "1984",
    "category": "other",
    "difficulty": "medium",
    "question": "What are HTTP status codes and why are they important?",
    "answer": "They indicate the result of an HTTP request, helping clients understand if the request succeeded, failed, or needs further action."
  },
  {
    "id": "1985",
    "category": "other",
    "difficulty": "easy",
    "question": "What is the difference between a library and a framework?",
    "answer": "A library offers specific functionality you call when needed; a framework defines the structure and flow, calling your code at specific points."
  },
  {
    "id": "1986",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the purpose of version control systems like Git?",
    "answer": "They track changes in code, enable collaboration, and allow reverting to previous states."
  },
  {
    "id": "1987",
    "category": "other",
    "difficulty": "medium",
    "question": "Explain the difference between SQL and NoSQL databases.",
    "answer": "SQL databases are relational with structured schemas; NoSQL databases are non-relational and flexible, often storing JSON-like documents."
  },
  {
    "id": "1988",
    "category": "other",
    "difficulty": "medium",
    "question": "What are environment variables and why are they used?",
    "answer": "Environment variables store configuration outside code, allowing different setups for development, testing, and production."
  },
  {
    "id": "1989",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the difference between client-side and server-side rendering?",
    "answer": "Client-side rendering builds the UI in the browser after fetching data; server-side rendering builds HTML on the server and sends it to the client."
  },
  {
    "id": "1990",
    "category": "other",
    "difficulty": "medium",
    "question": "What is continuous integration (CI)?",
    "answer": "CI automates the process of merging code changes, building, and testing to catch issues early."
  },
  {
    "id": "1991",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the purpose of API documentation?",
    "answer": "It helps developers understand how to use the API, including available endpoints, parameters, and expected responses."
  },
  {
    "id": "1992",
    "category": "other",
    "difficulty": "medium",
    "question": "What is caching and how does it improve performance?",
    "answer": "Caching stores frequently accessed data temporarily to reduce latency and decrease load on servers."
  },
  {
    "id": "1993",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the difference between GET and POST HTTP methods?",
    "answer": "GET requests retrieve data without side effects; POST requests send data to the server to create or update resources."
  },
  {
    "id": "1994",
    "category": "other",
    "difficulty": "medium",
    "question": "Explain the concept of middleware in web development.",
    "answer": "Middleware is code that processes requests and responses in a pipeline, often for tasks like authentication or logging."
  },
  {
    "id": "1995",
    "category": "other",
    "difficulty": "medium",
    "question": "What is cross-origin resource sharing (CORS)?",
    "answer": "CORS is a security feature that restricts web pages from making requests to a different domain than the one that served the page."
  },
  {
    "id": "1996",
    "category": "other",
    "difficulty": "easy",
    "question": "What is the difference between a process and a thread?",
    "answer": "A process is an independent program execution; a thread is a smaller unit within a process sharing memory."
  },
  {
    "id": "1997",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the purpose of a load balancer?",
    "answer": "It distributes incoming network traffic across multiple servers to ensure availability and reliability."
  },
  {
    "id": "1998",
    "category": "other",
    "difficulty": "medium",
    "question": "What are webhooks and how are they used?",
    "answer": "Webhooks are HTTP callbacks that notify external systems when specific events happen."
  },
  {
    "id": "1999",
    "category": "other",
    "difficulty": "medium",
    "question": "Explain the difference between monolithic and microservices architectures.",
    "answer": "Monolithic apps bundle all components tightly; microservices split functionality into independent, loosely coupled services."
  },
  {
    "id": "2000",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the event loop in JavaScript?",
    "answer": "The event loop handles asynchronous callbacks by continuously checking the call stack and task queue."
  },
  {
    "id": "2001",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the difference between authentication and authorization?",
    "answer": "Authentication verifies identity; authorization determines permissions."
  },
  {
    "id": "2002",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a CDN and why is it useful?",
    "answer": "A Content Delivery Network distributes content globally to reduce latency and improve availability."
  },
  {
    "id": "2003",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the purpose of web sockets?",
    "answer": "Web sockets provide full-duplex communication channels over a single TCP connection, useful for real-time apps."
  },
  {
    "id": "2004",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the difference between cookies and localStorage?",
    "answer": "Cookies are sent with HTTP requests and have size limits; localStorage is client-only, larger, and persists until cleared."
  },
  {
    "id": "2005",
    "category": "other",
    "difficulty": "medium",
    "question": "What are design patterns and why are they important?",
    "answer": "Design patterns are reusable solutions to common software problems, improving code maintainability and clarity."
  },
  {
    "id": "2006",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the difference between blocking and non-blocking I/O?",
    "answer": "Blocking I/O waits for operations to complete before moving on; non-blocking allows other tasks to proceed concurrently."
  },
  {
    "id": "2007",
    "category": "other",
    "difficulty": "medium",
    "question": "What is containerization and how does it differ from virtualization?",
    "answer": "Containers package applications with dependencies using OS-level virtualization; virtual machines emulate entire OS environments."
  },
  {
    "id": "2008",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the purpose of unit testing?",
    "answer": "Unit testing verifies individual components or functions behave as expected."
  },
  {
    "id": "2009",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the CAP theorem in distributed systems?",
    "answer": "It states that a distributed system can only guarantee two of three: Consistency, Availability, and Partition tolerance."
  },
  {
    "id": "2010",
    "category": "other",
    "difficulty": "medium",
    "question": "What are promises in JavaScript?",
    "answer": "Promises represent future values or errors of asynchronous operations."
  },
  {
    "id": "2011",
    "category": "other",
    "difficulty": "medium",
    "question": "Explain the purpose of Docker.",
    "answer": "Docker automates container creation, deployment, and management, ensuring consistent environments."
  },
  {
    "id": "2012",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a NoSQL database?",
    "answer": "A database designed for unstructured or semi-structured data, often schema-less."
  },
  {
    "id": "2013",
    "category": "other",
    "difficulty": "medium",
    "question": "What is middleware in software architecture?",
    "answer": "Middleware connects different software components or applications, enabling communication and data management."
  },
  {
    "id": "2014",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the difference between HTTP and HTTPS?",
    "answer": "HTTPS is HTTP with encryption via SSL/TLS, providing secure data transfer."
  },
  {
    "id": "2015",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a microfrontend architecture?",
    "answer": "Splitting a frontend app into smaller, independently deployable parts."
  },
  {
    "id": "2016",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a service worker?",
    "answer": "A script that runs in the background to enable offline support, caching, and push notifications in web apps."
  },
  {
    "id": "2017",
    "category": "other",
    "difficulty": "medium",
    "question": "What are the benefits of TypeScript over JavaScript?",
    "answer": "Static typing, better tooling, early error detection, and improved code maintainability."
  },
  {
    "id": "2018",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the SOLID principle?",
    "answer": "Five design principles for writing maintainable and scalable software."
  },
  {
    "id": "2019",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the purpose of a build tool like Webpack?",
    "answer": "To bundle and optimize assets like JavaScript and CSS for deployment."
  },
  {
    "id": "2020",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the difference between a shallow copy and a deep copy?",
    "answer": "Shallow copy duplicates references; deep copy duplicates all nested objects."
  },
  {
    "id": "2021",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the difference between SQL JOIN types?",
    "answer": "INNER JOIN returns matching rows; LEFT/RIGHT JOIN include unmatched rows from one side."
  },
  {
    "id": "2022",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a race condition?",
    "answer": "A bug where the system's behavior depends on the sequence or timing of uncontrollable events."
  },
  {
    "id": "2023",
    "category": "other",
    "difficulty": "medium",
    "question": "What is garbage collection in programming languages?",
    "answer": "Automatic memory management that frees unused objects."
  },
  {
    "id": "2024",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the purpose of a proxy server?",
    "answer": "To act as an intermediary between clients and servers for caching, filtering, or security."
  },
  {
    "id": "2025",
    "category": "other",
    "difficulty": "medium",
    "question": "What is OAuth?",
    "answer": "An open standard for authorization, allowing apps to access resources on behalf of users."
  },
  {
    "id": "2026",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the difference between REST and GraphQL?",
    "answer": "REST exposes multiple endpoints for different resources; GraphQL provides a single endpoint where clients specify exactly what data they need."
  },
  {
    "id": "2027",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a monorepo and what are its benefits?",
    "answer": "A monorepo stores multiple projects in a single repository, easing code sharing and dependency management."
  },
  {
    "id": "2028",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the difference between horizontal and vertical scaling?",
    "answer": "Horizontal scaling adds more machines; vertical scaling upgrades existing machines with more resources."
  },
  {
    "id": "2029",
    "category": "other",
    "difficulty": "medium",
    "question": "What is eventual consistency?",
    "answer": "A consistency model where updates propagate asynchronously, and all replicas eventually become consistent."
  },
  {
    "id": "2030",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a circuit breaker pattern?",
    "answer": "A design pattern to prevent a system from trying to execute an operation likely to fail, improving resilience."
  },
  {
    "id": "2031",
    "category": "other",
    "difficulty": "medium",
    "question": "What is dependency injection?",
    "answer": "A technique to supply dependencies to a class or function from external sources rather than creating them internally."
  },
  {
    "id": "2032",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a memory leak?",
    "answer": "When a program unintentionally retains memory it no longer needs, causing increased usage over time."
  },
  {
    "id": "2033",
    "category": "other",
    "difficulty": "medium",
    "question": "What are WebAssembly's advantages?",
    "answer": "WebAssembly runs code at near-native speed, supports multiple languages, and integrates with JavaScript in browsers."
  },
  {
    "id": "2034",
    "category": "other",
    "difficulty": "medium",
    "question": "What is rate limiting?",
    "answer": "Controlling the number of requests a client can make in a given time to protect resources."
  },
  {
    "id": "2035",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the difference between a fork and a clone in Git?",
    "answer": "Fork creates a copy on a remote server for independent development; clone copies a repo locally."
  },
  {
    "id": "2036",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a deadlock?",
    "answer": "A situation where two or more processes are waiting indefinitely for each other to release resources."
  },
  {
    "id": "2037",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the purpose of a reverse proxy?",
    "answer": "It forwards client requests to backend servers and can provide load balancing, caching, and security."
  },
  {
    "id": "2038",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the difference between a message queue and a topic in messaging systems?",
    "answer": "Queues deliver messages to one consumer; topics broadcast messages to multiple subscribers."
  },
  {
    "id": "2039",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a race condition and how can it be avoided?",
    "answer": "It occurs when multiple threads access shared data concurrently; avoid with synchronization or locks."
  },
  {
    "id": "2040",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the CAP theorem?",
    "answer": "It states that in a distributed system, only two of Consistency, Availability, and Partition tolerance can be achieved simultaneously."
  },
  {
    "id": "2041",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a schema migration?",
    "answer": "The process of modifying database schema in a controlled, versioned way."
  },
  {
    "id": "2042",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a binary search tree?",
    "answer": "A tree data structure where each node has at most two children, with left child values less and right child values greater than the node."
  },
  {
    "id": "2043",
    "category": "other",
    "difficulty": "medium",
    "question": "What is sharding in databases?",
    "answer": "Partitioning a database into smaller, faster, more manageable pieces called shards."
  },
  {
    "id": "2044",
    "category": "other",
    "difficulty": "medium",
    "question": "What is an idempotent operation?",
    "answer": "An operation that can be performed multiple times without changing the result beyond the initial application."
  },
  {
    "id": "2045",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a dead letter queue?",
    "answer": "A queue that stores messages that could not be delivered or processed successfully."
  },
  {
    "id": "2046",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a bloom filter?",
    "answer": "A space-efficient probabilistic data structure used to test whether an element is in a set."
  },
  {
    "id": "2047",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the difference between encryption and hashing?",
    "answer": "Encryption is reversible with a key; hashing is a one-way function producing fixed-size output."
  },
  {
    "id": "2048",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the purpose of a CDN edge server?",
    "answer": "To cache and serve content closer to users, reducing latency."
  },
  {
    "id": "2049",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a thread pool?",
    "answer": "A collection of pre-instantiated threads used to perform multiple tasks concurrently."
  },
  {
    "id": "2050",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a callback hell and how can it be avoided?",
    "answer": "A nested structure of callbacks making code hard to read; avoid using promises or async/await."
  },
  {
    "id": "2051",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a virtual DOM?",
    "answer": "An in-memory representation of the real DOM used to optimize updates in frameworks like React."
  },
  {
    "id": "2052",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the difference between a promise and an observable?",
    "answer": "Promise handles a single async value; observable can emit multiple values over time."
  },
  {
    "id": "2053",
    "category": "other",
    "difficulty": "medium",
    "question": "What is memoization?",
    "answer": "An optimization technique caching the result of expensive function calls."
  },
  {
    "id": "2054",
    "category": "other",
    "difficulty": "medium",
    "question": "What is an API gateway?",
    "answer": "A server that acts as a single entry point for multiple backend services."
  },
  {
    "id": "2055",
    "category": "other",
    "difficulty": "medium",
    "question": "What is rate limiting and how is it implemented?",
    "answer": "Controlling how often a client can make requests, usually by counting requests in a time window."
  },
  {
    "id": "2056",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a rollback in database management?",
    "answer": "Undoing a set of operations to maintain data integrity."
  },
  {
    "id": "2057",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the difference between symmetric and asymmetric encryption?",
    "answer": "Symmetric uses the same key for encrypt/decrypt; asymmetric uses a key pair (public/private)."
  },
  {
    "id": "2058",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a zero-downtime deployment?",
    "answer": "Releasing new software versions without interrupting service availability."
  },
  {
    "id": "2059",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the difference between a bug and a feature request?",
    "answer": "A bug is an error or fault in software; a feature request is a new desired functionality."
  },
  {
    "id": "2060",
    "category": "other",
    "difficulty": "medium",
    "question": "What is eventual consistency in distributed databases?",
    "answer": "A model where data becomes consistent across nodes after some time, not immediately."
  },
  {
    "id": "2061",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a software design pattern?",
    "answer": "A reusable solution to a common software design problem."
  },
  {
    "id": "2062",
    "category": "other",
    "difficulty": "medium",
    "question": "What is containerization?",
    "answer": "Packaging software with its dependencies into isolated units for consistent deployment."
  },
  {
    "id": "2063",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a CDN and why use it?",
    "answer": "Content Delivery Network, used to distribute content geographically closer to users."
  },
  {
    "id": "2064",
    "category": "other",
    "difficulty": "medium",
    "question": "What is latency in networking?",
    "answer": "The delay between sending and receiving data."
  },
  {
    "id": "2065",
    "category": "other",
    "difficulty": "medium",
    "question": "What is load balancing?",
    "answer": "Distributing incoming network traffic across multiple servers."
  },
  {
    "id": "2066",
    "category": "other",
    "difficulty": "medium",
    "question": "What is OAuth 2.0?",
    "answer": "An authorization framework enabling third-party applications to obtain limited access to user accounts."
  },
  {
    "id": "2067",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a webhook?",
    "answer": "A way for apps to send real-time data to other apps via HTTP callbacks."
  },
  {
    "id": "2068",
    "category": "other",
    "difficulty": "medium",
    "question": "What is continuous integration (CI)?",
    "answer": "Automating code integration and testing to detect problems early."
  },
  {
    "id": "2069",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the difference between a thread and a process?",
    "answer": "A process is an independent program execution; a thread is a lightweight unit of a process."
  },
  {
    "id": "2070",
    "category": "other",
    "difficulty": "medium",
    "question": "What is cross-site scripting (XSS)?",
    "answer": "A security vulnerability where attackers inject malicious scripts into trusted websites."
  },
  {
    "id": "2071",
    "category": "other",
    "difficulty": "medium",
    "question": "What is a data race?",
    "answer": "When two or more threads access shared data simultaneously with at least one write."
  },
  {
    "id": "2072",
    "category": "other",
    "difficulty": "medium",
    "question": "What is the difference between HTTP and HTTPS?",
    "answer": "HTTPS encrypts data sent between client and server; HTTP does not."
  }
]
